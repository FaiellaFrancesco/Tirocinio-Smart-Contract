üìÅ SETUP TIROCINIO ‚Äì AMBIENTE HARDHAT + CONTRATTI VALIDATI

üîß CONFIGURAZIONE DELL‚ÄôAMBIENTE

1. Installato nvm (Node Version Manager):
   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
   echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.zshrc
   echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.zshrc
   source ~/.zshrc

2. Installato Node.js versione 22:
   nvm install 22
   nvm use 22

3. Creato un progetto Hardhat:
   npm init -y
   npm install --save-dev hardhat
   npx hardhat   # ‚Üí Create a JavaScript project

‚öôÔ∏è ADATTAMENTO ALLA SITUAZIONE

4. Era presente una cartella "contracts/" con contratti Solidity gi√† esistenti.

5. Configurato hardhat.config.js per supportare pi√π compilatori Solidity:

   module.exports = {
     solidity: {
       compilers: [
         { version: "0.8.4" },
         { version: "0.8.19" },
         { version: "0.8.23" },
         { version: "0.8.30" },
         // altri...
       ]
     }
   }

üß™ PULIZIA E SELEZIONE DEI CONTRATTI VALIDI

6. Eseguito uno script bash per compilare ogni file Solidity individualmente:
   - I contratti che compilano sono stati spostati in "compile_success/"
   - Quelli che falliscono in "compile_failed/"

7. Pulizia della cartella contracts/:
   rm contracts/*.sol

8. Copia dei contratti validi in contracts/:
   cp compile_success/*.sol contracts/

9. Verifica finale:
   npx hardhat clean
   npx hardhat compile
   npx hardhat coverage

üß¨ INTERAZIONE CON SuMo

10. √à stato tentato l‚Äôuso del tool SuMo per mutation testing:
    - Clonata la repository: https://github.com/MorenaBarboni/SuMo-SOlidity-MUtator
    - Installate le dipendenze con `npm install`
    - Collegato globalmente con `npm link`
    - Si √® verificato un errore a causa del modulo mancante `@morenabarboni/sumo`
    - Dopo vari tentativi, la cartella SuMo √® stata rimossa
    - Installato manualmente il modulo mancante con: `npm install @morenabarboni/sumo`




------------------------------------------------DIARIO----------------------------------------------------
2)Generazione dei test dell'ABI:
   2.1)A cosa serve?
      -Risparmio di tempo, non bisogna inventare i boilerplate dei test, llm riempie solo i todo
      -Copertura sistematica: hai subito un blocco di test per ogni funzione dell abi 
      -Tutti i file hanno formato standard e sono pi√π facili da validare e confrontare 
      -Pronto per SuMo
   2.2)Checklist
      -Prerequisiti : hardhat compule eseguito ( Ho un script che lo fa per tutti i contratti.df)
      -Struttura delle cartelle: 
            -scripts/scaffold-from-abi.ts script 
            -test/llm
      -Aggiungi lo script in TypeScript
      -Esegui lo script
      -Controlla l output



      
   
