/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BundTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURN_ADDRESS"
      | "MAX_TOTAL_FEE"
      | "ZERO_ADDRESS"
      | "_updateDevWallet"
      | "_updatetaxWallet"
      | "activationBlock"
      | "activationTime"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklistedBots"
      | "buyTax"
      | "changeCooldownEnabled"
      | "changeLimitsEnabled"
      | "changeTransferTax"
      | "clearStuckTokens"
      | "cooldownEnabled"
      | "decimals"
      | "devWallet"
      | "enableTrading"
      | "excludeFromFees"
      | "excludeFromLimits"
      | "excludedFromFees"
      | "excludedFromLimits"
      | "feesEnabled"
      | "isActivated"
      | "limitsEnabled"
      | "marketPairs"
      | "maxBuyLimit"
      | "maxSellLimit"
      | "maxWalletLimit"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "sellTax"
      | "setBlacklistedBots"
      | "setFeesEnabled"
      | "setMarketPair"
      | "setMaxBuyLimit"
      | "setMaxSellLimit"
      | "setMaxWalletLimit"
      | "setTax"
      | "setTokensForSwap"
      | "swapPair"
      | "swapRouter"
      | "symbol"
      | "taxWallet"
      | "tokensForSwap"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferTax"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Activation"
      | "Approval"
      | "BotStatusUpdated"
      | "BuyTaxUpdated"
      | "CooldownStatusChanged"
      | "DevWalletUpdated"
      | "ExcludedFromFees"
      | "ExcludedFromLimits"
      | "FeesStatusChanged"
      | "LimitsStatusChanged"
      | "MarketPairStatusUpdated"
      | "MaxBuyLimitUpdated"
      | "MaxSellLimitUpdated"
      | "MaxWalletLimitUpdated"
      | "OwnershipTransferred"
      | "SellTaxUpdated"
      | "StuckTokensWithdrawn"
      | "TokensForSwapUpdated"
      | "Transfer"
      | "TransferTaxUpdated"
      | "taxWalletUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BURN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_updateDevWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_updatetaxWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedBots",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "buyTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeCooldownEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLimitsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTransferTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStuckTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromLimits",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBuyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBlacklistedBots",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPair",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBuyLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSellLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTax",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokensForSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swapPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTax",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updateDevWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updatetaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedBots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeCooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLimitsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTransferTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearStuckTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklistedBots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSellLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokensForSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTax",
    data: BytesLike
  ): Result;
}

export namespace ActivationEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BotStatusUpdatedEvent {
  export type InputTuple = [account: AddressLike, isBlacklisted: boolean];
  export type OutputTuple = [account: string, isBlacklisted: boolean];
  export interface OutputObject {
    account: string;
    isBlacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyTaxUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish, oldValue: BigNumberish];
  export type OutputTuple = [newValue: bigint, oldValue: bigint];
  export interface OutputObject {
    newValue: bigint;
    oldValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CooldownStatusChangedEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludedFromFeesEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludedFromLimitsEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesStatusChangedEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitsStatusChangedEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketPairStatusUpdatedEvent {
  export type InputTuple = [pair: AddressLike, value: boolean];
  export type OutputTuple = [pair: string, value: boolean];
  export interface OutputObject {
    pair: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxBuyLimitUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxSellLimitUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletLimitUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellTaxUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish, oldValue: BigNumberish];
  export type OutputTuple = [newValue: bigint, oldValue: bigint];
  export interface OutputObject {
    newValue: bigint;
    oldValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StuckTokensWithdrawnEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensForSwapUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish, oldValue: BigNumberish];
  export type OutputTuple = [newValue: bigint, oldValue: bigint];
  export interface OutputObject {
    newValue: bigint;
    oldValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferTaxUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish, oldValue: BigNumberish];
  export type OutputTuple = [newValue: bigint, oldValue: bigint];
  export interface OutputObject {
    newValue: bigint;
    oldValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace taxWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BundTest extends BaseContract {
  connect(runner?: ContractRunner | null): BundTest;
  waitForDeployment(): Promise<this>;

  interface: BundTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURN_ADDRESS: TypedContractMethod<[], [string], "view">;

  MAX_TOTAL_FEE: TypedContractMethod<[], [bigint], "view">;

  ZERO_ADDRESS: TypedContractMethod<[], [string], "view">;

  _updateDevWallet: TypedContractMethod<
    [_devWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  _updatetaxWallet: TypedContractMethod<
    [_taxWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  activationBlock: TypedContractMethod<[], [bigint], "view">;

  activationTime: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  blacklistedBots: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  buyTax: TypedContractMethod<[], [bigint], "view">;

  changeCooldownEnabled: TypedContractMethod<
    [value: boolean],
    [void],
    "nonpayable"
  >;

  changeLimitsEnabled: TypedContractMethod<
    [value: boolean],
    [void],
    "nonpayable"
  >;

  changeTransferTax: TypedContractMethod<
    [_transferTax: BigNumberish],
    [void],
    "nonpayable"
  >;

  clearStuckTokens: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  cooldownEnabled: TypedContractMethod<[], [boolean], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  devWallet: TypedContractMethod<[], [string], "view">;

  enableTrading: TypedContractMethod<[status: boolean], [void], "nonpayable">;

  excludeFromFees: TypedContractMethod<
    [accounts: AddressLike[], value: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromLimits: TypedContractMethod<
    [accounts: AddressLike[], value: boolean],
    [void],
    "nonpayable"
  >;

  excludedFromFees: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  excludedFromLimits: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  feesEnabled: TypedContractMethod<[], [boolean], "view">;

  isActivated: TypedContractMethod<[], [boolean], "view">;

  limitsEnabled: TypedContractMethod<[], [boolean], "view">;

  marketPairs: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxBuyLimit: TypedContractMethod<[], [bigint], "view">;

  maxSellLimit: TypedContractMethod<[], [bigint], "view">;

  maxWalletLimit: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellTax: TypedContractMethod<[], [bigint], "view">;

  setBlacklistedBots: TypedContractMethod<
    [accounts: AddressLike[], value: boolean],
    [void],
    "nonpayable"
  >;

  setFeesEnabled: TypedContractMethod<[value: boolean], [void], "nonpayable">;

  setMarketPair: TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  setMaxBuyLimit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxSellLimit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxWalletLimit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTax: TypedContractMethod<
    [_buyTax: BigNumberish, _sellTax: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokensForSwap: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapPair: TypedContractMethod<[], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  taxWallet: TypedContractMethod<[], [string], "view">;

  tokensForSwap: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferTax: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURN_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_TOTAL_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_updateDevWallet"
  ): TypedContractMethod<[_devWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_updatetaxWallet"
  ): TypedContractMethod<[_taxWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activationBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklistedBots"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "buyTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeCooldownEnabled"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeLimitsEnabled"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeTransferTax"
  ): TypedContractMethod<[_transferTax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearStuckTokens"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cooldownEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enableTrading"
  ): TypedContractMethod<[status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFees"
  ): TypedContractMethod<
    [accounts: AddressLike[], value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeFromLimits"
  ): TypedContractMethod<
    [accounts: AddressLike[], value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludedFromFees"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "excludedFromLimits"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "feesEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isActivated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "limitsEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketPairs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxBuyLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSellLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWalletLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBlacklistedBots"
  ): TypedContractMethod<
    [accounts: AddressLike[], value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeesEnabled"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketPair"
  ): TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxBuyLimit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxSellLimit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxWalletLimit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTax"
  ): TypedContractMethod<
    [_buyTax: BigNumberish, _sellTax: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokensForSwap"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensForSwap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferTax"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Activation"
  ): TypedContractEvent<
    ActivationEvent.InputTuple,
    ActivationEvent.OutputTuple,
    ActivationEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BotStatusUpdated"
  ): TypedContractEvent<
    BotStatusUpdatedEvent.InputTuple,
    BotStatusUpdatedEvent.OutputTuple,
    BotStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BuyTaxUpdated"
  ): TypedContractEvent<
    BuyTaxUpdatedEvent.InputTuple,
    BuyTaxUpdatedEvent.OutputTuple,
    BuyTaxUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CooldownStatusChanged"
  ): TypedContractEvent<
    CooldownStatusChangedEvent.InputTuple,
    CooldownStatusChangedEvent.OutputTuple,
    CooldownStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "DevWalletUpdated"
  ): TypedContractEvent<
    DevWalletUpdatedEvent.InputTuple,
    DevWalletUpdatedEvent.OutputTuple,
    DevWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExcludedFromFees"
  ): TypedContractEvent<
    ExcludedFromFeesEvent.InputTuple,
    ExcludedFromFeesEvent.OutputTuple,
    ExcludedFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "ExcludedFromLimits"
  ): TypedContractEvent<
    ExcludedFromLimitsEvent.InputTuple,
    ExcludedFromLimitsEvent.OutputTuple,
    ExcludedFromLimitsEvent.OutputObject
  >;
  getEvent(
    key: "FeesStatusChanged"
  ): TypedContractEvent<
    FeesStatusChangedEvent.InputTuple,
    FeesStatusChangedEvent.OutputTuple,
    FeesStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "LimitsStatusChanged"
  ): TypedContractEvent<
    LimitsStatusChangedEvent.InputTuple,
    LimitsStatusChangedEvent.OutputTuple,
    LimitsStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketPairStatusUpdated"
  ): TypedContractEvent<
    MarketPairStatusUpdatedEvent.InputTuple,
    MarketPairStatusUpdatedEvent.OutputTuple,
    MarketPairStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxBuyLimitUpdated"
  ): TypedContractEvent<
    MaxBuyLimitUpdatedEvent.InputTuple,
    MaxBuyLimitUpdatedEvent.OutputTuple,
    MaxBuyLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxSellLimitUpdated"
  ): TypedContractEvent<
    MaxSellLimitUpdatedEvent.InputTuple,
    MaxSellLimitUpdatedEvent.OutputTuple,
    MaxSellLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletLimitUpdated"
  ): TypedContractEvent<
    MaxWalletLimitUpdatedEvent.InputTuple,
    MaxWalletLimitUpdatedEvent.OutputTuple,
    MaxWalletLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SellTaxUpdated"
  ): TypedContractEvent<
    SellTaxUpdatedEvent.InputTuple,
    SellTaxUpdatedEvent.OutputTuple,
    SellTaxUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StuckTokensWithdrawn"
  ): TypedContractEvent<
    StuckTokensWithdrawnEvent.InputTuple,
    StuckTokensWithdrawnEvent.OutputTuple,
    StuckTokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "TokensForSwapUpdated"
  ): TypedContractEvent<
    TokensForSwapUpdatedEvent.InputTuple,
    TokensForSwapUpdatedEvent.OutputTuple,
    TokensForSwapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferTaxUpdated"
  ): TypedContractEvent<
    TransferTaxUpdatedEvent.InputTuple,
    TransferTaxUpdatedEvent.OutputTuple,
    TransferTaxUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "taxWalletUpdated"
  ): TypedContractEvent<
    taxWalletUpdatedEvent.InputTuple,
    taxWalletUpdatedEvent.OutputTuple,
    taxWalletUpdatedEvent.OutputObject
  >;

  filters: {
    "Activation(bool)": TypedContractEvent<
      ActivationEvent.InputTuple,
      ActivationEvent.OutputTuple,
      ActivationEvent.OutputObject
    >;
    Activation: TypedContractEvent<
      ActivationEvent.InputTuple,
      ActivationEvent.OutputTuple,
      ActivationEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BotStatusUpdated(address,bool)": TypedContractEvent<
      BotStatusUpdatedEvent.InputTuple,
      BotStatusUpdatedEvent.OutputTuple,
      BotStatusUpdatedEvent.OutputObject
    >;
    BotStatusUpdated: TypedContractEvent<
      BotStatusUpdatedEvent.InputTuple,
      BotStatusUpdatedEvent.OutputTuple,
      BotStatusUpdatedEvent.OutputObject
    >;

    "BuyTaxUpdated(uint256,uint256)": TypedContractEvent<
      BuyTaxUpdatedEvent.InputTuple,
      BuyTaxUpdatedEvent.OutputTuple,
      BuyTaxUpdatedEvent.OutputObject
    >;
    BuyTaxUpdated: TypedContractEvent<
      BuyTaxUpdatedEvent.InputTuple,
      BuyTaxUpdatedEvent.OutputTuple,
      BuyTaxUpdatedEvent.OutputObject
    >;

    "CooldownStatusChanged(bool)": TypedContractEvent<
      CooldownStatusChangedEvent.InputTuple,
      CooldownStatusChangedEvent.OutputTuple,
      CooldownStatusChangedEvent.OutputObject
    >;
    CooldownStatusChanged: TypedContractEvent<
      CooldownStatusChangedEvent.InputTuple,
      CooldownStatusChangedEvent.OutputTuple,
      CooldownStatusChangedEvent.OutputObject
    >;

    "DevWalletUpdated(address,address)": TypedContractEvent<
      DevWalletUpdatedEvent.InputTuple,
      DevWalletUpdatedEvent.OutputTuple,
      DevWalletUpdatedEvent.OutputObject
    >;
    DevWalletUpdated: TypedContractEvent<
      DevWalletUpdatedEvent.InputTuple,
      DevWalletUpdatedEvent.OutputTuple,
      DevWalletUpdatedEvent.OutputObject
    >;

    "ExcludedFromFees(address,bool)": TypedContractEvent<
      ExcludedFromFeesEvent.InputTuple,
      ExcludedFromFeesEvent.OutputTuple,
      ExcludedFromFeesEvent.OutputObject
    >;
    ExcludedFromFees: TypedContractEvent<
      ExcludedFromFeesEvent.InputTuple,
      ExcludedFromFeesEvent.OutputTuple,
      ExcludedFromFeesEvent.OutputObject
    >;

    "ExcludedFromLimits(address,bool)": TypedContractEvent<
      ExcludedFromLimitsEvent.InputTuple,
      ExcludedFromLimitsEvent.OutputTuple,
      ExcludedFromLimitsEvent.OutputObject
    >;
    ExcludedFromLimits: TypedContractEvent<
      ExcludedFromLimitsEvent.InputTuple,
      ExcludedFromLimitsEvent.OutputTuple,
      ExcludedFromLimitsEvent.OutputObject
    >;

    "FeesStatusChanged(bool)": TypedContractEvent<
      FeesStatusChangedEvent.InputTuple,
      FeesStatusChangedEvent.OutputTuple,
      FeesStatusChangedEvent.OutputObject
    >;
    FeesStatusChanged: TypedContractEvent<
      FeesStatusChangedEvent.InputTuple,
      FeesStatusChangedEvent.OutputTuple,
      FeesStatusChangedEvent.OutputObject
    >;

    "LimitsStatusChanged(bool)": TypedContractEvent<
      LimitsStatusChangedEvent.InputTuple,
      LimitsStatusChangedEvent.OutputTuple,
      LimitsStatusChangedEvent.OutputObject
    >;
    LimitsStatusChanged: TypedContractEvent<
      LimitsStatusChangedEvent.InputTuple,
      LimitsStatusChangedEvent.OutputTuple,
      LimitsStatusChangedEvent.OutputObject
    >;

    "MarketPairStatusUpdated(address,bool)": TypedContractEvent<
      MarketPairStatusUpdatedEvent.InputTuple,
      MarketPairStatusUpdatedEvent.OutputTuple,
      MarketPairStatusUpdatedEvent.OutputObject
    >;
    MarketPairStatusUpdated: TypedContractEvent<
      MarketPairStatusUpdatedEvent.InputTuple,
      MarketPairStatusUpdatedEvent.OutputTuple,
      MarketPairStatusUpdatedEvent.OutputObject
    >;

    "MaxBuyLimitUpdated(uint256)": TypedContractEvent<
      MaxBuyLimitUpdatedEvent.InputTuple,
      MaxBuyLimitUpdatedEvent.OutputTuple,
      MaxBuyLimitUpdatedEvent.OutputObject
    >;
    MaxBuyLimitUpdated: TypedContractEvent<
      MaxBuyLimitUpdatedEvent.InputTuple,
      MaxBuyLimitUpdatedEvent.OutputTuple,
      MaxBuyLimitUpdatedEvent.OutputObject
    >;

    "MaxSellLimitUpdated(uint256)": TypedContractEvent<
      MaxSellLimitUpdatedEvent.InputTuple,
      MaxSellLimitUpdatedEvent.OutputTuple,
      MaxSellLimitUpdatedEvent.OutputObject
    >;
    MaxSellLimitUpdated: TypedContractEvent<
      MaxSellLimitUpdatedEvent.InputTuple,
      MaxSellLimitUpdatedEvent.OutputTuple,
      MaxSellLimitUpdatedEvent.OutputObject
    >;

    "MaxWalletLimitUpdated(uint256)": TypedContractEvent<
      MaxWalletLimitUpdatedEvent.InputTuple,
      MaxWalletLimitUpdatedEvent.OutputTuple,
      MaxWalletLimitUpdatedEvent.OutputObject
    >;
    MaxWalletLimitUpdated: TypedContractEvent<
      MaxWalletLimitUpdatedEvent.InputTuple,
      MaxWalletLimitUpdatedEvent.OutputTuple,
      MaxWalletLimitUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SellTaxUpdated(uint256,uint256)": TypedContractEvent<
      SellTaxUpdatedEvent.InputTuple,
      SellTaxUpdatedEvent.OutputTuple,
      SellTaxUpdatedEvent.OutputObject
    >;
    SellTaxUpdated: TypedContractEvent<
      SellTaxUpdatedEvent.InputTuple,
      SellTaxUpdatedEvent.OutputTuple,
      SellTaxUpdatedEvent.OutputObject
    >;

    "StuckTokensWithdrawn(address,uint256)": TypedContractEvent<
      StuckTokensWithdrawnEvent.InputTuple,
      StuckTokensWithdrawnEvent.OutputTuple,
      StuckTokensWithdrawnEvent.OutputObject
    >;
    StuckTokensWithdrawn: TypedContractEvent<
      StuckTokensWithdrawnEvent.InputTuple,
      StuckTokensWithdrawnEvent.OutputTuple,
      StuckTokensWithdrawnEvent.OutputObject
    >;

    "TokensForSwapUpdated(uint256,uint256)": TypedContractEvent<
      TokensForSwapUpdatedEvent.InputTuple,
      TokensForSwapUpdatedEvent.OutputTuple,
      TokensForSwapUpdatedEvent.OutputObject
    >;
    TokensForSwapUpdated: TypedContractEvent<
      TokensForSwapUpdatedEvent.InputTuple,
      TokensForSwapUpdatedEvent.OutputTuple,
      TokensForSwapUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferTaxUpdated(uint256,uint256)": TypedContractEvent<
      TransferTaxUpdatedEvent.InputTuple,
      TransferTaxUpdatedEvent.OutputTuple,
      TransferTaxUpdatedEvent.OutputObject
    >;
    TransferTaxUpdated: TypedContractEvent<
      TransferTaxUpdatedEvent.InputTuple,
      TransferTaxUpdatedEvent.OutputTuple,
      TransferTaxUpdatedEvent.OutputObject
    >;

    "taxWalletUpdated(address,address)": TypedContractEvent<
      taxWalletUpdatedEvent.InputTuple,
      taxWalletUpdatedEvent.OutputTuple,
      taxWalletUpdatedEvent.OutputObject
    >;
    taxWalletUpdated: TypedContractEvent<
      taxWalletUpdatedEvent.InputTuple,
      taxWalletUpdatedEvent.OutputTuple,
      taxWalletUpdatedEvent.OutputObject
    >;
  };
}
