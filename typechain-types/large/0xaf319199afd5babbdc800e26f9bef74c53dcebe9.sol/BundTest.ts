/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BundTestInterface extends utils.Interface {
  functions: {
    "BURN_ADDRESS()": FunctionFragment;
    "MAX_TOTAL_FEE()": FunctionFragment;
    "ZERO_ADDRESS()": FunctionFragment;
    "_updateDevWallet(address)": FunctionFragment;
    "_updatetaxWallet(address)": FunctionFragment;
    "activationBlock()": FunctionFragment;
    "activationTime()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistedBots(address)": FunctionFragment;
    "buyTax()": FunctionFragment;
    "changeCooldownEnabled(bool)": FunctionFragment;
    "changeLimitsEnabled(bool)": FunctionFragment;
    "changeTransferTax(uint256)": FunctionFragment;
    "clearStuckTokens(address)": FunctionFragment;
    "cooldownEnabled()": FunctionFragment;
    "decimals()": FunctionFragment;
    "devWallet()": FunctionFragment;
    "enableTrading(bool)": FunctionFragment;
    "excludeFromFees(address[],bool)": FunctionFragment;
    "excludeFromLimits(address[],bool)": FunctionFragment;
    "excludedFromFees(address)": FunctionFragment;
    "excludedFromLimits(address)": FunctionFragment;
    "feesEnabled()": FunctionFragment;
    "isActivated()": FunctionFragment;
    "limitsEnabled()": FunctionFragment;
    "marketPairs(address)": FunctionFragment;
    "maxBuyLimit()": FunctionFragment;
    "maxSellLimit()": FunctionFragment;
    "maxWalletLimit()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellTax()": FunctionFragment;
    "setBlacklistedBots(address[],bool)": FunctionFragment;
    "setFeesEnabled(bool)": FunctionFragment;
    "setMarketPair(address,bool)": FunctionFragment;
    "setMaxBuyLimit(uint256)": FunctionFragment;
    "setMaxSellLimit(uint256)": FunctionFragment;
    "setMaxWalletLimit(uint256)": FunctionFragment;
    "setTax(uint256,uint256)": FunctionFragment;
    "setTokensForSwap(uint256)": FunctionFragment;
    "swapPair()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "symbol()": FunctionFragment;
    "taxWallet()": FunctionFragment;
    "tokensForSwap()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTax()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BURN_ADDRESS"
      | "MAX_TOTAL_FEE"
      | "ZERO_ADDRESS"
      | "_updateDevWallet"
      | "_updatetaxWallet"
      | "activationBlock"
      | "activationTime"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklistedBots"
      | "buyTax"
      | "changeCooldownEnabled"
      | "changeLimitsEnabled"
      | "changeTransferTax"
      | "clearStuckTokens"
      | "cooldownEnabled"
      | "decimals"
      | "devWallet"
      | "enableTrading"
      | "excludeFromFees"
      | "excludeFromLimits"
      | "excludedFromFees"
      | "excludedFromLimits"
      | "feesEnabled"
      | "isActivated"
      | "limitsEnabled"
      | "marketPairs"
      | "maxBuyLimit"
      | "maxSellLimit"
      | "maxWalletLimit"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "sellTax"
      | "setBlacklistedBots"
      | "setFeesEnabled"
      | "setMarketPair"
      | "setMaxBuyLimit"
      | "setMaxSellLimit"
      | "setMaxWalletLimit"
      | "setTax"
      | "setTokensForSwap"
      | "swapPair"
      | "swapRouter"
      | "symbol"
      | "taxWallet"
      | "tokensForSwap"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferTax"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BURN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_updateDevWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_updatetaxWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "activationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedBots",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "buyTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeCooldownEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLimitsEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTransferTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStuckTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromLimits",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromLimits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketPairs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBuyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBlacklistedBots",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPair",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBuyLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSellLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTax",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokensForSwap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "swapPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTax",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updateDevWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updatetaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedBots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeCooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLimitsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTransferTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearStuckTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklistedBots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSellLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokensForSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTax",
    data: BytesLike
  ): Result;

  events: {
    "Activation(bool)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BotStatusUpdated(address,bool)": EventFragment;
    "BuyTaxUpdated(uint256,uint256)": EventFragment;
    "CooldownStatusChanged(bool)": EventFragment;
    "DevWalletUpdated(address,address)": EventFragment;
    "ExcludedFromFees(address,bool)": EventFragment;
    "ExcludedFromLimits(address,bool)": EventFragment;
    "FeesStatusChanged(bool)": EventFragment;
    "LimitsStatusChanged(bool)": EventFragment;
    "MarketPairStatusUpdated(address,bool)": EventFragment;
    "MaxBuyLimitUpdated(uint256)": EventFragment;
    "MaxSellLimitUpdated(uint256)": EventFragment;
    "MaxWalletLimitUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SellTaxUpdated(uint256,uint256)": EventFragment;
    "StuckTokensWithdrawn(address,uint256)": EventFragment;
    "TokensForSwapUpdated(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferTaxUpdated(uint256,uint256)": EventFragment;
    "taxWalletUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BotStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyTaxUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludedFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludedFromLimits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitsStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketPairStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBuyLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSellLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxWalletLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellTaxUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StuckTokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensForSwapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTaxUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "taxWalletUpdated"): EventFragment;
}

export interface ActivationEventObject {
  status: boolean;
}
export type ActivationEvent = TypedEvent<[boolean], ActivationEventObject>;

export type ActivationEventFilter = TypedEventFilter<ActivationEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BotStatusUpdatedEventObject {
  account: string;
  isBlacklisted: boolean;
}
export type BotStatusUpdatedEvent = TypedEvent<
  [string, boolean],
  BotStatusUpdatedEventObject
>;

export type BotStatusUpdatedEventFilter =
  TypedEventFilter<BotStatusUpdatedEvent>;

export interface BuyTaxUpdatedEventObject {
  newValue: BigNumber;
  oldValue: BigNumber;
}
export type BuyTaxUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BuyTaxUpdatedEventObject
>;

export type BuyTaxUpdatedEventFilter = TypedEventFilter<BuyTaxUpdatedEvent>;

export interface CooldownStatusChangedEventObject {
  status: boolean;
}
export type CooldownStatusChangedEvent = TypedEvent<
  [boolean],
  CooldownStatusChangedEventObject
>;

export type CooldownStatusChangedEventFilter =
  TypedEventFilter<CooldownStatusChangedEvent>;

export interface DevWalletUpdatedEventObject {
  newWallet: string;
  oldWallet: string;
}
export type DevWalletUpdatedEvent = TypedEvent<
  [string, string],
  DevWalletUpdatedEventObject
>;

export type DevWalletUpdatedEventFilter =
  TypedEventFilter<DevWalletUpdatedEvent>;

export interface ExcludedFromFeesEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludedFromFeesEvent = TypedEvent<
  [string, boolean],
  ExcludedFromFeesEventObject
>;

export type ExcludedFromFeesEventFilter =
  TypedEventFilter<ExcludedFromFeesEvent>;

export interface ExcludedFromLimitsEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludedFromLimitsEvent = TypedEvent<
  [string, boolean],
  ExcludedFromLimitsEventObject
>;

export type ExcludedFromLimitsEventFilter =
  TypedEventFilter<ExcludedFromLimitsEvent>;

export interface FeesStatusChangedEventObject {
  status: boolean;
}
export type FeesStatusChangedEvent = TypedEvent<
  [boolean],
  FeesStatusChangedEventObject
>;

export type FeesStatusChangedEventFilter =
  TypedEventFilter<FeesStatusChangedEvent>;

export interface LimitsStatusChangedEventObject {
  status: boolean;
}
export type LimitsStatusChangedEvent = TypedEvent<
  [boolean],
  LimitsStatusChangedEventObject
>;

export type LimitsStatusChangedEventFilter =
  TypedEventFilter<LimitsStatusChangedEvent>;

export interface MarketPairStatusUpdatedEventObject {
  pair: string;
  value: boolean;
}
export type MarketPairStatusUpdatedEvent = TypedEvent<
  [string, boolean],
  MarketPairStatusUpdatedEventObject
>;

export type MarketPairStatusUpdatedEventFilter =
  TypedEventFilter<MarketPairStatusUpdatedEvent>;

export interface MaxBuyLimitUpdatedEventObject {
  amount: BigNumber;
}
export type MaxBuyLimitUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxBuyLimitUpdatedEventObject
>;

export type MaxBuyLimitUpdatedEventFilter =
  TypedEventFilter<MaxBuyLimitUpdatedEvent>;

export interface MaxSellLimitUpdatedEventObject {
  amount: BigNumber;
}
export type MaxSellLimitUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxSellLimitUpdatedEventObject
>;

export type MaxSellLimitUpdatedEventFilter =
  TypedEventFilter<MaxSellLimitUpdatedEvent>;

export interface MaxWalletLimitUpdatedEventObject {
  amount: BigNumber;
}
export type MaxWalletLimitUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxWalletLimitUpdatedEventObject
>;

export type MaxWalletLimitUpdatedEventFilter =
  TypedEventFilter<MaxWalletLimitUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SellTaxUpdatedEventObject {
  newValue: BigNumber;
  oldValue: BigNumber;
}
export type SellTaxUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SellTaxUpdatedEventObject
>;

export type SellTaxUpdatedEventFilter = TypedEventFilter<SellTaxUpdatedEvent>;

export interface StuckTokensWithdrawnEventObject {
  token: string;
  amount: BigNumber;
}
export type StuckTokensWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  StuckTokensWithdrawnEventObject
>;

export type StuckTokensWithdrawnEventFilter =
  TypedEventFilter<StuckTokensWithdrawnEvent>;

export interface TokensForSwapUpdatedEventObject {
  newValue: BigNumber;
  oldValue: BigNumber;
}
export type TokensForSwapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TokensForSwapUpdatedEventObject
>;

export type TokensForSwapUpdatedEventFilter =
  TypedEventFilter<TokensForSwapUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferTaxUpdatedEventObject {
  newValue: BigNumber;
  oldValue: BigNumber;
}
export type TransferTaxUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TransferTaxUpdatedEventObject
>;

export type TransferTaxUpdatedEventFilter =
  TypedEventFilter<TransferTaxUpdatedEvent>;

export interface taxWalletUpdatedEventObject {
  newWallet: string;
  oldWallet: string;
}
export type taxWalletUpdatedEvent = TypedEvent<
  [string, string],
  taxWalletUpdatedEventObject
>;

export type taxWalletUpdatedEventFilter =
  TypedEventFilter<taxWalletUpdatedEvent>;

export interface BundTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BundTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BURN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    _updateDevWallet(
      _devWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _updatetaxWallet(
      _taxWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    activationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blacklistedBots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    buyTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeCooldownEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeLimitsEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTransferTax(
      _transferTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearStuckTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cooldownEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    devWallet(overrides?: CallOverrides): Promise<[string]>;

    enableTrading(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromLimits(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludedFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    excludedFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    feesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isActivated(overrides?: CallOverrides): Promise<[boolean]>;

    limitsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    marketPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxBuyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSellLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWalletLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBlacklistedBots(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeesEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxBuyLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSellLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxWalletLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTax(
      _buyTax: PromiseOrValue<BigNumberish>,
      _sellTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokensForSwap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapPair(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    taxWallet(overrides?: CallOverrides): Promise<[string]>;

    tokensForSwap(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTax(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BURN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

  _updateDevWallet(
    _devWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _updatetaxWallet(
    _taxWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  activationTime(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklistedBots(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  buyTax(overrides?: CallOverrides): Promise<BigNumber>;

  changeCooldownEnabled(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeLimitsEnabled(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTransferTax(
    _transferTax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearStuckTokens(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cooldownEnabled(overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  devWallet(overrides?: CallOverrides): Promise<string>;

  enableTrading(
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    accounts: PromiseOrValue<string>[],
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromLimits(
    accounts: PromiseOrValue<string>[],
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludedFromFees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  excludedFromLimits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  feesEnabled(overrides?: CallOverrides): Promise<boolean>;

  isActivated(overrides?: CallOverrides): Promise<boolean>;

  limitsEnabled(overrides?: CallOverrides): Promise<boolean>;

  marketPairs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxBuyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  maxSellLimit(overrides?: CallOverrides): Promise<BigNumber>;

  maxWalletLimit(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellTax(overrides?: CallOverrides): Promise<BigNumber>;

  setBlacklistedBots(
    accounts: PromiseOrValue<string>[],
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeesEnabled(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketPair(
    pair: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxBuyLimit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSellLimit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxWalletLimit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTax(
    _buyTax: PromiseOrValue<BigNumberish>,
    _sellTax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokensForSwap(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapPair(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  taxWallet(overrides?: CallOverrides): Promise<string>;

  tokensForSwap(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTax(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BURN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

    _updateDevWallet(
      _devWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _updatetaxWallet(
      _taxWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    activationTime(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistedBots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyTax(overrides?: CallOverrides): Promise<BigNumber>;

    changeCooldownEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLimitsEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTransferTax(
      _transferTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearStuckTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldownEnabled(overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    devWallet(overrides?: CallOverrides): Promise<string>;

    enableTrading(
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromFees(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromLimits(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludedFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    excludedFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feesEnabled(overrides?: CallOverrides): Promise<boolean>;

    isActivated(overrides?: CallOverrides): Promise<boolean>;

    limitsEnabled(overrides?: CallOverrides): Promise<boolean>;

    marketPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxBuyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellLimit(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletLimit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellTax(overrides?: CallOverrides): Promise<BigNumber>;

    setBlacklistedBots(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBuyLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSellLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWalletLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTax(
      _buyTax: PromiseOrValue<BigNumberish>,
      _sellTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokensForSwap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapPair(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    taxWallet(overrides?: CallOverrides): Promise<string>;

    tokensForSwap(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTax(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Activation(bool)"(status?: null): ActivationEventFilter;
    Activation(status?: null): ActivationEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "BotStatusUpdated(address,bool)"(
      account?: null,
      isBlacklisted?: null
    ): BotStatusUpdatedEventFilter;
    BotStatusUpdated(
      account?: null,
      isBlacklisted?: null
    ): BotStatusUpdatedEventFilter;

    "BuyTaxUpdated(uint256,uint256)"(
      newValue?: null,
      oldValue?: null
    ): BuyTaxUpdatedEventFilter;
    BuyTaxUpdated(newValue?: null, oldValue?: null): BuyTaxUpdatedEventFilter;

    "CooldownStatusChanged(bool)"(
      status?: null
    ): CooldownStatusChangedEventFilter;
    CooldownStatusChanged(status?: null): CooldownStatusChangedEventFilter;

    "DevWalletUpdated(address,address)"(
      newWallet?: null,
      oldWallet?: null
    ): DevWalletUpdatedEventFilter;
    DevWalletUpdated(
      newWallet?: null,
      oldWallet?: null
    ): DevWalletUpdatedEventFilter;

    "ExcludedFromFees(address,bool)"(
      account?: null,
      isExcluded?: null
    ): ExcludedFromFeesEventFilter;
    ExcludedFromFees(
      account?: null,
      isExcluded?: null
    ): ExcludedFromFeesEventFilter;

    "ExcludedFromLimits(address,bool)"(
      account?: null,
      isExcluded?: null
    ): ExcludedFromLimitsEventFilter;
    ExcludedFromLimits(
      account?: null,
      isExcluded?: null
    ): ExcludedFromLimitsEventFilter;

    "FeesStatusChanged(bool)"(status?: null): FeesStatusChangedEventFilter;
    FeesStatusChanged(status?: null): FeesStatusChangedEventFilter;

    "LimitsStatusChanged(bool)"(status?: null): LimitsStatusChangedEventFilter;
    LimitsStatusChanged(status?: null): LimitsStatusChangedEventFilter;

    "MarketPairStatusUpdated(address,bool)"(
      pair?: null,
      value?: null
    ): MarketPairStatusUpdatedEventFilter;
    MarketPairStatusUpdated(
      pair?: null,
      value?: null
    ): MarketPairStatusUpdatedEventFilter;

    "MaxBuyLimitUpdated(uint256)"(amount?: null): MaxBuyLimitUpdatedEventFilter;
    MaxBuyLimitUpdated(amount?: null): MaxBuyLimitUpdatedEventFilter;

    "MaxSellLimitUpdated(uint256)"(
      amount?: null
    ): MaxSellLimitUpdatedEventFilter;
    MaxSellLimitUpdated(amount?: null): MaxSellLimitUpdatedEventFilter;

    "MaxWalletLimitUpdated(uint256)"(
      amount?: null
    ): MaxWalletLimitUpdatedEventFilter;
    MaxWalletLimitUpdated(amount?: null): MaxWalletLimitUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SellTaxUpdated(uint256,uint256)"(
      newValue?: null,
      oldValue?: null
    ): SellTaxUpdatedEventFilter;
    SellTaxUpdated(newValue?: null, oldValue?: null): SellTaxUpdatedEventFilter;

    "StuckTokensWithdrawn(address,uint256)"(
      token?: null,
      amount?: null
    ): StuckTokensWithdrawnEventFilter;
    StuckTokensWithdrawn(
      token?: null,
      amount?: null
    ): StuckTokensWithdrawnEventFilter;

    "TokensForSwapUpdated(uint256,uint256)"(
      newValue?: null,
      oldValue?: null
    ): TokensForSwapUpdatedEventFilter;
    TokensForSwapUpdated(
      newValue?: null,
      oldValue?: null
    ): TokensForSwapUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "TransferTaxUpdated(uint256,uint256)"(
      newValue?: null,
      oldValue?: null
    ): TransferTaxUpdatedEventFilter;
    TransferTaxUpdated(
      newValue?: null,
      oldValue?: null
    ): TransferTaxUpdatedEventFilter;

    "taxWalletUpdated(address,address)"(
      newWallet?: null,
      oldWallet?: null
    ): taxWalletUpdatedEventFilter;
    taxWalletUpdated(
      newWallet?: null,
      oldWallet?: null
    ): taxWalletUpdatedEventFilter;
  };

  estimateGas: {
    BURN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    _updateDevWallet(
      _devWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _updatetaxWallet(
      _taxWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    activationTime(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistedBots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTax(overrides?: CallOverrides): Promise<BigNumber>;

    changeCooldownEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeLimitsEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTransferTax(
      _transferTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearStuckTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cooldownEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    devWallet(overrides?: CallOverrides): Promise<BigNumber>;

    enableTrading(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromFees(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromLimits(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludedFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excludedFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isActivated(overrides?: CallOverrides): Promise<BigNumber>;

    limitsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    marketPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBuyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellLimit(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletLimit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellTax(overrides?: CallOverrides): Promise<BigNumber>;

    setBlacklistedBots(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeesEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxBuyLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSellLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxWalletLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTax(
      _buyTax: PromiseOrValue<BigNumberish>,
      _sellTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokensForSwap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapPair(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    taxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForSwap(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTax(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BURN_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _updateDevWallet(
      _devWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _updatetaxWallet(
      _taxWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistedBots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeCooldownEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeLimitsEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTransferTax(
      _transferTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearStuckTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cooldownEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableTrading(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromLimits(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludedFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludedFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActivated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBuyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSellLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWalletLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBlacklistedBots(
      accounts: PromiseOrValue<string>[],
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeesEnabled(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBuyLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSellLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWalletLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTax(
      _buyTax: PromiseOrValue<BigNumberish>,
      _sellTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokensForSwap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
