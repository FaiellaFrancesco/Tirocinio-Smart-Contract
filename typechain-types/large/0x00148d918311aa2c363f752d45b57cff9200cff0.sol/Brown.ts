/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BrownInterface extends utils.Interface {
  functions: {
    "addressRead(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blAdd(address,bool)": FunctionFragment;
    "blPerm(bool)": FunctionFragment;
    "blSetMlt(address[],bool)": FunctionFragment;
    "blToggle(bool)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dexPair()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "limitsRead()": FunctionFragment;
    "maxTxLimitSet(uint256)": FunctionFragment;
    "maxWalletLimitSet(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "openTrading()": FunctionFragment;
    "owner()": FunctionFragment;
    "receiversRead()": FunctionFragment;
    "removeLimits()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAnti(bool)": FunctionFragment;
    "swapbackRead()": FunctionFragment;
    "swapbackSet(bool,uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "taxesBuySet(uint256,uint256)": FunctionFragment;
    "taxesRcvMarketingSet(address)": FunctionFragment;
    "taxesRead()": FunctionFragment;
    "taxesReceiverDevSet(address)": FunctionFragment;
    "taxesSellSet(uint256,uint256)": FunctionFragment;
    "taxesTransferSet(uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingEnabled()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTaxRead()": FunctionFragment;
    "wlLimit(address,bool)": FunctionFragment;
    "wlTaxes(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressRead"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blAdd"
      | "blPerm"
      | "blSetMlt"
      | "blToggle"
      | "decimals"
      | "decreaseAllowance"
      | "dexPair"
      | "increaseAllowance"
      | "limitsRead"
      | "maxTxLimitSet"
      | "maxWalletLimitSet"
      | "name"
      | "openTrading"
      | "owner"
      | "receiversRead"
      | "removeLimits"
      | "renounceOwnership"
      | "setAnti"
      | "swapbackRead"
      | "swapbackSet"
      | "symbol"
      | "taxesBuySet"
      | "taxesRcvMarketingSet"
      | "taxesRead"
      | "taxesReceiverDevSet"
      | "taxesSellSet"
      | "taxesTransferSet"
      | "totalSupply"
      | "tradingEnabled"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferTaxRead"
      | "wlLimit"
      | "wlTaxes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressRead",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "blPerm",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "blSetMlt",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "blToggle",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dexPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxLimitSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletLimitSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiversRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnti",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapbackRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapbackSet",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxesBuySet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxesRcvMarketingSet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "taxesRead", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxesReceiverDevSet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxesSellSet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxesTransferSet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTaxRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wlLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "wlTaxes",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blPerm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blSetMlt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blToggle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limitsRead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTxLimitSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletLimitSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiversRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAnti", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapbackRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapbackSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxesBuySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxesRcvMarketingSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxesRead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxesReceiverDevSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxesSellSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxesTransferSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTaxRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wlLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wlTaxes", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BuyFeeUpdated(uint256,uint256,uint256)": EventFragment;
    "DisabledTransferDelay(uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "ExcludeFromLimits(address,bool)": EventFragment;
    "LimitsRemoved(uint256)": EventFragment;
    "MarketingWalletUpdated(address,address)": EventFragment;
    "MaxTxUpdated(uint256)": EventFragment;
    "MaxWalletUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectWalletUpdated(address,address)": EventFragment;
    "SellFeeUpdated(uint256,uint256,uint256)": EventFragment;
    "SetDexPair(address,bool)": EventFragment;
    "SwapbackSettingsUpdated(bool,uint256,uint256)": EventFragment;
    "TradingEnabled(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledTransferDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromLimits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitsRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketingWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTxUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDexPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapbackSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BuyFeeUpdatedEventObject {
  buyTaxTotal: BigNumber;
  buyMarketingTax: BigNumber;
  buyProjectTax: BigNumber;
}
export type BuyFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BuyFeeUpdatedEventObject
>;

export type BuyFeeUpdatedEventFilter = TypedEventFilter<BuyFeeUpdatedEvent>;

export interface DisabledTransferDelayEventObject {
  timestamp: BigNumber;
}
export type DisabledTransferDelayEvent = TypedEvent<
  [BigNumber],
  DisabledTransferDelayEventObject
>;

export type DisabledTransferDelayEventFilter =
  TypedEventFilter<DisabledTransferDelayEvent>;

export interface ExcludeFromFeesEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean],
  ExcludeFromFeesEventObject
>;

export type ExcludeFromFeesEventFilter = TypedEventFilter<ExcludeFromFeesEvent>;

export interface ExcludeFromLimitsEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludeFromLimitsEvent = TypedEvent<
  [string, boolean],
  ExcludeFromLimitsEventObject
>;

export type ExcludeFromLimitsEventFilter =
  TypedEventFilter<ExcludeFromLimitsEvent>;

export interface LimitsRemovedEventObject {
  timestamp: BigNumber;
}
export type LimitsRemovedEvent = TypedEvent<
  [BigNumber],
  LimitsRemovedEventObject
>;

export type LimitsRemovedEventFilter = TypedEventFilter<LimitsRemovedEvent>;

export interface MarketingWalletUpdatedEventObject {
  newWallet: string;
  oldWallet: string;
}
export type MarketingWalletUpdatedEvent = TypedEvent<
  [string, string],
  MarketingWalletUpdatedEventObject
>;

export type MarketingWalletUpdatedEventFilter =
  TypedEventFilter<MarketingWalletUpdatedEvent>;

export interface MaxTxUpdatedEventObject {
  maxTx: BigNumber;
}
export type MaxTxUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxTxUpdatedEventObject
>;

export type MaxTxUpdatedEventFilter = TypedEventFilter<MaxTxUpdatedEvent>;

export interface MaxWalletUpdatedEventObject {
  maxWallet: BigNumber;
}
export type MaxWalletUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxWalletUpdatedEventObject
>;

export type MaxWalletUpdatedEventFilter =
  TypedEventFilter<MaxWalletUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProjectWalletUpdatedEventObject {
  newWallet: string;
  oldWallet: string;
}
export type ProjectWalletUpdatedEvent = TypedEvent<
  [string, string],
  ProjectWalletUpdatedEventObject
>;

export type ProjectWalletUpdatedEventFilter =
  TypedEventFilter<ProjectWalletUpdatedEvent>;

export interface SellFeeUpdatedEventObject {
  sellTaxTotal: BigNumber;
  sellMarketingTax: BigNumber;
  sellProjectTax: BigNumber;
}
export type SellFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SellFeeUpdatedEventObject
>;

export type SellFeeUpdatedEventFilter = TypedEventFilter<SellFeeUpdatedEvent>;

export interface SetDexPairEventObject {
  pair: string;
  value: boolean;
}
export type SetDexPairEvent = TypedEvent<
  [string, boolean],
  SetDexPairEventObject
>;

export type SetDexPairEventFilter = TypedEventFilter<SetDexPairEvent>;

export interface SwapbackSettingsUpdatedEventObject {
  enabled: boolean;
  swapBackValueMin: BigNumber;
  swapBackValueMax: BigNumber;
}
export type SwapbackSettingsUpdatedEvent = TypedEvent<
  [boolean, BigNumber, BigNumber],
  SwapbackSettingsUpdatedEventObject
>;

export type SwapbackSettingsUpdatedEventFilter =
  TypedEventFilter<SwapbackSettingsUpdatedEvent>;

export interface TradingEnabledEventObject {
  timestamp: BigNumber;
}
export type TradingEnabledEvent = TypedEvent<
  [BigNumber],
  TradingEnabledEventObject
>;

export type TradingEnabledEventFilter = TypedEventFilter<TradingEnabledEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateUniswapV2RouterEventObject {
  newAddress: string;
  oldAddress: string;
}
export type UpdateUniswapV2RouterEvent = TypedEvent<
  [string, string],
  UpdateUniswapV2RouterEventObject
>;

export type UpdateUniswapV2RouterEventFilter =
  TypedEventFilter<UpdateUniswapV2RouterEvent>;

export interface Brown extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BrownInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressRead(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        _transferTaxExempt: boolean;
        _transferLimitExempt: boolean;
        _automatedMarketMakerPairs: boolean;
      }
    >;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blAdd(
      adr: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blPerm(
      _canChange: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blSetMlt(
      addresses: PromiseOrValue<string>[],
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blToggle(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dexPair(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    limitsRead(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _limitsEnabled: boolean;
        _maxWallet: BigNumber;
        _maxTx: BigNumber;
      }
    >;

    maxTxLimitSet(
      newMaxTxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxWalletLimitSet(
      newMaxWalletLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    openTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    receiversRead(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { _marketingWallet: string; _projectWallet: string }
    >;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAnti(
      _anti: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapbackRead(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _swapbackEnabled: boolean;
        _swapBackValueMin: BigNumber;
        _swapBackValueMax: BigNumber;
      }
    >;

    swapbackSet(
      _enable: PromiseOrValue<boolean>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    taxesBuySet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxesRcvMarketingSet(
      newMktWal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxesRead(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _buyTaxTotal: BigNumber;
        _buyMarketingTax: BigNumber;
        _buyProjectTax: BigNumber;
        _sellTaxTotal: BigNumber;
        _sellMarketingTax: BigNumber;
        _sellProjectTax: BigNumber;
      }
    >;

    taxesReceiverDevSet(
      newDevWal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxesSellSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxesTransferSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTaxRead(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _transferTaxTotal: BigNumber;
        _transferMarketingTax: BigNumber;
        _transferProjectTax: BigNumber;
      }
    >;

    wlLimit(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wlTaxes(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressRead(
    _target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean] & {
      _transferTaxExempt: boolean;
      _transferLimitExempt: boolean;
      _automatedMarketMakerPairs: boolean;
    }
  >;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blAdd(
    adr: PromiseOrValue<string>,
    _isBlacklisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blPerm(
    _canChange: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blSetMlt(
    addresses: PromiseOrValue<string>[],
    _isBlacklisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blToggle(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dexPair(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  limitsRead(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      _limitsEnabled: boolean;
      _maxWallet: BigNumber;
      _maxTx: BigNumber;
    }
  >;

  maxTxLimitSet(
    newMaxTxLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxWalletLimitSet(
    newMaxWalletLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  openTrading(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  receiversRead(
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { _marketingWallet: string; _projectWallet: string }
  >;

  removeLimits(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAnti(
    _anti: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapbackRead(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      _swapbackEnabled: boolean;
      _swapBackValueMin: BigNumber;
      _swapBackValueMax: BigNumber;
    }
  >;

  swapbackSet(
    _enable: PromiseOrValue<boolean>,
    _min: PromiseOrValue<BigNumberish>,
    _max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  taxesBuySet(
    _marketingFee: PromiseOrValue<BigNumberish>,
    _devFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxesRcvMarketingSet(
    newMktWal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxesRead(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _buyTaxTotal: BigNumber;
      _buyMarketingTax: BigNumber;
      _buyProjectTax: BigNumber;
      _sellTaxTotal: BigNumber;
      _sellMarketingTax: BigNumber;
      _sellProjectTax: BigNumber;
    }
  >;

  taxesReceiverDevSet(
    newDevWal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxesSellSet(
    _marketingFee: PromiseOrValue<BigNumberish>,
    _devFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxesTransferSet(
    _marketingFee: PromiseOrValue<BigNumberish>,
    _devFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingEnabled(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTaxRead(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _transferTaxTotal: BigNumber;
      _transferMarketingTax: BigNumber;
      _transferProjectTax: BigNumber;
    }
  >;

  wlLimit(
    updAds: PromiseOrValue<string>,
    isEx: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wlTaxes(
    account: PromiseOrValue<string>,
    excluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressRead(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        _transferTaxExempt: boolean;
        _transferLimitExempt: boolean;
        _automatedMarketMakerPairs: boolean;
      }
    >;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blAdd(
      adr: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    blPerm(
      _canChange: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    blSetMlt(
      addresses: PromiseOrValue<string>[],
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    blToggle(
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dexPair(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitsRead(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _limitsEnabled: boolean;
        _maxWallet: BigNumber;
        _maxTx: BigNumber;
      }
    >;

    maxTxLimitSet(
      newMaxTxLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxWalletLimitSet(
      newMaxWalletLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    openTrading(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    receiversRead(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { _marketingWallet: string; _projectWallet: string }
    >;

    removeLimits(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAnti(
      _anti: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapbackRead(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _swapbackEnabled: boolean;
        _swapBackValueMin: BigNumber;
        _swapBackValueMax: BigNumber;
      }
    >;

    swapbackSet(
      _enable: PromiseOrValue<boolean>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    taxesBuySet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    taxesRcvMarketingSet(
      newMktWal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    taxesRead(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _buyTaxTotal: BigNumber;
        _buyMarketingTax: BigNumber;
        _buyProjectTax: BigNumber;
        _sellTaxTotal: BigNumber;
        _sellMarketingTax: BigNumber;
        _sellProjectTax: BigNumber;
      }
    >;

    taxesReceiverDevSet(
      newDevWal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    taxesSellSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    taxesTransferSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabled(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTaxRead(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _transferTaxTotal: BigNumber;
        _transferMarketingTax: BigNumber;
        _transferProjectTax: BigNumber;
      }
    >;

    wlLimit(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    wlTaxes(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "BuyFeeUpdated(uint256,uint256,uint256)"(
      buyTaxTotal?: null,
      buyMarketingTax?: null,
      buyProjectTax?: null
    ): BuyFeeUpdatedEventFilter;
    BuyFeeUpdated(
      buyTaxTotal?: null,
      buyMarketingTax?: null,
      buyProjectTax?: null
    ): BuyFeeUpdatedEventFilter;

    "DisabledTransferDelay(uint256)"(
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): DisabledTransferDelayEventFilter;
    DisabledTransferDelay(
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): DisabledTransferDelayEventFilter;

    "ExcludeFromFees(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;
    ExcludeFromFees(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;

    "ExcludeFromLimits(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromLimitsEventFilter;
    ExcludeFromLimits(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromLimitsEventFilter;

    "LimitsRemoved(uint256)"(
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): LimitsRemovedEventFilter;
    LimitsRemoved(
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): LimitsRemovedEventFilter;

    "MarketingWalletUpdated(address,address)"(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): MarketingWalletUpdatedEventFilter;
    MarketingWalletUpdated(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): MarketingWalletUpdatedEventFilter;

    "MaxTxUpdated(uint256)"(maxTx?: null): MaxTxUpdatedEventFilter;
    MaxTxUpdated(maxTx?: null): MaxTxUpdatedEventFilter;

    "MaxWalletUpdated(uint256)"(maxWallet?: null): MaxWalletUpdatedEventFilter;
    MaxWalletUpdated(maxWallet?: null): MaxWalletUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProjectWalletUpdated(address,address)"(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): ProjectWalletUpdatedEventFilter;
    ProjectWalletUpdated(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): ProjectWalletUpdatedEventFilter;

    "SellFeeUpdated(uint256,uint256,uint256)"(
      sellTaxTotal?: null,
      sellMarketingTax?: null,
      sellProjectTax?: null
    ): SellFeeUpdatedEventFilter;
    SellFeeUpdated(
      sellTaxTotal?: null,
      sellMarketingTax?: null,
      sellProjectTax?: null
    ): SellFeeUpdatedEventFilter;

    "SetDexPair(address,bool)"(
      pair?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<boolean> | null
    ): SetDexPairEventFilter;
    SetDexPair(
      pair?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<boolean> | null
    ): SetDexPairEventFilter;

    "SwapbackSettingsUpdated(bool,uint256,uint256)"(
      enabled?: null,
      swapBackValueMin?: null,
      swapBackValueMax?: null
    ): SwapbackSettingsUpdatedEventFilter;
    SwapbackSettingsUpdated(
      enabled?: null,
      swapBackValueMin?: null,
      swapBackValueMax?: null
    ): SwapbackSettingsUpdatedEventFilter;

    "TradingEnabled(uint256)"(
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): TradingEnabledEventFilter;
    TradingEnabled(
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): TradingEnabledEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "UpdateUniswapV2Router(address,address)"(
      newAddress?: PromiseOrValue<string> | null,
      oldAddress?: PromiseOrValue<string> | null
    ): UpdateUniswapV2RouterEventFilter;
    UpdateUniswapV2Router(
      newAddress?: PromiseOrValue<string> | null,
      oldAddress?: PromiseOrValue<string> | null
    ): UpdateUniswapV2RouterEventFilter;
  };

  estimateGas: {
    addressRead(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blAdd(
      adr: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blPerm(
      _canChange: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blSetMlt(
      addresses: PromiseOrValue<string>[],
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blToggle(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dexPair(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    limitsRead(overrides?: CallOverrides): Promise<BigNumber>;

    maxTxLimitSet(
      newMaxTxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxWalletLimitSet(
      newMaxWalletLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    receiversRead(overrides?: CallOverrides): Promise<BigNumber>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAnti(
      _anti: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapbackRead(overrides?: CallOverrides): Promise<BigNumber>;

    swapbackSet(
      _enable: PromiseOrValue<boolean>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    taxesBuySet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxesRcvMarketingSet(
      newMktWal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxesRead(overrides?: CallOverrides): Promise<BigNumber>;

    taxesReceiverDevSet(
      newDevWal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxesSellSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxesTransferSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTaxRead(overrides?: CallOverrides): Promise<BigNumber>;

    wlLimit(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wlTaxes(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressRead(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blAdd(
      adr: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blPerm(
      _canChange: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blSetMlt(
      addresses: PromiseOrValue<string>[],
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blToggle(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dexPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    limitsRead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTxLimitSet(
      newMaxTxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxWalletLimitSet(
      newMaxWalletLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiversRead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAnti(
      _anti: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapbackRead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapbackSet(
      _enable: PromiseOrValue<boolean>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxesBuySet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxesRcvMarketingSet(
      newMktWal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxesRead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxesReceiverDevSet(
      newDevWal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxesSellSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxesTransferSet(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTaxRead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wlLimit(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wlTaxes(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
