/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HYPEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_isExcludedMaxTransactionAmount"
      | "airdropToWallets"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "bot"
      | "botsCaught"
      | "buyLiquidityFee"
      | "buyOperationsFee"
      | "buyTotalFees"
      | "decimals"
      | "decreaseAllowance"
      | "dexRouter"
      | "disableTransferDelay"
      | "enableTrading"
      | "excludeFromFees"
      | "excludeFromMaxTransaction"
      | "forceSwapBack"
      | "increaseAllowance"
      | "limitsInEffect"
      | "lpPair"
      | "manageBoughtEarly"
      | "massManageBoughtEarly"
      | "maxBuyAmount"
      | "maxSellAmount"
      | "maxWalletAmount"
      | "name"
      | "owner"
      | "removeLimits"
      | "renounceOwnership"
      | "sellLiquidityFee"
      | "sellOperationsFee"
      | "sellTotalFees"
      | "setAutomatedMarketMakerPair"
      | "setOperationsAddress"
      | "swapEnabled"
      | "swapTokensAtAmount"
      | "symbol"
      | "tokensForLiquidity"
      | "tokensForOperations"
      | "totalSupply"
      | "tradingActive"
      | "tradingActiveBlock"
      | "transfer"
      | "transferDelayEnabled"
      | "transferForeignToken"
      | "transferFrom"
      | "transferOwnership"
      | "updateBuyFees"
      | "updateMaxBuyAmount"
      | "updateMaxSellAmount"
      | "updateMaxWalletAmount"
      | "updateSellFees"
      | "updateSwapTokensAtAmount"
      | "withdrawStuckETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BuyBackTriggered"
      | "CaughtEarlyBuyer"
      | "EnabledTrading"
      | "ExcludeFromFees"
      | "MaxTransactionExclusion"
      | "OwnerForcedSwapBack"
      | "OwnershipTransferred"
      | "RemovedLimits"
      | "SetAutomatedMarketMakerPair"
      | "SwapAndLiquify"
      | "Transfer"
      | "TransferForeignToken"
      | "UpdatedMaxBuyAmount"
      | "UpdatedMaxSellAmount"
      | "UpdatedMaxWalletAmount"
      | "UpdatedOperationsAddress"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropToWallets",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bot", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "botsCaught",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyOperationsFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableTransferDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "forceSwapBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInEffect",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manageBoughtEarly",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "massManageBoughtEarly",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBuyAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOperationsFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationsAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActiveBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDelayEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferForeignToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxBuyAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSellAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWalletAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapTokensAtAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStuckETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropToWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "botsCaught", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyOperationsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableTransferDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceSwapBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageBoughtEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massManageBoughtEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellOperationsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActiveBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferForeignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStuckETH",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyBackTriggeredEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CaughtEarlyBuyerEvent {
  export type InputTuple = [sniper: AddressLike];
  export type OutputTuple = [sniper: string];
  export interface OutputObject {
    sniper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnabledTradingEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromFeesEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTransactionExclusionEvent {
  export type InputTuple = [_address: AddressLike, excluded: boolean];
  export type OutputTuple = [_address: string, excluded: boolean];
  export interface OutputObject {
    _address: string;
    excluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerForcedSwapBackEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedLimitsEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAutomatedMarketMakerPairEvent {
  export type InputTuple = [pair: AddressLike, value: boolean];
  export type OutputTuple = [pair: string, value: boolean];
  export interface OutputObject {
    pair: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEvent {
  export type InputTuple = [
    tokensSwapped: BigNumberish,
    ethReceived: BigNumberish,
    tokensIntoLiquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokensSwapped: bigint,
    ethReceived: bigint,
    tokensIntoLiquidity: bigint
  ];
  export interface OutputObject {
    tokensSwapped: bigint;
    ethReceived: bigint;
    tokensIntoLiquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferForeignTokenEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedMaxBuyAmountEvent {
  export type InputTuple = [newAmount: BigNumberish];
  export type OutputTuple = [newAmount: bigint];
  export interface OutputObject {
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedMaxSellAmountEvent {
  export type InputTuple = [newAmount: BigNumberish];
  export type OutputTuple = [newAmount: bigint];
  export interface OutputObject {
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedMaxWalletAmountEvent {
  export type InputTuple = [newAmount: BigNumberish];
  export type OutputTuple = [newAmount: bigint];
  export interface OutputObject {
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedOperationsAddressEvent {
  export type InputTuple = [newWallet: AddressLike];
  export type OutputTuple = [newWallet: string];
  export interface OutputObject {
    newWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HYPE extends BaseContract {
  connect(runner?: ContractRunner | null): HYPE;
  waitForDeployment(): Promise<this>;

  interface: HYPEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _isExcludedMaxTransactionAmount: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  airdropToWallets: TypedContractMethod<
    [wallets: AddressLike[], amountsInTokens: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  automatedMarketMakerPairs: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bot: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  botsCaught: TypedContractMethod<[], [bigint], "view">;

  buyLiquidityFee: TypedContractMethod<[], [bigint], "view">;

  buyOperationsFee: TypedContractMethod<[], [bigint], "view">;

  buyTotalFees: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  dexRouter: TypedContractMethod<[], [string], "view">;

  disableTransferDelay: TypedContractMethod<[], [void], "nonpayable">;

  enableTrading: TypedContractMethod<[], [void], "nonpayable">;

  excludeFromFees: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromMaxTransaction: TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;

  forceSwapBack: TypedContractMethod<[], [void], "nonpayable">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  limitsInEffect: TypedContractMethod<[], [boolean], "view">;

  lpPair: TypedContractMethod<[], [string], "view">;

  manageBoughtEarly: TypedContractMethod<
    [wallet: AddressLike, flag: boolean],
    [void],
    "nonpayable"
  >;

  massManageBoughtEarly: TypedContractMethod<
    [wallets: AddressLike[], flag: boolean],
    [void],
    "nonpayable"
  >;

  maxBuyAmount: TypedContractMethod<[], [bigint], "view">;

  maxSellAmount: TypedContractMethod<[], [bigint], "view">;

  maxWalletAmount: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeLimits: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellLiquidityFee: TypedContractMethod<[], [bigint], "view">;

  sellOperationsFee: TypedContractMethod<[], [bigint], "view">;

  sellTotalFees: TypedContractMethod<[], [bigint], "view">;

  setAutomatedMarketMakerPair: TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  setOperationsAddress: TypedContractMethod<
    [_operationsAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  swapEnabled: TypedContractMethod<[], [boolean], "view">;

  swapTokensAtAmount: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokensForLiquidity: TypedContractMethod<[], [bigint], "view">;

  tokensForOperations: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingActive: TypedContractMethod<[], [boolean], "view">;

  tradingActiveBlock: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferDelayEnabled: TypedContractMethod<[], [boolean], "view">;

  transferForeignToken: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBuyFees: TypedContractMethod<
    [_operationsFee: BigNumberish, _liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxBuyAmount: TypedContractMethod<
    [newNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxSellAmount: TypedContractMethod<
    [newNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxWalletAmount: TypedContractMethod<
    [newNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSellFees: TypedContractMethod<
    [_operationsFee: BigNumberish, _liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSwapTokensAtAmount: TypedContractMethod<
    [newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawStuckETH: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_isExcludedMaxTransactionAmount"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "airdropToWallets"
  ): TypedContractMethod<
    [wallets: AddressLike[], amountsInTokens: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "automatedMarketMakerPairs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bot"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "botsCaught"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyLiquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyOperationsFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTotalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dexRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disableTransferDelay"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFees"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeFromMaxTransaction"
  ): TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceSwapBack"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "limitsInEffect"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lpPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "manageBoughtEarly"
  ): TypedContractMethod<
    [wallet: AddressLike, flag: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "massManageBoughtEarly"
  ): TypedContractMethod<
    [wallets: AddressLike[], flag: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxBuyAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSellAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWalletAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLimits"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellLiquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellOperationsFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellTotalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAutomatedMarketMakerPair"
  ): TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperationsAddress"
  ): TypedContractMethod<
    [_operationsAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapTokensAtAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensForLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensForOperations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "tradingActiveBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferDelayEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferForeignToken"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBuyFees"
  ): TypedContractMethod<
    [_operationsFee: BigNumberish, _liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMaxBuyAmount"
  ): TypedContractMethod<[newNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxSellAmount"
  ): TypedContractMethod<[newNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxWalletAmount"
  ): TypedContractMethod<[newNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSellFees"
  ): TypedContractMethod<
    [_operationsFee: BigNumberish, _liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSwapTokensAtAmount"
  ): TypedContractMethod<[newAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawStuckETH"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BuyBackTriggered"
  ): TypedContractEvent<
    BuyBackTriggeredEvent.InputTuple,
    BuyBackTriggeredEvent.OutputTuple,
    BuyBackTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "CaughtEarlyBuyer"
  ): TypedContractEvent<
    CaughtEarlyBuyerEvent.InputTuple,
    CaughtEarlyBuyerEvent.OutputTuple,
    CaughtEarlyBuyerEvent.OutputObject
  >;
  getEvent(
    key: "EnabledTrading"
  ): TypedContractEvent<
    EnabledTradingEvent.InputTuple,
    EnabledTradingEvent.OutputTuple,
    EnabledTradingEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromFees"
  ): TypedContractEvent<
    ExcludeFromFeesEvent.InputTuple,
    ExcludeFromFeesEvent.OutputTuple,
    ExcludeFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "MaxTransactionExclusion"
  ): TypedContractEvent<
    MaxTransactionExclusionEvent.InputTuple,
    MaxTransactionExclusionEvent.OutputTuple,
    MaxTransactionExclusionEvent.OutputObject
  >;
  getEvent(
    key: "OwnerForcedSwapBack"
  ): TypedContractEvent<
    OwnerForcedSwapBackEvent.InputTuple,
    OwnerForcedSwapBackEvent.OutputTuple,
    OwnerForcedSwapBackEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemovedLimits"
  ): TypedContractEvent<
    RemovedLimitsEvent.InputTuple,
    RemovedLimitsEvent.OutputTuple,
    RemovedLimitsEvent.OutputObject
  >;
  getEvent(
    key: "SetAutomatedMarketMakerPair"
  ): TypedContractEvent<
    SetAutomatedMarketMakerPairEvent.InputTuple,
    SetAutomatedMarketMakerPairEvent.OutputTuple,
    SetAutomatedMarketMakerPairEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquify"
  ): TypedContractEvent<
    SwapAndLiquifyEvent.InputTuple,
    SwapAndLiquifyEvent.OutputTuple,
    SwapAndLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferForeignToken"
  ): TypedContractEvent<
    TransferForeignTokenEvent.InputTuple,
    TransferForeignTokenEvent.OutputTuple,
    TransferForeignTokenEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedMaxBuyAmount"
  ): TypedContractEvent<
    UpdatedMaxBuyAmountEvent.InputTuple,
    UpdatedMaxBuyAmountEvent.OutputTuple,
    UpdatedMaxBuyAmountEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedMaxSellAmount"
  ): TypedContractEvent<
    UpdatedMaxSellAmountEvent.InputTuple,
    UpdatedMaxSellAmountEvent.OutputTuple,
    UpdatedMaxSellAmountEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedMaxWalletAmount"
  ): TypedContractEvent<
    UpdatedMaxWalletAmountEvent.InputTuple,
    UpdatedMaxWalletAmountEvent.OutputTuple,
    UpdatedMaxWalletAmountEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedOperationsAddress"
  ): TypedContractEvent<
    UpdatedOperationsAddressEvent.InputTuple,
    UpdatedOperationsAddressEvent.OutputTuple,
    UpdatedOperationsAddressEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BuyBackTriggered(uint256)": TypedContractEvent<
      BuyBackTriggeredEvent.InputTuple,
      BuyBackTriggeredEvent.OutputTuple,
      BuyBackTriggeredEvent.OutputObject
    >;
    BuyBackTriggered: TypedContractEvent<
      BuyBackTriggeredEvent.InputTuple,
      BuyBackTriggeredEvent.OutputTuple,
      BuyBackTriggeredEvent.OutputObject
    >;

    "CaughtEarlyBuyer(address)": TypedContractEvent<
      CaughtEarlyBuyerEvent.InputTuple,
      CaughtEarlyBuyerEvent.OutputTuple,
      CaughtEarlyBuyerEvent.OutputObject
    >;
    CaughtEarlyBuyer: TypedContractEvent<
      CaughtEarlyBuyerEvent.InputTuple,
      CaughtEarlyBuyerEvent.OutputTuple,
      CaughtEarlyBuyerEvent.OutputObject
    >;

    "EnabledTrading()": TypedContractEvent<
      EnabledTradingEvent.InputTuple,
      EnabledTradingEvent.OutputTuple,
      EnabledTradingEvent.OutputObject
    >;
    EnabledTrading: TypedContractEvent<
      EnabledTradingEvent.InputTuple,
      EnabledTradingEvent.OutputTuple,
      EnabledTradingEvent.OutputObject
    >;

    "ExcludeFromFees(address,bool)": TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;
    ExcludeFromFees: TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;

    "MaxTransactionExclusion(address,bool)": TypedContractEvent<
      MaxTransactionExclusionEvent.InputTuple,
      MaxTransactionExclusionEvent.OutputTuple,
      MaxTransactionExclusionEvent.OutputObject
    >;
    MaxTransactionExclusion: TypedContractEvent<
      MaxTransactionExclusionEvent.InputTuple,
      MaxTransactionExclusionEvent.OutputTuple,
      MaxTransactionExclusionEvent.OutputObject
    >;

    "OwnerForcedSwapBack(uint256)": TypedContractEvent<
      OwnerForcedSwapBackEvent.InputTuple,
      OwnerForcedSwapBackEvent.OutputTuple,
      OwnerForcedSwapBackEvent.OutputObject
    >;
    OwnerForcedSwapBack: TypedContractEvent<
      OwnerForcedSwapBackEvent.InputTuple,
      OwnerForcedSwapBackEvent.OutputTuple,
      OwnerForcedSwapBackEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemovedLimits()": TypedContractEvent<
      RemovedLimitsEvent.InputTuple,
      RemovedLimitsEvent.OutputTuple,
      RemovedLimitsEvent.OutputObject
    >;
    RemovedLimits: TypedContractEvent<
      RemovedLimitsEvent.InputTuple,
      RemovedLimitsEvent.OutputTuple,
      RemovedLimitsEvent.OutputObject
    >;

    "SetAutomatedMarketMakerPair(address,bool)": TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;
    SetAutomatedMarketMakerPair: TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;

    "SwapAndLiquify(uint256,uint256,uint256)": TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;
    SwapAndLiquify: TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferForeignToken(address,uint256)": TypedContractEvent<
      TransferForeignTokenEvent.InputTuple,
      TransferForeignTokenEvent.OutputTuple,
      TransferForeignTokenEvent.OutputObject
    >;
    TransferForeignToken: TypedContractEvent<
      TransferForeignTokenEvent.InputTuple,
      TransferForeignTokenEvent.OutputTuple,
      TransferForeignTokenEvent.OutputObject
    >;

    "UpdatedMaxBuyAmount(uint256)": TypedContractEvent<
      UpdatedMaxBuyAmountEvent.InputTuple,
      UpdatedMaxBuyAmountEvent.OutputTuple,
      UpdatedMaxBuyAmountEvent.OutputObject
    >;
    UpdatedMaxBuyAmount: TypedContractEvent<
      UpdatedMaxBuyAmountEvent.InputTuple,
      UpdatedMaxBuyAmountEvent.OutputTuple,
      UpdatedMaxBuyAmountEvent.OutputObject
    >;

    "UpdatedMaxSellAmount(uint256)": TypedContractEvent<
      UpdatedMaxSellAmountEvent.InputTuple,
      UpdatedMaxSellAmountEvent.OutputTuple,
      UpdatedMaxSellAmountEvent.OutputObject
    >;
    UpdatedMaxSellAmount: TypedContractEvent<
      UpdatedMaxSellAmountEvent.InputTuple,
      UpdatedMaxSellAmountEvent.OutputTuple,
      UpdatedMaxSellAmountEvent.OutputObject
    >;

    "UpdatedMaxWalletAmount(uint256)": TypedContractEvent<
      UpdatedMaxWalletAmountEvent.InputTuple,
      UpdatedMaxWalletAmountEvent.OutputTuple,
      UpdatedMaxWalletAmountEvent.OutputObject
    >;
    UpdatedMaxWalletAmount: TypedContractEvent<
      UpdatedMaxWalletAmountEvent.InputTuple,
      UpdatedMaxWalletAmountEvent.OutputTuple,
      UpdatedMaxWalletAmountEvent.OutputObject
    >;

    "UpdatedOperationsAddress(address)": TypedContractEvent<
      UpdatedOperationsAddressEvent.InputTuple,
      UpdatedOperationsAddressEvent.OutputTuple,
      UpdatedOperationsAddressEvent.OutputObject
    >;
    UpdatedOperationsAddress: TypedContractEvent<
      UpdatedOperationsAddressEvent.InputTuple,
      UpdatedOperationsAddressEvent.OutputTuple,
      UpdatedOperationsAddressEvent.OutputObject
    >;
  };
}
