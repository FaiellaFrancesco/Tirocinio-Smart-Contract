/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface HYPEInterface extends utils.Interface {
  functions: {
    "_isExcludedMaxTransactionAmount(address)": FunctionFragment;
    "airdropToWallets(address[],uint256[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bot(address)": FunctionFragment;
    "botsCaught()": FunctionFragment;
    "buyLiquidityFee()": FunctionFragment;
    "buyOperationsFee()": FunctionFragment;
    "buyTotalFees()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "disableTransferDelay()": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeFromMaxTransaction(address,bool)": FunctionFragment;
    "forceSwapBack()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "limitsInEffect()": FunctionFragment;
    "lpPair()": FunctionFragment;
    "manageBoughtEarly(address,bool)": FunctionFragment;
    "massManageBoughtEarly(address[],bool)": FunctionFragment;
    "maxBuyAmount()": FunctionFragment;
    "maxSellAmount()": FunctionFragment;
    "maxWalletAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLimits()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellLiquidityFee()": FunctionFragment;
    "sellOperationsFee()": FunctionFragment;
    "sellTotalFees()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setOperationsAddress(address)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapTokensAtAmount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokensForLiquidity()": FunctionFragment;
    "tokensForOperations()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingActive()": FunctionFragment;
    "tradingActiveBlock()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferDelayEnabled()": FunctionFragment;
    "transferForeignToken(address,address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBuyFees(uint256,uint256)": FunctionFragment;
    "updateMaxBuyAmount(uint256)": FunctionFragment;
    "updateMaxSellAmount(uint256)": FunctionFragment;
    "updateMaxWalletAmount(uint256)": FunctionFragment;
    "updateSellFees(uint256,uint256)": FunctionFragment;
    "updateSwapTokensAtAmount(uint256)": FunctionFragment;
    "withdrawStuckETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_isExcludedMaxTransactionAmount"
      | "airdropToWallets"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "bot"
      | "botsCaught"
      | "buyLiquidityFee"
      | "buyOperationsFee"
      | "buyTotalFees"
      | "decimals"
      | "decreaseAllowance"
      | "dexRouter"
      | "disableTransferDelay"
      | "enableTrading"
      | "excludeFromFees"
      | "excludeFromMaxTransaction"
      | "forceSwapBack"
      | "increaseAllowance"
      | "limitsInEffect"
      | "lpPair"
      | "manageBoughtEarly"
      | "massManageBoughtEarly"
      | "maxBuyAmount"
      | "maxSellAmount"
      | "maxWalletAmount"
      | "name"
      | "owner"
      | "removeLimits"
      | "renounceOwnership"
      | "sellLiquidityFee"
      | "sellOperationsFee"
      | "sellTotalFees"
      | "setAutomatedMarketMakerPair"
      | "setOperationsAddress"
      | "swapEnabled"
      | "swapTokensAtAmount"
      | "symbol"
      | "tokensForLiquidity"
      | "tokensForOperations"
      | "totalSupply"
      | "tradingActive"
      | "tradingActiveBlock"
      | "transfer"
      | "transferDelayEnabled"
      | "transferForeignToken"
      | "transferFrom"
      | "transferOwnership"
      | "updateBuyFees"
      | "updateMaxBuyAmount"
      | "updateMaxSellAmount"
      | "updateMaxWalletAmount"
      | "updateSellFees"
      | "updateSwapTokensAtAmount"
      | "withdrawStuckETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropToWallets",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "botsCaught",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyOperationsFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableTransferDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceSwapBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInEffect",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manageBoughtEarly",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "massManageBoughtEarly",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBuyAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOperationsFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationsAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActiveBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDelayEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferForeignToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxBuyAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSellAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWalletAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapTokensAtAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStuckETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropToWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "botsCaught", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyOperationsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableTransferDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceSwapBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageBoughtEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massManageBoughtEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellOperationsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActiveBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferForeignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStuckETH",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BuyBackTriggered(uint256)": EventFragment;
    "CaughtEarlyBuyer(address)": EventFragment;
    "EnabledTrading()": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "MaxTransactionExclusion(address,bool)": EventFragment;
    "OwnerForcedSwapBack(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemovedLimits()": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferForeignToken(address,uint256)": EventFragment;
    "UpdatedMaxBuyAmount(uint256)": EventFragment;
    "UpdatedMaxSellAmount(uint256)": EventFragment;
    "UpdatedMaxWalletAmount(uint256)": EventFragment;
    "UpdatedOperationsAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyBackTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CaughtEarlyBuyer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledTrading"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTransactionExclusion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerForcedSwapBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedLimits"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferForeignToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxBuyAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxSellAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxWalletAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedOperationsAddress"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BuyBackTriggeredEventObject {
  amount: BigNumber;
}
export type BuyBackTriggeredEvent = TypedEvent<
  [BigNumber],
  BuyBackTriggeredEventObject
>;

export type BuyBackTriggeredEventFilter =
  TypedEventFilter<BuyBackTriggeredEvent>;

export interface CaughtEarlyBuyerEventObject {
  sniper: string;
}
export type CaughtEarlyBuyerEvent = TypedEvent<
  [string],
  CaughtEarlyBuyerEventObject
>;

export type CaughtEarlyBuyerEventFilter =
  TypedEventFilter<CaughtEarlyBuyerEvent>;

export interface EnabledTradingEventObject {}
export type EnabledTradingEvent = TypedEvent<[], EnabledTradingEventObject>;

export type EnabledTradingEventFilter = TypedEventFilter<EnabledTradingEvent>;

export interface ExcludeFromFeesEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean],
  ExcludeFromFeesEventObject
>;

export type ExcludeFromFeesEventFilter = TypedEventFilter<ExcludeFromFeesEvent>;

export interface MaxTransactionExclusionEventObject {
  _address: string;
  excluded: boolean;
}
export type MaxTransactionExclusionEvent = TypedEvent<
  [string, boolean],
  MaxTransactionExclusionEventObject
>;

export type MaxTransactionExclusionEventFilter =
  TypedEventFilter<MaxTransactionExclusionEvent>;

export interface OwnerForcedSwapBackEventObject {
  timestamp: BigNumber;
}
export type OwnerForcedSwapBackEvent = TypedEvent<
  [BigNumber],
  OwnerForcedSwapBackEventObject
>;

export type OwnerForcedSwapBackEventFilter =
  TypedEventFilter<OwnerForcedSwapBackEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemovedLimitsEventObject {}
export type RemovedLimitsEvent = TypedEvent<[], RemovedLimitsEventObject>;

export type RemovedLimitsEventFilter = TypedEventFilter<RemovedLimitsEvent>;

export interface SetAutomatedMarketMakerPairEventObject {
  pair: string;
  value: boolean;
}
export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean],
  SetAutomatedMarketMakerPairEventObject
>;

export type SetAutomatedMarketMakerPairEventFilter =
  TypedEventFilter<SetAutomatedMarketMakerPairEvent>;

export interface SwapAndLiquifyEventObject {
  tokensSwapped: BigNumber;
  ethReceived: BigNumber;
  tokensIntoLiquidity: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferForeignTokenEventObject {
  token: string;
  amount: BigNumber;
}
export type TransferForeignTokenEvent = TypedEvent<
  [string, BigNumber],
  TransferForeignTokenEventObject
>;

export type TransferForeignTokenEventFilter =
  TypedEventFilter<TransferForeignTokenEvent>;

export interface UpdatedMaxBuyAmountEventObject {
  newAmount: BigNumber;
}
export type UpdatedMaxBuyAmountEvent = TypedEvent<
  [BigNumber],
  UpdatedMaxBuyAmountEventObject
>;

export type UpdatedMaxBuyAmountEventFilter =
  TypedEventFilter<UpdatedMaxBuyAmountEvent>;

export interface UpdatedMaxSellAmountEventObject {
  newAmount: BigNumber;
}
export type UpdatedMaxSellAmountEvent = TypedEvent<
  [BigNumber],
  UpdatedMaxSellAmountEventObject
>;

export type UpdatedMaxSellAmountEventFilter =
  TypedEventFilter<UpdatedMaxSellAmountEvent>;

export interface UpdatedMaxWalletAmountEventObject {
  newAmount: BigNumber;
}
export type UpdatedMaxWalletAmountEvent = TypedEvent<
  [BigNumber],
  UpdatedMaxWalletAmountEventObject
>;

export type UpdatedMaxWalletAmountEventFilter =
  TypedEventFilter<UpdatedMaxWalletAmountEvent>;

export interface UpdatedOperationsAddressEventObject {
  newWallet: string;
}
export type UpdatedOperationsAddressEvent = TypedEvent<
  [string],
  UpdatedOperationsAddressEventObject
>;

export type UpdatedOperationsAddressEventFilter =
  TypedEventFilter<UpdatedOperationsAddressEvent>;

export interface HYPE extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HYPEInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    airdropToWallets(
      wallets: PromiseOrValue<string>[],
      amountsInTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    botsCaught(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyOperationsFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    disableTransferDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceSwapBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    limitsInEffect(overrides?: CallOverrides): Promise<[boolean]>;

    lpPair(overrides?: CallOverrides): Promise<[string]>;

    manageBoughtEarly(
      wallet: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    massManageBoughtEarly(
      wallets: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxBuyAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSellAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWalletAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellOperationsFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperationsAddress(
      _operationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForOperations(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingActive(overrides?: CallOverrides): Promise<[boolean]>;

    tradingActiveBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transferForeignToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBuyFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaxBuyAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaxSellAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSellFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStuckETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _isExcludedMaxTransactionAmount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  airdropToWallets(
    wallets: PromiseOrValue<string>[],
    amountsInTokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bot(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  botsCaught(overrides?: CallOverrides): Promise<BigNumber>;

  buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyOperationsFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  disableTransferDelay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableTrading(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: PromiseOrValue<string>,
    excluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromMaxTransaction(
    updAds: PromiseOrValue<string>,
    isEx: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceSwapBack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

  lpPair(overrides?: CallOverrides): Promise<string>;

  manageBoughtEarly(
    wallet: PromiseOrValue<string>,
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  massManageBoughtEarly(
    wallets: PromiseOrValue<string>[],
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxBuyAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLimits(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellOperationsFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  setAutomatedMarketMakerPair(
    pair: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperationsAddress(
    _operationsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForOperations(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingActive(overrides?: CallOverrides): Promise<boolean>;

  tradingActiveBlock(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

  transferForeignToken(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBuyFees(
    _operationsFee: PromiseOrValue<BigNumberish>,
    _liquidityFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaxBuyAmount(
    newNum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaxSellAmount(
    newNum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaxWalletAmount(
    newNum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSellFees(
    _operationsFee: PromiseOrValue<BigNumberish>,
    _liquidityFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSwapTokensAtAmount(
    newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStuckETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    airdropToWallets(
      wallets: PromiseOrValue<string>[],
      amountsInTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    botsCaught(overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyOperationsFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    disableTransferDelay(overrides?: CallOverrides): Promise<void>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceSwapBack(overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

    lpPair(overrides?: CallOverrides): Promise<string>;

    manageBoughtEarly(
      wallet: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    massManageBoughtEarly(
      wallets: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxBuyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLimits(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellOperationsFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationsAddress(
      _operationsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForOperations(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<boolean>;

    tradingActiveBlock(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

    transferForeignToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBuyFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxBuyAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxSellAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSellFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStuckETH(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "BuyBackTriggered(uint256)"(amount?: null): BuyBackTriggeredEventFilter;
    BuyBackTriggered(amount?: null): BuyBackTriggeredEventFilter;

    "CaughtEarlyBuyer(address)"(sniper?: null): CaughtEarlyBuyerEventFilter;
    CaughtEarlyBuyer(sniper?: null): CaughtEarlyBuyerEventFilter;

    "EnabledTrading()"(): EnabledTradingEventFilter;
    EnabledTrading(): EnabledTradingEventFilter;

    "ExcludeFromFees(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;
    ExcludeFromFees(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;

    "MaxTransactionExclusion(address,bool)"(
      _address?: null,
      excluded?: null
    ): MaxTransactionExclusionEventFilter;
    MaxTransactionExclusion(
      _address?: null,
      excluded?: null
    ): MaxTransactionExclusionEventFilter;

    "OwnerForcedSwapBack(uint256)"(
      timestamp?: null
    ): OwnerForcedSwapBackEventFilter;
    OwnerForcedSwapBack(timestamp?: null): OwnerForcedSwapBackEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemovedLimits()"(): RemovedLimitsEventFilter;
    RemovedLimits(): RemovedLimitsEventFilter;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<boolean> | null
    ): SetAutomatedMarketMakerPairEventFilter;
    SetAutomatedMarketMakerPair(
      pair?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<boolean> | null
    ): SetAutomatedMarketMakerPairEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "TransferForeignToken(address,uint256)"(
      token?: null,
      amount?: null
    ): TransferForeignTokenEventFilter;
    TransferForeignToken(
      token?: null,
      amount?: null
    ): TransferForeignTokenEventFilter;

    "UpdatedMaxBuyAmount(uint256)"(
      newAmount?: null
    ): UpdatedMaxBuyAmountEventFilter;
    UpdatedMaxBuyAmount(newAmount?: null): UpdatedMaxBuyAmountEventFilter;

    "UpdatedMaxSellAmount(uint256)"(
      newAmount?: null
    ): UpdatedMaxSellAmountEventFilter;
    UpdatedMaxSellAmount(newAmount?: null): UpdatedMaxSellAmountEventFilter;

    "UpdatedMaxWalletAmount(uint256)"(
      newAmount?: null
    ): UpdatedMaxWalletAmountEventFilter;
    UpdatedMaxWalletAmount(newAmount?: null): UpdatedMaxWalletAmountEventFilter;

    "UpdatedOperationsAddress(address)"(
      newWallet?: PromiseOrValue<string> | null
    ): UpdatedOperationsAddressEventFilter;
    UpdatedOperationsAddress(
      newWallet?: PromiseOrValue<string> | null
    ): UpdatedOperationsAddressEventFilter;
  };

  estimateGas: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    airdropToWallets(
      wallets: PromiseOrValue<string>[],
      amountsInTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botsCaught(overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyOperationsFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    disableTransferDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceSwapBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    limitsInEffect(overrides?: CallOverrides): Promise<BigNumber>;

    lpPair(overrides?: CallOverrides): Promise<BigNumber>;

    manageBoughtEarly(
      wallet: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    massManageBoughtEarly(
      wallets: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxBuyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellOperationsFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperationsAddress(
      _operationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForOperations(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActiveBlock(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transferForeignToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBuyFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaxBuyAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaxSellAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSellFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStuckETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropToWallets(
      wallets: PromiseOrValue<string>[],
      amountsInTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botsCaught(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyOperationsFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableTransferDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceSwapBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    limitsInEffect(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manageBoughtEarly(
      wallet: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    massManageBoughtEarly(
      wallets: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxBuyAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSellAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWalletAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellOperationsFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperationsAddress(
      _operationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapTokensAtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingActiveBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferDelayEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferForeignToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBuyFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxBuyAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxSellAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSellFees(
      _operationsFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStuckETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
