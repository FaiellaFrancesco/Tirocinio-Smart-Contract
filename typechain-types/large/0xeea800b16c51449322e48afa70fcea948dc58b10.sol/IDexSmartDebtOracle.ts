/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDexSmartDebtOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dexOracleData"
      | "dexSmartDebtOracleData"
      | "dexSmartDebtSharesRates"
      | "getDexColDebtOracleData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "dexOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexSmartDebtOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexSmartDebtSharesRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDexColDebtOracleData",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dexOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexSmartDebtOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexSmartDebtSharesRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexColDebtOracleData",
    data: BytesLike
  ): Result;
}

export interface IDexSmartDebtOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IDexSmartDebtOracle;
  waitForDeployment(): Promise<this>;

  interface: IDexSmartDebtOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dexOracleData: TypedContractMethod<
    [],
    [
      [string, boolean, string, bigint, bigint] & {
        dexPool_: string;
        quoteInToken0_: boolean;
        liquidity_: string;
        resultMultiplier_: bigint;
        resultDivisor_: bigint;
      }
    ],
    "view"
  >;

  dexSmartDebtOracleData: TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean
      ] & {
        dexPool_: string;
        reservesPegBufferPercent_: bigint;
        liquidity_: string;
        token0NumeratorPrecision_: bigint;
        token0DenominatorPrecision_: bigint;
        token1NumeratorPrecision_: bigint;
        token1DenominatorPrecision_: bigint;
        reservesConversionOracle_: string;
        reservesConversionInvert_: boolean;
        quoteInToken0_: boolean;
      }
    ],
    "view"
  >;

  dexSmartDebtSharesRates: TypedContractMethod<
    [],
    [[bigint, bigint] & { operate_: bigint; liquidate_: bigint }],
    "view"
  >;

  getDexColDebtOracleData: TypedContractMethod<
    [],
    [[string, boolean] & { colDebtOracle_: string; colDebtInvert_: boolean }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dexOracleData"
  ): TypedContractMethod<
    [],
    [
      [string, boolean, string, bigint, bigint] & {
        dexPool_: string;
        quoteInToken0_: boolean;
        liquidity_: string;
        resultMultiplier_: bigint;
        resultDivisor_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "dexSmartDebtOracleData"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean
      ] & {
        dexPool_: string;
        reservesPegBufferPercent_: bigint;
        liquidity_: string;
        token0NumeratorPrecision_: bigint;
        token0DenominatorPrecision_: bigint;
        token1NumeratorPrecision_: bigint;
        token1DenominatorPrecision_: bigint;
        reservesConversionOracle_: string;
        reservesConversionInvert_: boolean;
        quoteInToken0_: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "dexSmartDebtSharesRates"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { operate_: bigint; liquidate_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDexColDebtOracleData"
  ): TypedContractMethod<
    [],
    [[string, boolean] & { colDebtOracle_: string; colDebtInvert_: boolean }],
    "view"
  >;

  filters: {};
}
