/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IDexSmartCollOracleInterface extends utils.Interface {
  functions: {
    "dexOracleData()": FunctionFragment;
    "dexSmartColOracleData()": FunctionFragment;
    "dexSmartColSharesRates()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dexOracleData"
      | "dexSmartColOracleData"
      | "dexSmartColSharesRates"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "dexOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexSmartColOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexSmartColSharesRates",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dexOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexSmartColOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexSmartColSharesRates",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDexSmartCollOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDexSmartCollOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dexOracleData(
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string, BigNumber, BigNumber] & {
        dexPool_: string;
        quoteInToken0_: boolean;
        liquidity_: string;
        resultMultiplier_: BigNumber;
        resultDivisor_: BigNumber;
      }
    >;

    dexSmartColOracleData(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        dexPool_: string;
        reservesPegBufferPercent_: BigNumber;
        liquidity_: string;
        token0NumeratorPrecision_: BigNumber;
        token0DenominatorPrecision_: BigNumber;
        token1NumeratorPrecision_: BigNumber;
        token1DenominatorPrecision_: BigNumber;
        reservesConversionOracle_: string;
        reservesConversionInvert_: boolean;
        quoteInToken0_: boolean;
      }
    >;

    dexSmartColSharesRates(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { operate_: BigNumber; liquidate_: BigNumber }
    >;
  };

  dexOracleData(
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, string, BigNumber, BigNumber] & {
      dexPool_: string;
      quoteInToken0_: boolean;
      liquidity_: string;
      resultMultiplier_: BigNumber;
      resultDivisor_: BigNumber;
    }
  >;

  dexSmartColOracleData(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean,
      boolean
    ] & {
      dexPool_: string;
      reservesPegBufferPercent_: BigNumber;
      liquidity_: string;
      token0NumeratorPrecision_: BigNumber;
      token0DenominatorPrecision_: BigNumber;
      token1NumeratorPrecision_: BigNumber;
      token1DenominatorPrecision_: BigNumber;
      reservesConversionOracle_: string;
      reservesConversionInvert_: boolean;
      quoteInToken0_: boolean;
    }
  >;

  dexSmartColSharesRates(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { operate_: BigNumber; liquidate_: BigNumber }
  >;

  callStatic: {
    dexOracleData(
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string, BigNumber, BigNumber] & {
        dexPool_: string;
        quoteInToken0_: boolean;
        liquidity_: string;
        resultMultiplier_: BigNumber;
        resultDivisor_: BigNumber;
      }
    >;

    dexSmartColOracleData(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        dexPool_: string;
        reservesPegBufferPercent_: BigNumber;
        liquidity_: string;
        token0NumeratorPrecision_: BigNumber;
        token0DenominatorPrecision_: BigNumber;
        token1NumeratorPrecision_: BigNumber;
        token1DenominatorPrecision_: BigNumber;
        reservesConversionOracle_: string;
        reservesConversionInvert_: boolean;
        quoteInToken0_: boolean;
      }
    >;

    dexSmartColSharesRates(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { operate_: BigNumber; liquidate_: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    dexOracleData(overrides?: CallOverrides): Promise<BigNumber>;

    dexSmartColOracleData(overrides?: CallOverrides): Promise<BigNumber>;

    dexSmartColSharesRates(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dexOracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexSmartColOracleData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dexSmartColSharesRates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
