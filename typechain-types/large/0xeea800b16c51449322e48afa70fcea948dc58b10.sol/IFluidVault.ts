/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IFluidVault {
  export type TokensStruct = {
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
  };

  export type TokensStructOutput = [string, string] & {
    token0: string;
    token1: string;
  };

  export type ConstantViewsStruct = {
    liquidity: PromiseOrValue<string>;
    factory: PromiseOrValue<string>;
    operateImplementation: PromiseOrValue<string>;
    adminImplementation: PromiseOrValue<string>;
    secondaryImplementation: PromiseOrValue<string>;
    deployer: PromiseOrValue<string>;
    supply: PromiseOrValue<string>;
    borrow: PromiseOrValue<string>;
    supplyToken: IFluidVault.TokensStruct;
    borrowToken: IFluidVault.TokensStruct;
    vaultId: PromiseOrValue<BigNumberish>;
    vaultType: PromiseOrValue<BigNumberish>;
    supplyExchangePriceSlot: PromiseOrValue<BytesLike>;
    borrowExchangePriceSlot: PromiseOrValue<BytesLike>;
    userSupplySlot: PromiseOrValue<BytesLike>;
    userBorrowSlot: PromiseOrValue<BytesLike>;
  };

  export type ConstantViewsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    IFluidVault.TokensStructOutput,
    IFluidVault.TokensStructOutput,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    liquidity: string;
    factory: string;
    operateImplementation: string;
    adminImplementation: string;
    secondaryImplementation: string;
    deployer: string;
    supply: string;
    borrow: string;
    supplyToken: IFluidVault.TokensStructOutput;
    borrowToken: IFluidVault.TokensStructOutput;
    vaultId: BigNumber;
    vaultType: BigNumber;
    supplyExchangePriceSlot: string;
    borrowExchangePriceSlot: string;
    userSupplySlot: string;
    userBorrowSlot: string;
  };
}

export interface IFluidVaultInterface extends utils.Interface {
  functions: {
    "constantsView()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "constantsView"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "constantsView",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "constantsView",
    data: BytesLike
  ): Result;

  events: {
    "LogOperate(address,uint256,int256,int256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogOperate"): EventFragment;
}

export interface LogOperateEventObject {
  user_: string;
  nftId_: BigNumber;
  colAmt_: BigNumber;
  debtAmt_: BigNumber;
  to_: string;
}
export type LogOperateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  LogOperateEventObject
>;

export type LogOperateEventFilter = TypedEventFilter<LogOperateEvent>;

export interface IFluidVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFluidVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    constantsView(
      overrides?: CallOverrides
    ): Promise<
      [IFluidVault.ConstantViewsStructOutput] & {
        constantsView_: IFluidVault.ConstantViewsStructOutput;
      }
    >;
  };

  constantsView(
    overrides?: CallOverrides
  ): Promise<IFluidVault.ConstantViewsStructOutput>;

  callStatic: {
    constantsView(
      overrides?: CallOverrides
    ): Promise<IFluidVault.ConstantViewsStructOutput>;
  };

  filters: {
    "LogOperate(address,uint256,int256,int256,address)"(
      user_?: null,
      nftId_?: null,
      colAmt_?: null,
      debtAmt_?: null,
      to_?: null
    ): LogOperateEventFilter;
    LogOperate(
      user_?: null,
      nftId_?: null,
      colAmt_?: null,
      debtAmt_?: null,
      to_?: null
    ): LogOperateEventFilter;
  };

  estimateGas: {
    constantsView(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    constantsView(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
