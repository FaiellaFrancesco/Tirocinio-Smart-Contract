/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFluidVault {
  export type TokensStruct = { token0: AddressLike; token1: AddressLike };

  export type TokensStructOutput = [token0: string, token1: string] & {
    token0: string;
    token1: string;
  };

  export type ConstantViewsStruct = {
    liquidity: AddressLike;
    factory: AddressLike;
    operateImplementation: AddressLike;
    adminImplementation: AddressLike;
    secondaryImplementation: AddressLike;
    deployer: AddressLike;
    supply: AddressLike;
    borrow: AddressLike;
    supplyToken: IFluidVault.TokensStruct;
    borrowToken: IFluidVault.TokensStruct;
    vaultId: BigNumberish;
    vaultType: BigNumberish;
    supplyExchangePriceSlot: BytesLike;
    borrowExchangePriceSlot: BytesLike;
    userSupplySlot: BytesLike;
    userBorrowSlot: BytesLike;
  };

  export type ConstantViewsStructOutput = [
    liquidity: string,
    factory: string,
    operateImplementation: string,
    adminImplementation: string,
    secondaryImplementation: string,
    deployer: string,
    supply: string,
    borrow: string,
    supplyToken: IFluidVault.TokensStructOutput,
    borrowToken: IFluidVault.TokensStructOutput,
    vaultId: bigint,
    vaultType: bigint,
    supplyExchangePriceSlot: string,
    borrowExchangePriceSlot: string,
    userSupplySlot: string,
    userBorrowSlot: string
  ] & {
    liquidity: string;
    factory: string;
    operateImplementation: string;
    adminImplementation: string;
    secondaryImplementation: string;
    deployer: string;
    supply: string;
    borrow: string;
    supplyToken: IFluidVault.TokensStructOutput;
    borrowToken: IFluidVault.TokensStructOutput;
    vaultId: bigint;
    vaultType: bigint;
    supplyExchangePriceSlot: string;
    borrowExchangePriceSlot: string;
    userSupplySlot: string;
    userBorrowSlot: string;
  };
}

export interface IFluidVaultInterface extends Interface {
  getFunction(nameOrSignature: "constantsView"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LogOperate"): EventFragment;

  encodeFunctionData(
    functionFragment: "constantsView",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "constantsView",
    data: BytesLike
  ): Result;
}

export namespace LogOperateEvent {
  export type InputTuple = [
    user_: AddressLike,
    nftId_: BigNumberish,
    colAmt_: BigNumberish,
    debtAmt_: BigNumberish,
    to_: AddressLike
  ];
  export type OutputTuple = [
    user_: string,
    nftId_: bigint,
    colAmt_: bigint,
    debtAmt_: bigint,
    to_: string
  ];
  export interface OutputObject {
    user_: string;
    nftId_: bigint;
    colAmt_: bigint;
    debtAmt_: bigint;
    to_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFluidVault extends BaseContract {
  connect(runner?: ContractRunner | null): IFluidVault;
  waitForDeployment(): Promise<this>;

  interface: IFluidVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  constantsView: TypedContractMethod<
    [],
    [IFluidVault.ConstantViewsStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "constantsView"
  ): TypedContractMethod<[], [IFluidVault.ConstantViewsStructOutput], "view">;

  getEvent(
    key: "LogOperate"
  ): TypedContractEvent<
    LogOperateEvent.InputTuple,
    LogOperateEvent.OutputTuple,
    LogOperateEvent.OutputObject
  >;

  filters: {
    "LogOperate(address,uint256,int256,int256,address)": TypedContractEvent<
      LogOperateEvent.InputTuple,
      LogOperateEvent.OutputTuple,
      LogOperateEvent.OutputObject
    >;
    LogOperate: TypedContractEvent<
      LogOperateEvent.InputTuple,
      LogOperateEvent.OutputTuple,
      LogOperateEvent.OutputObject
    >;
  };
}
