/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IFluidLendingResolver {
  export type UserSupplyDataStruct = {
    modeWithInterest: PromiseOrValue<boolean>;
    supply: PromiseOrValue<BigNumberish>;
    withdrawalLimit: PromiseOrValue<BigNumberish>;
    lastUpdateTimestamp: PromiseOrValue<BigNumberish>;
    expandPercent: PromiseOrValue<BigNumberish>;
    expandDuration: PromiseOrValue<BigNumberish>;
    baseWithdrawalLimit: PromiseOrValue<BigNumberish>;
    withdrawableUntilLimit: PromiseOrValue<BigNumberish>;
    withdrawable: PromiseOrValue<BigNumberish>;
  };

  export type UserSupplyDataStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    modeWithInterest: boolean;
    supply: BigNumber;
    withdrawalLimit: BigNumber;
    lastUpdateTimestamp: BigNumber;
    expandPercent: BigNumber;
    expandDuration: BigNumber;
    baseWithdrawalLimit: BigNumber;
    withdrawableUntilLimit: BigNumber;
    withdrawable: BigNumber;
  };

  export type FTokenDetailsStruct = {
    tokenAddress: PromiseOrValue<string>;
    eip2612Deposits: PromiseOrValue<boolean>;
    isNativeUnderlying: PromiseOrValue<boolean>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    totalAssets: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    convertToShares: PromiseOrValue<BigNumberish>;
    convertToAssets: PromiseOrValue<BigNumberish>;
    rewardsRate: PromiseOrValue<BigNumberish>;
    supplyRate: PromiseOrValue<BigNumberish>;
    rebalanceDifference: PromiseOrValue<BigNumberish>;
    liquidityUserSupplyData: IFluidLendingResolver.UserSupplyDataStruct;
  };

  export type FTokenDetailsStructOutput = [
    string,
    boolean,
    boolean,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    IFluidLendingResolver.UserSupplyDataStructOutput
  ] & {
    tokenAddress: string;
    eip2612Deposits: boolean;
    isNativeUnderlying: boolean;
    name: string;
    symbol: string;
    decimals: BigNumber;
    asset: string;
    totalAssets: BigNumber;
    totalSupply: BigNumber;
    convertToShares: BigNumber;
    convertToAssets: BigNumber;
    rewardsRate: BigNumber;
    supplyRate: BigNumber;
    rebalanceDifference: BigNumber;
    liquidityUserSupplyData: IFluidLendingResolver.UserSupplyDataStructOutput;
  };

  export type UserPositionStruct = {
    fTokenShares: PromiseOrValue<BigNumberish>;
    underlyingAssets: PromiseOrValue<BigNumberish>;
    underlyingBalance: PromiseOrValue<BigNumberish>;
    allowance: PromiseOrValue<BigNumberish>;
  };

  export type UserPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fTokenShares: BigNumber;
    underlyingAssets: BigNumber;
    underlyingBalance: BigNumber;
    allowance: BigNumber;
  };

  export type FTokenDetailsUserPositionStruct = {
    fTokenDetails: IFluidLendingResolver.FTokenDetailsStruct;
    userPosition: IFluidLendingResolver.UserPositionStruct;
  };

  export type FTokenDetailsUserPositionStructOutput = [
    IFluidLendingResolver.FTokenDetailsStructOutput,
    IFluidLendingResolver.UserPositionStructOutput
  ] & {
    fTokenDetails: IFluidLendingResolver.FTokenDetailsStructOutput;
    userPosition: IFluidLendingResolver.UserPositionStructOutput;
  };
}

export interface IFluidLendingResolverInterface extends utils.Interface {
  functions: {
    "LENDING_FACTORY()": FunctionFragment;
    "LIQUIDITY_RESOLVER()": FunctionFragment;
    "computeFToken(address,string)": FunctionFragment;
    "getAllFTokenTypes()": FunctionFragment;
    "getAllFTokens()": FunctionFragment;
    "getFTokenDetails(address)": FunctionFragment;
    "getFTokenInternalData(address)": FunctionFragment;
    "getFTokenRewards(address)": FunctionFragment;
    "getFTokenRewardsRateModelConfig(address)": FunctionFragment;
    "getFTokensEntireData()": FunctionFragment;
    "getPreviews(address,uint256,uint256)": FunctionFragment;
    "getUserPosition(address,address)": FunctionFragment;
    "getUserPositions(address)": FunctionFragment;
    "isLendingFactoryAuth(address)": FunctionFragment;
    "isLendingFactoryDeployer(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LENDING_FACTORY"
      | "LIQUIDITY_RESOLVER"
      | "computeFToken"
      | "getAllFTokenTypes"
      | "getAllFTokens"
      | "getFTokenDetails"
      | "getFTokenInternalData"
      | "getFTokenRewards"
      | "getFTokenRewardsRateModelConfig"
      | "getFTokensEntireData"
      | "getPreviews"
      | "getUserPosition"
      | "getUserPositions"
      | "isLendingFactoryAuth"
      | "isLendingFactoryDeployer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LENDING_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_RESOLVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeFToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFTokenTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenInternalData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenRewardsRateModelConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokensEntireData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPreviews",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLendingFactoryAuth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLendingFactoryDeployer",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "LENDING_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_RESOLVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeFToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFTokenTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenInternalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenRewardsRateModelConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokensEntireData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLendingFactoryAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLendingFactoryDeployer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFluidLendingResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFluidLendingResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LENDING_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDITY_RESOLVER(overrides?: CallOverrides): Promise<[string]>;

    computeFToken(
      asset_: PromiseOrValue<string>,
      fTokenType_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllFTokenTypes(overrides?: CallOverrides): Promise<[string[]]>;

    getAllFTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getFTokenDetails(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IFluidLendingResolver.FTokenDetailsStructOutput] & {
        fTokenDetails_: IFluidLendingResolver.FTokenDetailsStructOutput;
      }
    >;

    getFTokenInternalData(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity_: string;
        lendingFactory_: string;
        lendingRewardsRateModel_: string;
        permit2_: string;
        rebalancer_: string;
        rewardsActive_: boolean;
        liquidityBalance_: BigNumber;
        liquidityExchangePrice_: BigNumber;
        tokenExchangePrice_: BigNumber;
      }
    >;

    getFTokenRewards(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        rewardsRateModel_: string;
        rewardsRate_: BigNumber;
      }
    >;

    getFTokenRewardsRateModelConfig(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        duration_: BigNumber;
        startTime_: BigNumber;
        endTime_: BigNumber;
        startTvl_: BigNumber;
        maxRate_: BigNumber;
        rewardAmount_: BigNumber;
        initiator_: string;
      }
    >;

    getFTokensEntireData(
      overrides?: CallOverrides
    ): Promise<[IFluidLendingResolver.FTokenDetailsStructOutput[]]>;

    getPreviews(
      fToken_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        previewDeposit_: BigNumber;
        previewMint_: BigNumber;
        previewWithdraw_: BigNumber;
        previewRedeem_: BigNumber;
      }
    >;

    getUserPosition(
      fToken_: PromiseOrValue<string>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IFluidLendingResolver.UserPositionStructOutput] & {
        userPosition: IFluidLendingResolver.UserPositionStructOutput;
      }
    >;

    getUserPositions(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IFluidLendingResolver.FTokenDetailsUserPositionStructOutput[]]>;

    isLendingFactoryAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLendingFactoryDeployer(
      deployer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  LENDING_FACTORY(overrides?: CallOverrides): Promise<string>;

  LIQUIDITY_RESOLVER(overrides?: CallOverrides): Promise<string>;

  computeFToken(
    asset_: PromiseOrValue<string>,
    fTokenType_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllFTokenTypes(overrides?: CallOverrides): Promise<string[]>;

  getAllFTokens(overrides?: CallOverrides): Promise<string[]>;

  getFTokenDetails(
    fToken_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IFluidLendingResolver.FTokenDetailsStructOutput>;

  getFTokenInternalData(
    fToken_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidity_: string;
      lendingFactory_: string;
      lendingRewardsRateModel_: string;
      permit2_: string;
      rebalancer_: string;
      rewardsActive_: boolean;
      liquidityBalance_: BigNumber;
      liquidityExchangePrice_: BigNumber;
      tokenExchangePrice_: BigNumber;
    }
  >;

  getFTokenRewards(
    fToken_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { rewardsRateModel_: string; rewardsRate_: BigNumber }
  >;

  getFTokenRewardsRateModelConfig(
    fToken_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      duration_: BigNumber;
      startTime_: BigNumber;
      endTime_: BigNumber;
      startTvl_: BigNumber;
      maxRate_: BigNumber;
      rewardAmount_: BigNumber;
      initiator_: string;
    }
  >;

  getFTokensEntireData(
    overrides?: CallOverrides
  ): Promise<IFluidLendingResolver.FTokenDetailsStructOutput[]>;

  getPreviews(
    fToken_: PromiseOrValue<string>,
    assets_: PromiseOrValue<BigNumberish>,
    shares_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      previewDeposit_: BigNumber;
      previewMint_: BigNumber;
      previewWithdraw_: BigNumber;
      previewRedeem_: BigNumber;
    }
  >;

  getUserPosition(
    fToken_: PromiseOrValue<string>,
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IFluidLendingResolver.UserPositionStructOutput>;

  getUserPositions(
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IFluidLendingResolver.FTokenDetailsUserPositionStructOutput[]>;

  isLendingFactoryAuth(
    auth_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLendingFactoryDeployer(
    deployer_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    LENDING_FACTORY(overrides?: CallOverrides): Promise<string>;

    LIQUIDITY_RESOLVER(overrides?: CallOverrides): Promise<string>;

    computeFToken(
      asset_: PromiseOrValue<string>,
      fTokenType_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllFTokenTypes(overrides?: CallOverrides): Promise<string[]>;

    getAllFTokens(overrides?: CallOverrides): Promise<string[]>;

    getFTokenDetails(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IFluidLendingResolver.FTokenDetailsStructOutput>;

    getFTokenInternalData(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity_: string;
        lendingFactory_: string;
        lendingRewardsRateModel_: string;
        permit2_: string;
        rebalancer_: string;
        rewardsActive_: boolean;
        liquidityBalance_: BigNumber;
        liquidityExchangePrice_: BigNumber;
        tokenExchangePrice_: BigNumber;
      }
    >;

    getFTokenRewards(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        rewardsRateModel_: string;
        rewardsRate_: BigNumber;
      }
    >;

    getFTokenRewardsRateModelConfig(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        duration_: BigNumber;
        startTime_: BigNumber;
        endTime_: BigNumber;
        startTvl_: BigNumber;
        maxRate_: BigNumber;
        rewardAmount_: BigNumber;
        initiator_: string;
      }
    >;

    getFTokensEntireData(
      overrides?: CallOverrides
    ): Promise<IFluidLendingResolver.FTokenDetailsStructOutput[]>;

    getPreviews(
      fToken_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        previewDeposit_: BigNumber;
        previewMint_: BigNumber;
        previewWithdraw_: BigNumber;
        previewRedeem_: BigNumber;
      }
    >;

    getUserPosition(
      fToken_: PromiseOrValue<string>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IFluidLendingResolver.UserPositionStructOutput>;

    getUserPositions(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IFluidLendingResolver.FTokenDetailsUserPositionStructOutput[]>;

    isLendingFactoryAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLendingFactoryDeployer(
      deployer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    LENDING_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_RESOLVER(overrides?: CallOverrides): Promise<BigNumber>;

    computeFToken(
      asset_: PromiseOrValue<string>,
      fTokenType_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllFTokenTypes(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getFTokenDetails(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFTokenInternalData(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFTokenRewards(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFTokenRewardsRateModelConfig(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFTokensEntireData(overrides?: CallOverrides): Promise<BigNumber>;

    getPreviews(
      fToken_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPosition(
      fToken_: PromiseOrValue<string>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPositions(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLendingFactoryAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLendingFactoryDeployer(
      deployer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LENDING_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDITY_RESOLVER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeFToken(
      asset_: PromiseOrValue<string>,
      fTokenType_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllFTokenTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllFTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFTokenDetails(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFTokenInternalData(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFTokenRewards(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFTokenRewardsRateModelConfig(
      fToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFTokensEntireData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreviews(
      fToken_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPosition(
      fToken_: PromiseOrValue<string>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPositions(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLendingFactoryAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLendingFactoryDeployer(
      deployer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
