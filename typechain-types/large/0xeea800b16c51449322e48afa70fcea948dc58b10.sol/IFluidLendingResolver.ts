/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFluidLendingResolver {
  export type UserSupplyDataStruct = {
    modeWithInterest: boolean;
    supply: BigNumberish;
    withdrawalLimit: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
    expandPercent: BigNumberish;
    expandDuration: BigNumberish;
    baseWithdrawalLimit: BigNumberish;
    withdrawableUntilLimit: BigNumberish;
    withdrawable: BigNumberish;
  };

  export type UserSupplyDataStructOutput = [
    modeWithInterest: boolean,
    supply: bigint,
    withdrawalLimit: bigint,
    lastUpdateTimestamp: bigint,
    expandPercent: bigint,
    expandDuration: bigint,
    baseWithdrawalLimit: bigint,
    withdrawableUntilLimit: bigint,
    withdrawable: bigint
  ] & {
    modeWithInterest: boolean;
    supply: bigint;
    withdrawalLimit: bigint;
    lastUpdateTimestamp: bigint;
    expandPercent: bigint;
    expandDuration: bigint;
    baseWithdrawalLimit: bigint;
    withdrawableUntilLimit: bigint;
    withdrawable: bigint;
  };

  export type FTokenDetailsStruct = {
    tokenAddress: AddressLike;
    eip2612Deposits: boolean;
    isNativeUnderlying: boolean;
    name: string;
    symbol: string;
    decimals: BigNumberish;
    asset: AddressLike;
    totalAssets: BigNumberish;
    totalSupply: BigNumberish;
    convertToShares: BigNumberish;
    convertToAssets: BigNumberish;
    rewardsRate: BigNumberish;
    supplyRate: BigNumberish;
    rebalanceDifference: BigNumberish;
    liquidityUserSupplyData: IFluidLendingResolver.UserSupplyDataStruct;
  };

  export type FTokenDetailsStructOutput = [
    tokenAddress: string,
    eip2612Deposits: boolean,
    isNativeUnderlying: boolean,
    name: string,
    symbol: string,
    decimals: bigint,
    asset: string,
    totalAssets: bigint,
    totalSupply: bigint,
    convertToShares: bigint,
    convertToAssets: bigint,
    rewardsRate: bigint,
    supplyRate: bigint,
    rebalanceDifference: bigint,
    liquidityUserSupplyData: IFluidLendingResolver.UserSupplyDataStructOutput
  ] & {
    tokenAddress: string;
    eip2612Deposits: boolean;
    isNativeUnderlying: boolean;
    name: string;
    symbol: string;
    decimals: bigint;
    asset: string;
    totalAssets: bigint;
    totalSupply: bigint;
    convertToShares: bigint;
    convertToAssets: bigint;
    rewardsRate: bigint;
    supplyRate: bigint;
    rebalanceDifference: bigint;
    liquidityUserSupplyData: IFluidLendingResolver.UserSupplyDataStructOutput;
  };

  export type UserPositionStruct = {
    fTokenShares: BigNumberish;
    underlyingAssets: BigNumberish;
    underlyingBalance: BigNumberish;
    allowance: BigNumberish;
  };

  export type UserPositionStructOutput = [
    fTokenShares: bigint,
    underlyingAssets: bigint,
    underlyingBalance: bigint,
    allowance: bigint
  ] & {
    fTokenShares: bigint;
    underlyingAssets: bigint;
    underlyingBalance: bigint;
    allowance: bigint;
  };

  export type FTokenDetailsUserPositionStruct = {
    fTokenDetails: IFluidLendingResolver.FTokenDetailsStruct;
    userPosition: IFluidLendingResolver.UserPositionStruct;
  };

  export type FTokenDetailsUserPositionStructOutput = [
    fTokenDetails: IFluidLendingResolver.FTokenDetailsStructOutput,
    userPosition: IFluidLendingResolver.UserPositionStructOutput
  ] & {
    fTokenDetails: IFluidLendingResolver.FTokenDetailsStructOutput;
    userPosition: IFluidLendingResolver.UserPositionStructOutput;
  };
}

export interface IFluidLendingResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LENDING_FACTORY"
      | "LIQUIDITY_RESOLVER"
      | "computeFToken"
      | "getAllFTokenTypes"
      | "getAllFTokens"
      | "getFTokenDetails"
      | "getFTokenInternalData"
      | "getFTokenRewards"
      | "getFTokenRewardsRateModelConfig"
      | "getFTokensEntireData"
      | "getPreviews"
      | "getUserPosition"
      | "getUserPositions"
      | "isLendingFactoryAuth"
      | "isLendingFactoryDeployer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LENDING_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_RESOLVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeFToken",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFTokenTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenInternalData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenRewardsRateModelConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokensEntireData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPreviews",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPosition",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLendingFactoryAuth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLendingFactoryDeployer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "LENDING_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_RESOLVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeFToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFTokenTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenInternalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenRewardsRateModelConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokensEntireData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLendingFactoryAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLendingFactoryDeployer",
    data: BytesLike
  ): Result;
}

export interface IFluidLendingResolver extends BaseContract {
  connect(runner?: ContractRunner | null): IFluidLendingResolver;
  waitForDeployment(): Promise<this>;

  interface: IFluidLendingResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LENDING_FACTORY: TypedContractMethod<[], [string], "view">;

  LIQUIDITY_RESOLVER: TypedContractMethod<[], [string], "view">;

  computeFToken: TypedContractMethod<
    [asset_: AddressLike, fTokenType_: string],
    [string],
    "view"
  >;

  getAllFTokenTypes: TypedContractMethod<[], [string[]], "view">;

  getAllFTokens: TypedContractMethod<[], [string[]], "view">;

  getFTokenDetails: TypedContractMethod<
    [fToken_: AddressLike],
    [IFluidLendingResolver.FTokenDetailsStructOutput],
    "view"
  >;

  getFTokenInternalData: TypedContractMethod<
    [fToken_: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        liquidity_: string;
        lendingFactory_: string;
        lendingRewardsRateModel_: string;
        permit2_: string;
        rebalancer_: string;
        rewardsActive_: boolean;
        liquidityBalance_: bigint;
        liquidityExchangePrice_: bigint;
        tokenExchangePrice_: bigint;
      }
    ],
    "view"
  >;

  getFTokenRewards: TypedContractMethod<
    [fToken_: AddressLike],
    [[string, bigint] & { rewardsRateModel_: string; rewardsRate_: bigint }],
    "view"
  >;

  getFTokenRewardsRateModelConfig: TypedContractMethod<
    [fToken_: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        duration_: bigint;
        startTime_: bigint;
        endTime_: bigint;
        startTvl_: bigint;
        maxRate_: bigint;
        rewardAmount_: bigint;
        initiator_: string;
      }
    ],
    "view"
  >;

  getFTokensEntireData: TypedContractMethod<
    [],
    [IFluidLendingResolver.FTokenDetailsStructOutput[]],
    "view"
  >;

  getPreviews: TypedContractMethod<
    [fToken_: AddressLike, assets_: BigNumberish, shares_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        previewDeposit_: bigint;
        previewMint_: bigint;
        previewWithdraw_: bigint;
        previewRedeem_: bigint;
      }
    ],
    "view"
  >;

  getUserPosition: TypedContractMethod<
    [fToken_: AddressLike, user_: AddressLike],
    [IFluidLendingResolver.UserPositionStructOutput],
    "view"
  >;

  getUserPositions: TypedContractMethod<
    [user_: AddressLike],
    [IFluidLendingResolver.FTokenDetailsUserPositionStructOutput[]],
    "view"
  >;

  isLendingFactoryAuth: TypedContractMethod<
    [auth_: AddressLike],
    [boolean],
    "view"
  >;

  isLendingFactoryDeployer: TypedContractMethod<
    [deployer_: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LENDING_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LIQUIDITY_RESOLVER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeFToken"
  ): TypedContractMethod<
    [asset_: AddressLike, fTokenType_: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllFTokenTypes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllFTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFTokenDetails"
  ): TypedContractMethod<
    [fToken_: AddressLike],
    [IFluidLendingResolver.FTokenDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFTokenInternalData"
  ): TypedContractMethod<
    [fToken_: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        liquidity_: string;
        lendingFactory_: string;
        lendingRewardsRateModel_: string;
        permit2_: string;
        rebalancer_: string;
        rewardsActive_: boolean;
        liquidityBalance_: bigint;
        liquidityExchangePrice_: bigint;
        tokenExchangePrice_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFTokenRewards"
  ): TypedContractMethod<
    [fToken_: AddressLike],
    [[string, bigint] & { rewardsRateModel_: string; rewardsRate_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFTokenRewardsRateModelConfig"
  ): TypedContractMethod<
    [fToken_: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        duration_: bigint;
        startTime_: bigint;
        endTime_: bigint;
        startTvl_: bigint;
        maxRate_: bigint;
        rewardAmount_: bigint;
        initiator_: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFTokensEntireData"
  ): TypedContractMethod<
    [],
    [IFluidLendingResolver.FTokenDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPreviews"
  ): TypedContractMethod<
    [fToken_: AddressLike, assets_: BigNumberish, shares_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        previewDeposit_: bigint;
        previewMint_: bigint;
        previewWithdraw_: bigint;
        previewRedeem_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPosition"
  ): TypedContractMethod<
    [fToken_: AddressLike, user_: AddressLike],
    [IFluidLendingResolver.UserPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPositions"
  ): TypedContractMethod<
    [user_: AddressLike],
    [IFluidLendingResolver.FTokenDetailsUserPositionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLendingFactoryAuth"
  ): TypedContractMethod<[auth_: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLendingFactoryDeployer"
  ): TypedContractMethod<[deployer_: AddressLike], [boolean], "view">;

  filters: {};
}
