/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AxomAIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_desetTransaction"
      | "_isExcludedMaxTransactionAmount"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "buyAxomFee"
      | "buyDevFee"
      | "buyLiquidityFee"
      | "buyMarketingFee"
      | "buyTotalFees"
      | "deadAddress"
      | "decimals"
      | "decreaseAllowance"
      | "enableTrading"
      | "excludeFromFees"
      | "excludeFromMaxTransaction"
      | "increaseAllowance"
      | "isExcludedFromFees"
      | "limitsInEffect"
      | "maxSwapAmount"
      | "maxTransactionAmount"
      | "maxWallet"
      | "minSwapBalance"
      | "name"
      | "owner"
      | "removeLimits"
      | "renounceOwnership"
      | "rescueSwap"
      | "resetTaxAmount"
      | "sellAxomFee"
      | "sellDevFee"
      | "sellLiquidityFee"
      | "sellMarketingFee"
      | "sellTotalFees"
      | "setAutomatedMarketMakerPair"
      | "setMaxSwapAmount"
      | "setMinSwapBalance"
      | "set_desetTransactions"
      | "setdesetTransaction"
      | "swapEnabled"
      | "symbol"
      | "tokensForAxom"
      | "tokensForDev"
      | "tokensForLiquidity"
      | "tokensForMarketing"
      | "totalSupply"
      | "tradingActive"
      | "tradingActiveBlock"
      | "transfer"
      | "transferAxomFee"
      | "transferDevFee"
      | "transferFrom"
      | "transferLiquidityFee"
      | "transferMarketingFee"
      | "transferOwnership"
      | "transferTotalFees"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "updateAxomWallet"
      | "updateBuyFees"
      | "updateDevWallet"
      | "updateMarketingWallet"
      | "updateMaxAmount"
      | "updateMaxWallet"
      | "updateRescueSwap"
      | "updateSellFees"
      | "updateSwapEnabled"
      | "updateTransferFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "AxomTriggered"
      | "ExcludeFromFees"
      | "OwnerForcedSwapBack"
      | "OwnershipTransferred"
      | "SetAutomatedMarketMakerPair"
      | "SwapAndLiquify"
      | "Transfer"
      | "UpdateUniswapV2Router"
      | "axomWalletUpdated"
      | "devWalletUpdated"
      | "marketingWalletUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_desetTransaction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAxomFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyDevFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInEffect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSwapAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minSwapBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTaxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellAxomFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellDevFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSwapAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinSwapBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_desetTransactions",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setdesetTransaction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForAxom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForDev",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForMarketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActiveBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAxomFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferDevFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAxomWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDevWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketingWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRescueSwap",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_desetTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyAxomFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minSwapBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetTaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellAxomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinSwapBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_desetTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setdesetTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForAxom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActiveBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAxomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDevFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAxomWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDevWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRescueSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferFees",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AxomTriggeredEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromFeesEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerForcedSwapBackEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAutomatedMarketMakerPairEvent {
  export type InputTuple = [pair: AddressLike, value: boolean];
  export type OutputTuple = [pair: string, value: boolean];
  export interface OutputObject {
    pair: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEvent {
  export type InputTuple = [
    tokensSwapped: BigNumberish,
    ethReceived: BigNumberish,
    tokensIntoLiquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokensSwapped: bigint,
    ethReceived: bigint,
    tokensIntoLiquidity: bigint
  ];
  export interface OutputObject {
    tokensSwapped: bigint;
    ethReceived: bigint;
    tokensIntoLiquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateUniswapV2RouterEvent {
  export type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
  export type OutputTuple = [newAddress: string, oldAddress: string];
  export interface OutputObject {
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace axomWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace devWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace marketingWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AxomAI extends BaseContract {
  connect(runner?: ContractRunner | null): AxomAI;
  waitForDeployment(): Promise<this>;

  interface: AxomAIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _desetTransaction: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  _isExcludedMaxTransactionAmount: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  automatedMarketMakerPairs: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  buyAxomFee: TypedContractMethod<[], [bigint], "view">;

  buyDevFee: TypedContractMethod<[], [bigint], "view">;

  buyLiquidityFee: TypedContractMethod<[], [bigint], "view">;

  buyMarketingFee: TypedContractMethod<[], [bigint], "view">;

  buyTotalFees: TypedContractMethod<[], [bigint], "view">;

  deadAddress: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  enableTrading: TypedContractMethod<[], [void], "nonpayable">;

  excludeFromFees: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromMaxTransaction: TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isExcludedFromFees: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  limitsInEffect: TypedContractMethod<[], [boolean], "view">;

  maxSwapAmount: TypedContractMethod<[], [bigint], "view">;

  maxTransactionAmount: TypedContractMethod<[], [bigint], "view">;

  maxWallet: TypedContractMethod<[], [bigint], "view">;

  minSwapBalance: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeLimits: TypedContractMethod<[], [boolean], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rescueSwap: TypedContractMethod<[], [boolean], "view">;

  resetTaxAmount: TypedContractMethod<[], [void], "nonpayable">;

  sellAxomFee: TypedContractMethod<[], [bigint], "view">;

  sellDevFee: TypedContractMethod<[], [bigint], "view">;

  sellLiquidityFee: TypedContractMethod<[], [bigint], "view">;

  sellMarketingFee: TypedContractMethod<[], [bigint], "view">;

  sellTotalFees: TypedContractMethod<[], [bigint], "view">;

  setAutomatedMarketMakerPair: TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  setMaxSwapAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinSwapBalance: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  set_desetTransactions: TypedContractMethod<
    [_addresses: AddressLike[], _amounts: BigNumberish],
    [void],
    "nonpayable"
  >;

  setdesetTransaction: TypedContractMethod<
    [_address: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapEnabled: TypedContractMethod<[], [boolean], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokensForAxom: TypedContractMethod<[], [bigint], "view">;

  tokensForDev: TypedContractMethod<[], [bigint], "view">;

  tokensForLiquidity: TypedContractMethod<[], [bigint], "view">;

  tokensForMarketing: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingActive: TypedContractMethod<[], [boolean], "view">;

  tradingActiveBlock: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferAxomFee: TypedContractMethod<[], [bigint], "view">;

  transferDevFee: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferLiquidityFee: TypedContractMethod<[], [bigint], "view">;

  transferMarketingFee: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferTotalFees: TypedContractMethod<[], [bigint], "view">;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  updateAxomWallet: TypedContractMethod<
    [newWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBuyFees: TypedContractMethod<
    [
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _devFee: BigNumberish,
      _axomFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateDevWallet: TypedContractMethod<
    [newWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMarketingWallet: TypedContractMethod<
    [newMarketingWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMaxAmount: TypedContractMethod<
    [newNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxWallet: TypedContractMethod<
    [newNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRescueSwap: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  updateSellFees: TypedContractMethod<
    [
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _devFee: BigNumberish,
      _axomFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateSwapEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  updateTransferFees: TypedContractMethod<
    [
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _devFee: BigNumberish,
      _axomFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_desetTransaction"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_isExcludedMaxTransactionAmount"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "automatedMarketMakerPairs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyAxomFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyDevFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyLiquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyMarketingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTotalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deadAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFees"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeFromMaxTransaction"
  ): TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isExcludedFromFees"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "limitsInEffect"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxSwapAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTransactionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWallet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minSwapBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLimits"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueSwap"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "resetTaxAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellAxomFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellDevFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellLiquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellMarketingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellTotalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAutomatedMarketMakerPair"
  ): TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxSwapAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinSwapBalance"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_desetTransactions"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _amounts: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setdesetTransaction"
  ): TypedContractMethod<
    [_address: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensForAxom"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensForDev"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensForLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensForMarketing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "tradingActiveBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferAxomFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferDevFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLiquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferMarketingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferTotalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateAxomWallet"
  ): TypedContractMethod<[newWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBuyFees"
  ): TypedContractMethod<
    [
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _devFee: BigNumberish,
      _axomFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDevWallet"
  ): TypedContractMethod<[newWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMarketingWallet"
  ): TypedContractMethod<
    [newMarketingWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMaxAmount"
  ): TypedContractMethod<[newNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxWallet"
  ): TypedContractMethod<[newNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRescueSwap"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSellFees"
  ): TypedContractMethod<
    [
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _devFee: BigNumberish,
      _axomFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSwapEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTransferFees"
  ): TypedContractMethod<
    [
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _devFee: BigNumberish,
      _axomFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AxomTriggered"
  ): TypedContractEvent<
    AxomTriggeredEvent.InputTuple,
    AxomTriggeredEvent.OutputTuple,
    AxomTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromFees"
  ): TypedContractEvent<
    ExcludeFromFeesEvent.InputTuple,
    ExcludeFromFeesEvent.OutputTuple,
    ExcludeFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "OwnerForcedSwapBack"
  ): TypedContractEvent<
    OwnerForcedSwapBackEvent.InputTuple,
    OwnerForcedSwapBackEvent.OutputTuple,
    OwnerForcedSwapBackEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetAutomatedMarketMakerPair"
  ): TypedContractEvent<
    SetAutomatedMarketMakerPairEvent.InputTuple,
    SetAutomatedMarketMakerPairEvent.OutputTuple,
    SetAutomatedMarketMakerPairEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquify"
  ): TypedContractEvent<
    SwapAndLiquifyEvent.InputTuple,
    SwapAndLiquifyEvent.OutputTuple,
    SwapAndLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateUniswapV2Router"
  ): TypedContractEvent<
    UpdateUniswapV2RouterEvent.InputTuple,
    UpdateUniswapV2RouterEvent.OutputTuple,
    UpdateUniswapV2RouterEvent.OutputObject
  >;
  getEvent(
    key: "axomWalletUpdated"
  ): TypedContractEvent<
    axomWalletUpdatedEvent.InputTuple,
    axomWalletUpdatedEvent.OutputTuple,
    axomWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "devWalletUpdated"
  ): TypedContractEvent<
    devWalletUpdatedEvent.InputTuple,
    devWalletUpdatedEvent.OutputTuple,
    devWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "marketingWalletUpdated"
  ): TypedContractEvent<
    marketingWalletUpdatedEvent.InputTuple,
    marketingWalletUpdatedEvent.OutputTuple,
    marketingWalletUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AxomTriggered(uint256)": TypedContractEvent<
      AxomTriggeredEvent.InputTuple,
      AxomTriggeredEvent.OutputTuple,
      AxomTriggeredEvent.OutputObject
    >;
    AxomTriggered: TypedContractEvent<
      AxomTriggeredEvent.InputTuple,
      AxomTriggeredEvent.OutputTuple,
      AxomTriggeredEvent.OutputObject
    >;

    "ExcludeFromFees(address,bool)": TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;
    ExcludeFromFees: TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;

    "OwnerForcedSwapBack(uint256)": TypedContractEvent<
      OwnerForcedSwapBackEvent.InputTuple,
      OwnerForcedSwapBackEvent.OutputTuple,
      OwnerForcedSwapBackEvent.OutputObject
    >;
    OwnerForcedSwapBack: TypedContractEvent<
      OwnerForcedSwapBackEvent.InputTuple,
      OwnerForcedSwapBackEvent.OutputTuple,
      OwnerForcedSwapBackEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetAutomatedMarketMakerPair(address,bool)": TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;
    SetAutomatedMarketMakerPair: TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;

    "SwapAndLiquify(uint256,uint256,uint256)": TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;
    SwapAndLiquify: TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateUniswapV2Router(address,address)": TypedContractEvent<
      UpdateUniswapV2RouterEvent.InputTuple,
      UpdateUniswapV2RouterEvent.OutputTuple,
      UpdateUniswapV2RouterEvent.OutputObject
    >;
    UpdateUniswapV2Router: TypedContractEvent<
      UpdateUniswapV2RouterEvent.InputTuple,
      UpdateUniswapV2RouterEvent.OutputTuple,
      UpdateUniswapV2RouterEvent.OutputObject
    >;

    "axomWalletUpdated(address,address)": TypedContractEvent<
      axomWalletUpdatedEvent.InputTuple,
      axomWalletUpdatedEvent.OutputTuple,
      axomWalletUpdatedEvent.OutputObject
    >;
    axomWalletUpdated: TypedContractEvent<
      axomWalletUpdatedEvent.InputTuple,
      axomWalletUpdatedEvent.OutputTuple,
      axomWalletUpdatedEvent.OutputObject
    >;

    "devWalletUpdated(address,address)": TypedContractEvent<
      devWalletUpdatedEvent.InputTuple,
      devWalletUpdatedEvent.OutputTuple,
      devWalletUpdatedEvent.OutputObject
    >;
    devWalletUpdated: TypedContractEvent<
      devWalletUpdatedEvent.InputTuple,
      devWalletUpdatedEvent.OutputTuple,
      devWalletUpdatedEvent.OutputObject
    >;

    "marketingWalletUpdated(address,address)": TypedContractEvent<
      marketingWalletUpdatedEvent.InputTuple,
      marketingWalletUpdatedEvent.OutputTuple,
      marketingWalletUpdatedEvent.OutputObject
    >;
    marketingWalletUpdated: TypedContractEvent<
      marketingWalletUpdatedEvent.InputTuple,
      marketingWalletUpdatedEvent.OutputTuple,
      marketingWalletUpdatedEvent.OutputObject
    >;
  };
}
