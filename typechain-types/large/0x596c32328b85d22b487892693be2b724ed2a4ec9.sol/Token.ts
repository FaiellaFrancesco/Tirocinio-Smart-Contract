/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TokenInterface extends utils.Interface {
  functions: {
    "MAX()": FunctionFragment;
    "_buyDestroyFee()": FunctionFragment;
    "_buyLiquidityFee()": FunctionFragment;
    "_buyMarketingFee()": FunctionFragment;
    "_buyTeamFee()": FunctionFragment;
    "_isBlacklisted(address)": FunctionFragment;
    "_liquidityShare()": FunctionFragment;
    "_marketingShare()": FunctionFragment;
    "_maxDestroyAmount()": FunctionFragment;
    "_maxTxAmount()": FunctionFragment;
    "_owner()": FunctionFragment;
    "_sellDestroyFee()": FunctionFragment;
    "_sellLiquidityFee()": FunctionFragment;
    "_sellMarketingFee()": FunctionFragment;
    "_sellTeamFee()": FunctionFragment;
    "_tFeeTotal()": FunctionFragment;
    "_teamShare()": FunctionFragment;
    "_totalDistributionShares()": FunctionFragment;
    "_totalTaxIfBuying()": FunctionFragment;
    "_totalTaxIfSelling()": FunctionFragment;
    "_walletMax()": FunctionFragment;
    "airdropNumbs()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "antiSYNC()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkWalletLimit()": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableDisableWalletLimit(bool)": FunctionFragment;
    "enableOffTrade()": FunctionFragment;
    "excludeMultipleAccountsFromFees(address[],bool)": FunctionFragment;
    "excludeMultipleTxLimit(address[],bool)": FunctionFragment;
    "first()": FunctionFragment;
    "getCirculatingSupply()": FunctionFragment;
    "getTime()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "isMarketPair(address)": FunctionFragment;
    "isTxLimitExempt(address)": FunctionFragment;
    "isWalletLimitExempt(address)": FunctionFragment;
    "kill()": FunctionFragment;
    "launch()": FunctionFragment;
    "marketingWalletAddress()": FunctionFragment;
    "minimumTokensBeforeSwapAmount()": FunctionFragment;
    "multipleBotlistAddress(address[],bool)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "setAirdropNumbs(uint256)": FunctionFragment;
    "setAntiSYNCEnable(bool)": FunctionFragment;
    "setBuyTaxes(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setDistributionSettings(uint256,uint256,uint256)": FunctionFragment;
    "setIsExcludedFromFee(address,bool)": FunctionFragment;
    "setIsTxLimitExempt(address,bool)": FunctionFragment;
    "setIsWalletLimitExempt(address,bool)": FunctionFragment;
    "setKing(uint256)": FunctionFragment;
    "setMarketPairStatus(address,bool)": FunctionFragment;
    "setMarketingWalletAddress(address)": FunctionFragment;
    "setMaxDesAmount(uint256)": FunctionFragment;
    "setMaxTxAmount(uint256)": FunctionFragment;
    "setNumTokensBeforeSwap(uint256)": FunctionFragment;
    "setSelTaxes(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setSwapAndLiquifyByLimitOnly(bool)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "setTeamWalletAddress(address)": FunctionFragment;
    "setWalletLimit(uint256)": FunctionFragment;
    "startTradeBlock()": FunctionFragment;
    "swapAndLiquifyByLimitOnly()": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "teamWalletAddress()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapPair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "version()": FunctionFragment;
    "waiveOwnership()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX"
      | "_buyDestroyFee"
      | "_buyLiquidityFee"
      | "_buyMarketingFee"
      | "_buyTeamFee"
      | "_isBlacklisted"
      | "_liquidityShare"
      | "_marketingShare"
      | "_maxDestroyAmount"
      | "_maxTxAmount"
      | "_owner"
      | "_sellDestroyFee"
      | "_sellLiquidityFee"
      | "_sellMarketingFee"
      | "_sellTeamFee"
      | "_tFeeTotal"
      | "_teamShare"
      | "_totalDistributionShares"
      | "_totalTaxIfBuying"
      | "_totalTaxIfSelling"
      | "_walletMax"
      | "airdropNumbs"
      | "allowance"
      | "antiSYNC"
      | "approve"
      | "balanceOf"
      | "checkWalletLimit"
      | "deadAddress"
      | "decimals"
      | "decreaseAllowance"
      | "enableDisableWalletLimit"
      | "enableOffTrade"
      | "excludeMultipleAccountsFromFees"
      | "excludeMultipleTxLimit"
      | "first"
      | "getCirculatingSupply"
      | "getTime"
      | "increaseAllowance"
      | "isExcludedFromFee"
      | "isMarketPair"
      | "isTxLimitExempt"
      | "isWalletLimitExempt"
      | "kill"
      | "launch"
      | "marketingWalletAddress"
      | "minimumTokensBeforeSwapAmount"
      | "multipleBotlistAddress"
      | "name"
      | "owner"
      | "setAirdropNumbs"
      | "setAntiSYNCEnable"
      | "setBuyTaxes"
      | "setDistributionSettings"
      | "setIsExcludedFromFee"
      | "setIsTxLimitExempt"
      | "setIsWalletLimitExempt"
      | "setKing"
      | "setMarketPairStatus"
      | "setMarketingWalletAddress"
      | "setMaxDesAmount"
      | "setMaxTxAmount"
      | "setNumTokensBeforeSwap"
      | "setSelTaxes"
      | "setSwapAndLiquifyByLimitOnly"
      | "setSwapAndLiquifyEnabled"
      | "setTeamWalletAddress"
      | "setWalletLimit"
      | "startTradeBlock"
      | "swapAndLiquifyByLimitOnly"
      | "swapAndLiquifyEnabled"
      | "symbol"
      | "teamWalletAddress"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapPair"
      | "uniswapV2Router"
      | "version"
      | "waiveOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_buyDestroyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_buyMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_buyTeamFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isBlacklisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidityShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_marketingShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxDestroyAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_sellDestroyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_sellMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_sellTeamFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tFeeTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_teamShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalDistributionShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalTaxIfBuying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalTaxIfSelling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_walletMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropNumbs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "antiSYNC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWalletLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableDisableWalletLimit",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableOffTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeMultipleAccountsFromFees",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeMultipleTxLimit",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "first", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTxLimitExempt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletLimitExempt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(functionFragment: "launch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketingWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTokensBeforeSwapAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multipleBotlistAddress",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAirdropNumbs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAntiSYNCEnable",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyTaxes",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionSettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsExcludedFromFee",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTxLimitExempt",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWalletLimitExempt",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPairStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWalletAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDesAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumTokensBeforeSwap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSelTaxes",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyByLimitOnly",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamWalletAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startTradeBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyByLimitOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "waiveOwnership",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_buyDestroyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_buyMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_buyTeamFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidityShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_marketingShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxDestroyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_sellDestroyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_sellMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_sellTeamFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_tFeeTotal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_teamShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_totalDistributionShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalTaxIfBuying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalTaxIfSelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_walletMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "airdropNumbs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "antiSYNC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDisableWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableOffTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeMultipleAccountsFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeMultipleTxLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "first", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTxLimitExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletLimitExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTokensBeforeSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multipleBotlistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropNumbs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAntiSYNCEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTxLimitExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWalletLimitExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumTokensBeforeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSelTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyByLimitOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTradeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyByLimitOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "waiveOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "SwapAndLiquifyEnabledUpdated(bool)": EventFragment;
    "SwapETHForTokens(uint256,address[])": EventFragment;
    "SwapTokensForETH(uint256,address[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapAndLiquifyEnabledUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapETHForTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapTokensForETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapAndLiquifyEventObject {
  tokensSwapped: BigNumber;
  ethReceived: BigNumber;
  tokensIntoLiqudity: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface SwapAndLiquifyEnabledUpdatedEventObject {
  enabled: boolean;
}
export type SwapAndLiquifyEnabledUpdatedEvent = TypedEvent<
  [boolean],
  SwapAndLiquifyEnabledUpdatedEventObject
>;

export type SwapAndLiquifyEnabledUpdatedEventFilter =
  TypedEventFilter<SwapAndLiquifyEnabledUpdatedEvent>;

export interface SwapETHForTokensEventObject {
  amountIn: BigNumber;
  path: string[];
}
export type SwapETHForTokensEvent = TypedEvent<
  [BigNumber, string[]],
  SwapETHForTokensEventObject
>;

export type SwapETHForTokensEventFilter =
  TypedEventFilter<SwapETHForTokensEvent>;

export interface SwapTokensForETHEventObject {
  amountIn: BigNumber;
  path: string[];
}
export type SwapTokensForETHEvent = TypedEvent<
  [BigNumber, string[]],
  SwapTokensForETHEventObject
>;

export type SwapTokensForETHEventFilter =
  TypedEventFilter<SwapTokensForETHEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Token extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    _buyDestroyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _buyLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _buyMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _buyTeamFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isBlacklisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _liquidityShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    _marketingShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxDestroyAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    _sellDestroyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _sellLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _sellMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _sellTeamFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _tFeeTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    _teamShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalDistributionShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalTaxIfBuying(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalTaxIfSelling(overrides?: CallOverrides): Promise<[BigNumber]>;

    _walletMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdropNumbs(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    antiSYNC(overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkWalletLimit(overrides?: CallOverrides): Promise<[boolean]>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableDisableWalletLimit(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableOffTrade(overrides?: CallOverrides): Promise<[boolean]>;

    excludeMultipleAccountsFromFees(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeMultipleTxLimit(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    first(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTxLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWalletLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kill(overrides?: CallOverrides): Promise<[BigNumber]>;

    launch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketingWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    minimumTokensBeforeSwapAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multipleBotlistAddress(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAirdropNumbs(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAntiSYNCEnable(
      s: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuyTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDistributionSettings(
      newLiquidityShare: PromiseOrValue<BigNumberish>,
      newMarketingShare: PromiseOrValue<BigNumberish>,
      newTeamShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsExcludedFromFee(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsTxLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsWalletLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKing(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketPairStatus(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketingWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDesAmount(
      maxDestroy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTxAmount(
      maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNumTokensBeforeSwap(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSelTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyByLimitOnly(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTeamWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWalletLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTradeBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapAndLiquifyByLimitOnly(overrides?: CallOverrides): Promise<[boolean]>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    teamWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapPair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    waiveOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX(overrides?: CallOverrides): Promise<BigNumber>;

  _buyDestroyFee(overrides?: CallOverrides): Promise<BigNumber>;

  _buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  _buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  _buyTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

  _isBlacklisted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _liquidityShare(overrides?: CallOverrides): Promise<BigNumber>;

  _marketingShare(overrides?: CallOverrides): Promise<BigNumber>;

  _maxDestroyAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _owner(overrides?: CallOverrides): Promise<string>;

  _sellDestroyFee(overrides?: CallOverrides): Promise<BigNumber>;

  _sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  _sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  _sellTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

  _tFeeTotal(overrides?: CallOverrides): Promise<BigNumber>;

  _teamShare(overrides?: CallOverrides): Promise<BigNumber>;

  _totalDistributionShares(overrides?: CallOverrides): Promise<BigNumber>;

  _totalTaxIfBuying(overrides?: CallOverrides): Promise<BigNumber>;

  _totalTaxIfSelling(overrides?: CallOverrides): Promise<BigNumber>;

  _walletMax(overrides?: CallOverrides): Promise<BigNumber>;

  airdropNumbs(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  antiSYNC(overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkWalletLimit(overrides?: CallOverrides): Promise<boolean>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableDisableWalletLimit(
    newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableOffTrade(overrides?: CallOverrides): Promise<boolean>;

  excludeMultipleAccountsFromFees(
    accounts: PromiseOrValue<string>[],
    excluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeMultipleTxLimit(
    accounts: PromiseOrValue<string>[],
    excluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  first(overrides?: CallOverrides): Promise<BigNumber>;

  getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getTime(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFee(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketPair(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTxLimitExempt(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWalletLimitExempt(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kill(overrides?: CallOverrides): Promise<BigNumber>;

  launch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketingWalletAddress(overrides?: CallOverrides): Promise<string>;

  minimumTokensBeforeSwapAmount(overrides?: CallOverrides): Promise<BigNumber>;

  multipleBotlistAddress(
    accounts: PromiseOrValue<string>[],
    excluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAirdropNumbs(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAntiSYNCEnable(
    s: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuyTaxes(
    newLiquidityTax: PromiseOrValue<BigNumberish>,
    newMarketingTax: PromiseOrValue<BigNumberish>,
    newTeamTax: PromiseOrValue<BigNumberish>,
    newDestroyTax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDistributionSettings(
    newLiquidityShare: PromiseOrValue<BigNumberish>,
    newMarketingShare: PromiseOrValue<BigNumberish>,
    newTeamShare: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsExcludedFromFee(
    account: PromiseOrValue<string>,
    newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsTxLimitExempt(
    holder: PromiseOrValue<string>,
    exempt: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsWalletLimitExempt(
    holder: PromiseOrValue<string>,
    exempt: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKing(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketPairStatus(
    account: PromiseOrValue<string>,
    newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketingWalletAddress(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDesAmount(
    maxDestroy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTxAmount(
    maxTxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNumTokensBeforeSwap(
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSelTaxes(
    newLiquidityTax: PromiseOrValue<BigNumberish>,
    newMarketingTax: PromiseOrValue<BigNumberish>,
    newTeamTax: PromiseOrValue<BigNumberish>,
    newDestroyTax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyByLimitOnly(
    newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTeamWalletAddress(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWalletLimit(
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTradeBlock(overrides?: CallOverrides): Promise<BigNumber>;

  swapAndLiquifyByLimitOnly(overrides?: CallOverrides): Promise<boolean>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  teamWalletAddress(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapPair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  waiveOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    _buyDestroyFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isBlacklisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _liquidityShare(overrides?: CallOverrides): Promise<BigNumber>;

    _marketingShare(overrides?: CallOverrides): Promise<BigNumber>;

    _maxDestroyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<string>;

    _sellDestroyFee(overrides?: CallOverrides): Promise<BigNumber>;

    _sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    _sellTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _tFeeTotal(overrides?: CallOverrides): Promise<BigNumber>;

    _teamShare(overrides?: CallOverrides): Promise<BigNumber>;

    _totalDistributionShares(overrides?: CallOverrides): Promise<BigNumber>;

    _totalTaxIfBuying(overrides?: CallOverrides): Promise<BigNumber>;

    _totalTaxIfSelling(overrides?: CallOverrides): Promise<BigNumber>;

    _walletMax(overrides?: CallOverrides): Promise<BigNumber>;

    airdropNumbs(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    antiSYNC(overrides?: CallOverrides): Promise<boolean>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkWalletLimit(overrides?: CallOverrides): Promise<boolean>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableDisableWalletLimit(
      newValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableOffTrade(overrides?: CallOverrides): Promise<boolean>;

    excludeMultipleAccountsFromFees(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeMultipleTxLimit(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    first(overrides?: CallOverrides): Promise<BigNumber>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTxLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWalletLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kill(overrides?: CallOverrides): Promise<BigNumber>;

    launch(overrides?: CallOverrides): Promise<void>;

    marketingWalletAddress(overrides?: CallOverrides): Promise<string>;

    minimumTokensBeforeSwapAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multipleBotlistAddress(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAirdropNumbs(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAntiSYNCEnable(
      s: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributionSettings(
      newLiquidityShare: PromiseOrValue<BigNumberish>,
      newMarketingShare: PromiseOrValue<BigNumberish>,
      newTeamShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsExcludedFromFee(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTxLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsWalletLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKing(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketPairStatus(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDesAmount(
      maxDestroy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxAmount(
      maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNumTokensBeforeSwap(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSelTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyByLimitOnly(
      newValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWalletLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTradeBlock(overrides?: CallOverrides): Promise<BigNumber>;

    swapAndLiquifyByLimitOnly(overrides?: CallOverrides): Promise<boolean>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    teamWalletAddress(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapPair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    waiveOwnership(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): SwapAndLiquifyEventFilter;

    "SwapAndLiquifyEnabledUpdated(bool)"(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;
    SwapAndLiquifyEnabledUpdated(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;

    "SwapETHForTokens(uint256,address[])"(
      amountIn?: null,
      path?: null
    ): SwapETHForTokensEventFilter;
    SwapETHForTokens(amountIn?: null, path?: null): SwapETHForTokensEventFilter;

    "SwapTokensForETH(uint256,address[])"(
      amountIn?: null,
      path?: null
    ): SwapTokensForETHEventFilter;
    SwapTokensForETH(amountIn?: null, path?: null): SwapTokensForETHEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    _buyDestroyFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isBlacklisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _liquidityShare(overrides?: CallOverrides): Promise<BigNumber>;

    _marketingShare(overrides?: CallOverrides): Promise<BigNumber>;

    _maxDestroyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    _sellDestroyFee(overrides?: CallOverrides): Promise<BigNumber>;

    _sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    _sellTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _tFeeTotal(overrides?: CallOverrides): Promise<BigNumber>;

    _teamShare(overrides?: CallOverrides): Promise<BigNumber>;

    _totalDistributionShares(overrides?: CallOverrides): Promise<BigNumber>;

    _totalTaxIfBuying(overrides?: CallOverrides): Promise<BigNumber>;

    _totalTaxIfSelling(overrides?: CallOverrides): Promise<BigNumber>;

    _walletMax(overrides?: CallOverrides): Promise<BigNumber>;

    airdropNumbs(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    antiSYNC(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkWalletLimit(overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableDisableWalletLimit(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableOffTrade(overrides?: CallOverrides): Promise<BigNumber>;

    excludeMultipleAccountsFromFees(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeMultipleTxLimit(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    first(overrides?: CallOverrides): Promise<BigNumber>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isExcludedFromFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTxLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWalletLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kill(overrides?: CallOverrides): Promise<BigNumber>;

    launch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketingWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTokensBeforeSwapAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multipleBotlistAddress(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAirdropNumbs(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAntiSYNCEnable(
      s: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuyTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDistributionSettings(
      newLiquidityShare: PromiseOrValue<BigNumberish>,
      newMarketingShare: PromiseOrValue<BigNumberish>,
      newTeamShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsExcludedFromFee(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsTxLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsWalletLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKing(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketPairStatus(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketingWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDesAmount(
      maxDestroy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTxAmount(
      maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNumTokensBeforeSwap(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSelTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyByLimitOnly(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTeamWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWalletLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTradeBlock(overrides?: CallOverrides): Promise<BigNumber>;

    swapAndLiquifyByLimitOnly(overrides?: CallOverrides): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    teamWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapPair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    waiveOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _buyDestroyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _buyLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _buyMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _buyTeamFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isBlacklisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _liquidityShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _marketingShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxDestroyAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _sellDestroyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _sellLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _sellMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _sellTeamFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tFeeTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _teamShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalDistributionShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _totalTaxIfBuying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalTaxIfSelling(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _walletMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdropNumbs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    antiSYNC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkWalletLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableDisableWalletLimit(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableOffTrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeMultipleAccountsFromFees(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeMultipleTxLimit(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    first(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTxLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWalletLimitExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kill(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketingWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumTokensBeforeSwapAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multipleBotlistAddress(
      accounts: PromiseOrValue<string>[],
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAirdropNumbs(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAntiSYNCEnable(
      s: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuyTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionSettings(
      newLiquidityShare: PromiseOrValue<BigNumberish>,
      newMarketingShare: PromiseOrValue<BigNumberish>,
      newTeamShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsExcludedFromFee(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsTxLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsWalletLimitExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKing(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPairStatus(
      account: PromiseOrValue<string>,
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDesAmount(
      maxDestroy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxAmount(
      maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNumTokensBeforeSwap(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSelTaxes(
      newLiquidityTax: PromiseOrValue<BigNumberish>,
      newMarketingTax: PromiseOrValue<BigNumberish>,
      newTeamTax: PromiseOrValue<BigNumberish>,
      newDestroyTax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyByLimitOnly(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTeamWalletAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWalletLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTradeBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapAndLiquifyByLimitOnly(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamWalletAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waiveOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
