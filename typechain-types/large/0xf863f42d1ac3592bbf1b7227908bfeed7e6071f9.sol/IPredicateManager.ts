/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SignatureWithSaltAndExpiryStruct = {
  signature: BytesLike;
  salt: BytesLike;
  expiry: BigNumberish;
};

export type SignatureWithSaltAndExpiryStructOutput = [
  signature: string,
  salt: string,
  expiry: bigint
] & { signature: string; salt: string; expiry: bigint };

export type TaskStruct = {
  taskId: string;
  msgSender: AddressLike;
  target: AddressLike;
  value: BigNumberish;
  encodedSigAndArgs: BytesLike;
  policyID: string;
  quorumThresholdCount: BigNumberish;
  expireByBlockNumber: BigNumberish;
};

export type TaskStructOutput = [
  taskId: string,
  msgSender: string,
  target: string,
  value: bigint,
  encodedSigAndArgs: string,
  policyID: string,
  quorumThresholdCount: bigint,
  expireByBlockNumber: bigint
] & {
  taskId: string;
  msgSender: string;
  target: string;
  value: bigint;
  encodedSigAndArgs: string;
  policyID: string;
  quorumThresholdCount: bigint;
  expireByBlockNumber: bigint;
};

export interface IPredicateManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStrategy"
      | "deployPolicy"
      | "deploySocialGraph"
      | "deregisterOperatorFromAVS"
      | "getDeployedPolicies"
      | "getOperatorRestakedStrategies"
      | "getRestakeableStrategies"
      | "getSocialGraphIDs"
      | "registerOperatorToAVS"
      | "removePolicy"
      | "removeStrategy"
      | "rotatePredicateSigningKey"
      | "setMetadataURI"
      | "setPolicy"
      | "validateSignatures"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPolicy",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySocialGraph",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperatorFromAVS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedPolicies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorRestakedStrategies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRestakeableStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSocialGraphIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperatorToAVS",
    values: [AddressLike, SignatureWithSaltAndExpiryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rotatePredicateSigningKey",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataURI",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setPolicy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validateSignatures",
    values: [TaskStruct, AddressLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySocialGraph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperatorFromAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorRestakedStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRestakeableStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSocialGraphIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorToAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rotatePredicateSigningKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateSignatures",
    data: BytesLike
  ): Result;
}

export interface IPredicateManager extends BaseContract {
  connect(runner?: ContractRunner | null): IPredicateManager;
  waitForDeployment(): Promise<this>;

  interface: IPredicateManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStrategy: TypedContractMethod<
    [_strategy: AddressLike, quorumNumber: BigNumberish, index: BigNumberish],
    [void],
    "nonpayable"
  >;

  deployPolicy: TypedContractMethod<
    [_policyID: string, _policy: string, _quorumThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  deploySocialGraph: TypedContractMethod<
    [_socialGraphID: string, _socialGraphConfig: string],
    [void],
    "nonpayable"
  >;

  deregisterOperatorFromAVS: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  getDeployedPolicies: TypedContractMethod<[], [string[]], "view">;

  getOperatorRestakedStrategies: TypedContractMethod<
    [operator: AddressLike],
    [string[]],
    "view"
  >;

  getRestakeableStrategies: TypedContractMethod<[], [string[]], "view">;

  getSocialGraphIDs: TypedContractMethod<[], [string[]], "view">;

  registerOperatorToAVS: TypedContractMethod<
    [
      operatorSigningKey: AddressLike,
      operatorSignature: SignatureWithSaltAndExpiryStruct
    ],
    [void],
    "nonpayable"
  >;

  removePolicy: TypedContractMethod<[policyID: string], [void], "nonpayable">;

  removeStrategy: TypedContractMethod<
    [_strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  rotatePredicateSigningKey: TypedContractMethod<
    [_oldSigningKey: AddressLike, _newSigningKey: AddressLike],
    [void],
    "nonpayable"
  >;

  setMetadataURI: TypedContractMethod<
    [_metadataURI: string],
    [void],
    "nonpayable"
  >;

  setPolicy: TypedContractMethod<[policyID: string], [void], "nonpayable">;

  validateSignatures: TypedContractMethod<
    [
      _task: TaskStruct,
      signerAddresses: AddressLike[],
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<
    [_strategy: AddressLike, quorumNumber: BigNumberish, index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployPolicy"
  ): TypedContractMethod<
    [_policyID: string, _policy: string, _quorumThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deploySocialGraph"
  ): TypedContractMethod<
    [_socialGraphID: string, _socialGraphConfig: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deregisterOperatorFromAVS"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDeployedPolicies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOperatorRestakedStrategies"
  ): TypedContractMethod<[operator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRestakeableStrategies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSocialGraphIDs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "registerOperatorToAVS"
  ): TypedContractMethod<
    [
      operatorSigningKey: AddressLike,
      operatorSignature: SignatureWithSaltAndExpiryStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removePolicy"
  ): TypedContractMethod<[policyID: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeStrategy"
  ): TypedContractMethod<[_strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rotatePredicateSigningKey"
  ): TypedContractMethod<
    [_oldSigningKey: AddressLike, _newSigningKey: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetadataURI"
  ): TypedContractMethod<[_metadataURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPolicy"
  ): TypedContractMethod<[policyID: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateSignatures"
  ): TypedContractMethod<
    [
      _task: TaskStruct,
      signerAddresses: AddressLike[],
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
