/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type SignatureWithSaltAndExpiryStruct = {
  signature: PromiseOrValue<BytesLike>;
  salt: PromiseOrValue<BytesLike>;
  expiry: PromiseOrValue<BigNumberish>;
};

export type SignatureWithSaltAndExpiryStructOutput = [
  string,
  string,
  BigNumber
] & { signature: string; salt: string; expiry: BigNumber };

export type TaskStruct = {
  taskId: PromiseOrValue<string>;
  msgSender: PromiseOrValue<string>;
  target: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  encodedSigAndArgs: PromiseOrValue<BytesLike>;
  policyID: PromiseOrValue<string>;
  quorumThresholdCount: PromiseOrValue<BigNumberish>;
  expireByBlockNumber: PromiseOrValue<BigNumberish>;
};

export type TaskStructOutput = [
  string,
  string,
  string,
  BigNumber,
  string,
  string,
  number,
  BigNumber
] & {
  taskId: string;
  msgSender: string;
  target: string;
  value: BigNumber;
  encodedSigAndArgs: string;
  policyID: string;
  quorumThresholdCount: number;
  expireByBlockNumber: BigNumber;
};

export interface IPredicateManagerInterface extends utils.Interface {
  functions: {
    "addStrategy(address,uint8,uint256)": FunctionFragment;
    "deployPolicy(string,string,uint256)": FunctionFragment;
    "deploySocialGraph(string,string)": FunctionFragment;
    "deregisterOperatorFromAVS(address)": FunctionFragment;
    "getDeployedPolicies()": FunctionFragment;
    "getOperatorRestakedStrategies(address)": FunctionFragment;
    "getRestakeableStrategies()": FunctionFragment;
    "getSocialGraphIDs()": FunctionFragment;
    "registerOperatorToAVS(address,(bytes,bytes32,uint256))": FunctionFragment;
    "removePolicy(string)": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "rotatePredicateSigningKey(address,address)": FunctionFragment;
    "setMetadataURI(string)": FunctionFragment;
    "setPolicy(string)": FunctionFragment;
    "validateSignatures((string,address,address,uint256,bytes,string,uint32,uint256),address[],bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addStrategy"
      | "deployPolicy"
      | "deploySocialGraph"
      | "deregisterOperatorFromAVS"
      | "getDeployedPolicies"
      | "getOperatorRestakedStrategies"
      | "getRestakeableStrategies"
      | "getSocialGraphIDs"
      | "registerOperatorToAVS"
      | "removePolicy"
      | "removeStrategy"
      | "rotatePredicateSigningKey"
      | "setMetadataURI"
      | "setPolicy"
      | "validateSignatures"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPolicy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySocialGraph",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperatorFromAVS",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedPolicies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorRestakedStrategies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRestakeableStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSocialGraphIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperatorToAVS",
    values: [PromiseOrValue<string>, SignatureWithSaltAndExpiryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rotatePredicateSigningKey",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPolicy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignatures",
    values: [TaskStruct, PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySocialGraph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperatorFromAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorRestakedStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRestakeableStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSocialGraphIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorToAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rotatePredicateSigningKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateSignatures",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPredicateManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPredicateManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStrategy(
      _strategy: PromiseOrValue<string>,
      quorumNumber: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployPolicy(
      _policyID: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _quorumThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deploySocialGraph(
      _socialGraphID: PromiseOrValue<string>,
      _socialGraphConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deregisterOperatorFromAVS(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeployedPolicies(overrides?: CallOverrides): Promise<[string[]]>;

    getOperatorRestakedStrategies(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<[string[]]>;

    getSocialGraphIDs(overrides?: CallOverrides): Promise<[string[]]>;

    registerOperatorToAVS(
      operatorSigningKey: PromiseOrValue<string>,
      operatorSignature: SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePolicy(
      policyID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rotatePredicateSigningKey(
      _oldSigningKey: PromiseOrValue<string>,
      _newSigningKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPolicy(
      policyID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateSignatures(
      _task: TaskStruct,
      signerAddresses: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addStrategy(
    _strategy: PromiseOrValue<string>,
    quorumNumber: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployPolicy(
    _policyID: PromiseOrValue<string>,
    _policy: PromiseOrValue<string>,
    _quorumThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deploySocialGraph(
    _socialGraphID: PromiseOrValue<string>,
    _socialGraphConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deregisterOperatorFromAVS(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeployedPolicies(overrides?: CallOverrides): Promise<string[]>;

  getOperatorRestakedStrategies(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRestakeableStrategies(overrides?: CallOverrides): Promise<string[]>;

  getSocialGraphIDs(overrides?: CallOverrides): Promise<string[]>;

  registerOperatorToAVS(
    operatorSigningKey: PromiseOrValue<string>,
    operatorSignature: SignatureWithSaltAndExpiryStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePolicy(
    policyID: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeStrategy(
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rotatePredicateSigningKey(
    _oldSigningKey: PromiseOrValue<string>,
    _newSigningKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetadataURI(
    _metadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPolicy(
    policyID: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateSignatures(
    _task: TaskStruct,
    signerAddresses: PromiseOrValue<string>[],
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStrategy(
      _strategy: PromiseOrValue<string>,
      quorumNumber: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployPolicy(
      _policyID: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _quorumThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deploySocialGraph(
      _socialGraphID: PromiseOrValue<string>,
      _socialGraphConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterOperatorFromAVS(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeployedPolicies(overrides?: CallOverrides): Promise<string[]>;

    getOperatorRestakedStrategies(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<string[]>;

    getSocialGraphIDs(overrides?: CallOverrides): Promise<string[]>;

    registerOperatorToAVS(
      operatorSigningKey: PromiseOrValue<string>,
      operatorSignature: SignatureWithSaltAndExpiryStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removePolicy(
      policyID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rotatePredicateSigningKey(
      _oldSigningKey: PromiseOrValue<string>,
      _newSigningKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPolicy(
      policyID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateSignatures(
      _task: TaskStruct,
      signerAddresses: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addStrategy(
      _strategy: PromiseOrValue<string>,
      quorumNumber: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployPolicy(
      _policyID: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _quorumThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deploySocialGraph(
      _socialGraphID: PromiseOrValue<string>,
      _socialGraphConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deregisterOperatorFromAVS(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeployedPolicies(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorRestakedStrategies(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    getSocialGraphIDs(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperatorToAVS(
      operatorSigningKey: PromiseOrValue<string>,
      operatorSignature: SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePolicy(
      policyID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rotatePredicateSigningKey(
      _oldSigningKey: PromiseOrValue<string>,
      _newSigningKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPolicy(
      policyID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateSignatures(
      _task: TaskStruct,
      signerAddresses: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStrategy(
      _strategy: PromiseOrValue<string>,
      quorumNumber: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployPolicy(
      _policyID: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _quorumThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deploySocialGraph(
      _socialGraphID: PromiseOrValue<string>,
      _socialGraphConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deregisterOperatorFromAVS(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeployedPolicies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorRestakedStrategies(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRestakeableStrategies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSocialGraphIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperatorToAVS(
      operatorSigningKey: PromiseOrValue<string>,
      operatorSignature: SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePolicy(
      policyID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rotatePredicateSigningKey(
      _oldSigningKey: PromiseOrValue<string>,
      _newSigningKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPolicy(
      policyID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateSignatures(
      _task: TaskStruct,
      signerAddresses: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
