/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SWANInterface extends utils.Interface {
  functions: {
    "TradingOpen()": FunctionFragment;
    "_maxTxAmount()": FunctionFragment;
    "_maxWalletToken()": FunctionFragment;
    "_owner()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveMax(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkRatio(uint256,uint256)": FunctionFragment;
    "clearStuckToken(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "manualSend()": FunctionFragment;
    "maxWalletRule(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pair()": FunctionFragment;
    "reduceFee()": FunctionFragment;
    "removeLimits()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setParameters(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setStructure(uint256,uint256,uint256)": FunctionFragment;
    "setSwapBackSettings(bool,uint256)": FunctionFragment;
    "setWallets(address,address,address,address,address)": FunctionFragment;
    "showBacking(uint256)": FunctionFragment;
    "showSupply()": FunctionFragment;
    "startTrading()": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapThreshold()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalFee()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TradingOpen"
      | "_maxTxAmount"
      | "_maxWalletToken"
      | "_owner"
      | "allowance"
      | "approve"
      | "approveMax"
      | "balanceOf"
      | "checkRatio"
      | "clearStuckToken"
      | "decimals"
      | "getOwner"
      | "manualSend"
      | "maxWalletRule"
      | "name"
      | "owner"
      | "pair"
      | "reduceFee"
      | "removeLimits"
      | "renounceOwnership"
      | "router"
      | "setParameters"
      | "setStructure"
      | "setSwapBackSettings"
      | "setWallets"
      | "showBacking"
      | "showSupply"
      | "startTrading"
      | "swapEnabled"
      | "swapThreshold"
      | "symbol"
      | "totalFee"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TradingOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxWalletToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMax",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRatio",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStuckToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manualSend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletRule",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(functionFragment: "reduceFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStructure",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapBackSettings",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWallets",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "showBacking",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "showSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "TradingOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxWalletToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearStuckToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manualSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reduceFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapBackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "showSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AutoLiquify(uint256,uint256)": EventFragment;
    "ClearStuck(uint256)": EventFragment;
    "ClearToken(address,uint256)": EventFragment;
    "EditTax(uint8,uint8,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "set_MaxTX(uint256)": EventFragment;
    "set_MaxWallet(uint256)": EventFragment;
    "set_Receivers(address,address,address,address)": EventFragment;
    "set_SwapBack(uint256,bool)": EventFragment;
    "user_TxExempt(address,bool)": EventFragment;
    "user_exemptfromfees(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearStuck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EditTax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "set_MaxTX"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "set_MaxWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "set_Receivers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "set_SwapBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "user_TxExempt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "user_exemptfromfees"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AutoLiquifyEventObject {
  amountETH: BigNumber;
  amountTokens: BigNumber;
}
export type AutoLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  AutoLiquifyEventObject
>;

export type AutoLiquifyEventFilter = TypedEventFilter<AutoLiquifyEvent>;

export interface ClearStuckEventObject {
  amount: BigNumber;
}
export type ClearStuckEvent = TypedEvent<[BigNumber], ClearStuckEventObject>;

export type ClearStuckEventFilter = TypedEventFilter<ClearStuckEvent>;

export interface ClearTokenEventObject {
  TokenAddressCleared: string;
  Amount: BigNumber;
}
export type ClearTokenEvent = TypedEvent<
  [string, BigNumber],
  ClearTokenEventObject
>;

export type ClearTokenEventFilter = TypedEventFilter<ClearTokenEvent>;

export interface EditTaxEventObject {
  Buy: number;
  Sell: number;
  Transfer: number;
}
export type EditTaxEvent = TypedEvent<
  [number, number, number],
  EditTaxEventObject
>;

export type EditTaxEventFilter = TypedEventFilter<EditTaxEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface set_MaxTXEventObject {
  maxTX: BigNumber;
}
export type set_MaxTXEvent = TypedEvent<[BigNumber], set_MaxTXEventObject>;

export type set_MaxTXEventFilter = TypedEventFilter<set_MaxTXEvent>;

export interface set_MaxWalletEventObject {
  maxWallet: BigNumber;
}
export type set_MaxWalletEvent = TypedEvent<
  [BigNumber],
  set_MaxWalletEventObject
>;

export type set_MaxWalletEventFilter = TypedEventFilter<set_MaxWalletEvent>;

export interface set_ReceiversEventObject {
  marketingFeeReceiver: string;
  buybackFeeReceiver: string;
  burnFeeReceiver: string;
  devFeeReceiver: string;
}
export type set_ReceiversEvent = TypedEvent<
  [string, string, string, string],
  set_ReceiversEventObject
>;

export type set_ReceiversEventFilter = TypedEventFilter<set_ReceiversEvent>;

export interface set_SwapBackEventObject {
  Amount: BigNumber;
  Enabled: boolean;
}
export type set_SwapBackEvent = TypedEvent<
  [BigNumber, boolean],
  set_SwapBackEventObject
>;

export type set_SwapBackEventFilter = TypedEventFilter<set_SwapBackEvent>;

export interface user_TxExemptEventObject {
  Wallet: string;
  Exempt: boolean;
}
export type user_TxExemptEvent = TypedEvent<
  [string, boolean],
  user_TxExemptEventObject
>;

export type user_TxExemptEventFilter = TypedEventFilter<user_TxExemptEvent>;

export interface user_exemptfromfeesEventObject {
  Wallet: string;
  Exempt: boolean;
}
export type user_exemptfromfeesEvent = TypedEvent<
  [string, boolean],
  user_exemptfromfeesEventObject
>;

export type user_exemptfromfeesEventFilter =
  TypedEventFilter<user_exemptfromfeesEvent>;

export interface SWAN extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SWANInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TradingOpen(overrides?: CallOverrides): Promise<[boolean]>;

    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxWalletToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveMax(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkRatio(
      ratio: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clearStuckToken(
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    manualSend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxWalletRule(
      maxWallPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    reduceFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setParameters(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _buybackFee: PromiseOrValue<BigNumberish>,
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _burnFee: PromiseOrValue<BigNumberish>,
      _feeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStructure(
      _percentonbuy: PromiseOrValue<BigNumberish>,
      _percentonsell: PromiseOrValue<BigNumberish>,
      _wallettransfer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWallets(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _marketingFeeReceiver: PromiseOrValue<string>,
      _devFeeReceiver: PromiseOrValue<string>,
      _burnFeeReceiver: PromiseOrValue<string>,
      _buybackFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    showBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    showSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  TradingOpen(overrides?: CallOverrides): Promise<boolean>;

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

  _owner(overrides?: CallOverrides): Promise<string>;

  allowance(
    holder: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveMax(
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkRatio(
    ratio: PromiseOrValue<BigNumberish>,
    accuracy: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clearStuckToken(
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  manualSend(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxWalletRule(
    maxWallPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  reduceFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLimits(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setParameters(
    _liquidityFee: PromiseOrValue<BigNumberish>,
    _buybackFee: PromiseOrValue<BigNumberish>,
    _marketingFee: PromiseOrValue<BigNumberish>,
    _devFee: PromiseOrValue<BigNumberish>,
    _burnFee: PromiseOrValue<BigNumberish>,
    _feeDenominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStructure(
    _percentonbuy: PromiseOrValue<BigNumberish>,
    _percentonsell: PromiseOrValue<BigNumberish>,
    _wallettransfer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapBackSettings(
    _enabled: PromiseOrValue<boolean>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWallets(
    _autoLiquidityReceiver: PromiseOrValue<string>,
    _marketingFeeReceiver: PromiseOrValue<string>,
    _devFeeReceiver: PromiseOrValue<string>,
    _burnFeeReceiver: PromiseOrValue<string>,
    _buybackFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  showBacking(
    accuracy: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  showSupply(overrides?: CallOverrides): Promise<BigNumber>;

  startTrading(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TradingOpen(overrides?: CallOverrides): Promise<boolean>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<string>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveMax(
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRatio(
      ratio: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clearStuckToken(
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    manualSend(overrides?: CallOverrides): Promise<void>;

    maxWalletRule(
      maxWallPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    reduceFee(overrides?: CallOverrides): Promise<void>;

    removeLimits(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setParameters(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _buybackFee: PromiseOrValue<BigNumberish>,
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _burnFee: PromiseOrValue<BigNumberish>,
      _feeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStructure(
      _percentonbuy: PromiseOrValue<BigNumberish>,
      _percentonsell: PromiseOrValue<BigNumberish>,
      _wallettransfer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallets(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _marketingFeeReceiver: PromiseOrValue<string>,
      _devFeeReceiver: PromiseOrValue<string>,
      _burnFeeReceiver: PromiseOrValue<string>,
      _buybackFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    showBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showSupply(overrides?: CallOverrides): Promise<BigNumber>;

    startTrading(overrides?: CallOverrides): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "AutoLiquify(uint256,uint256)"(
      amountETH?: null,
      amountTokens?: null
    ): AutoLiquifyEventFilter;
    AutoLiquify(amountETH?: null, amountTokens?: null): AutoLiquifyEventFilter;

    "ClearStuck(uint256)"(amount?: null): ClearStuckEventFilter;
    ClearStuck(amount?: null): ClearStuckEventFilter;

    "ClearToken(address,uint256)"(
      TokenAddressCleared?: null,
      Amount?: null
    ): ClearTokenEventFilter;
    ClearToken(
      TokenAddressCleared?: null,
      Amount?: null
    ): ClearTokenEventFilter;

    "EditTax(uint8,uint8,uint8)"(
      Buy?: null,
      Sell?: null,
      Transfer?: null
    ): EditTaxEventFilter;
    EditTax(Buy?: null, Sell?: null, Transfer?: null): EditTaxEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "set_MaxTX(uint256)"(maxTX?: null): set_MaxTXEventFilter;
    set_MaxTX(maxTX?: null): set_MaxTXEventFilter;

    "set_MaxWallet(uint256)"(maxWallet?: null): set_MaxWalletEventFilter;
    set_MaxWallet(maxWallet?: null): set_MaxWalletEventFilter;

    "set_Receivers(address,address,address,address)"(
      marketingFeeReceiver?: null,
      buybackFeeReceiver?: null,
      burnFeeReceiver?: null,
      devFeeReceiver?: null
    ): set_ReceiversEventFilter;
    set_Receivers(
      marketingFeeReceiver?: null,
      buybackFeeReceiver?: null,
      burnFeeReceiver?: null,
      devFeeReceiver?: null
    ): set_ReceiversEventFilter;

    "set_SwapBack(uint256,bool)"(
      Amount?: null,
      Enabled?: null
    ): set_SwapBackEventFilter;
    set_SwapBack(Amount?: null, Enabled?: null): set_SwapBackEventFilter;

    "user_TxExempt(address,bool)"(
      Wallet?: null,
      Exempt?: null
    ): user_TxExemptEventFilter;
    user_TxExempt(Wallet?: null, Exempt?: null): user_TxExemptEventFilter;

    "user_exemptfromfees(address,bool)"(
      Wallet?: null,
      Exempt?: null
    ): user_exemptfromfeesEventFilter;
    user_exemptfromfees(
      Wallet?: null,
      Exempt?: null
    ): user_exemptfromfeesEventFilter;
  };

  estimateGas: {
    TradingOpen(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveMax(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRatio(
      ratio: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearStuckToken(
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    manualSend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxWalletRule(
      maxWallPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    reduceFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setParameters(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _buybackFee: PromiseOrValue<BigNumberish>,
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _burnFee: PromiseOrValue<BigNumberish>,
      _feeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStructure(
      _percentonbuy: PromiseOrValue<BigNumberish>,
      _percentonsell: PromiseOrValue<BigNumberish>,
      _wallettransfer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWallets(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _marketingFeeReceiver: PromiseOrValue<string>,
      _devFeeReceiver: PromiseOrValue<string>,
      _burnFeeReceiver: PromiseOrValue<string>,
      _buybackFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    showBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showSupply(overrides?: CallOverrides): Promise<BigNumber>;

    startTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TradingOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxWalletToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveMax(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRatio(
      ratio: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearStuckToken(
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualSend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxWalletRule(
      maxWallPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reduceFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setParameters(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _buybackFee: PromiseOrValue<BigNumberish>,
      _marketingFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _burnFee: PromiseOrValue<BigNumberish>,
      _feeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStructure(
      _percentonbuy: PromiseOrValue<BigNumberish>,
      _percentonsell: PromiseOrValue<BigNumberish>,
      _wallettransfer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWallets(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _marketingFeeReceiver: PromiseOrValue<string>,
      _devFeeReceiver: PromiseOrValue<string>,
      _burnFeeReceiver: PromiseOrValue<string>,
      _buybackFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    showBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
