/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SWANInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TradingOpen"
      | "_maxTxAmount"
      | "_maxWalletToken"
      | "_owner"
      | "allowance"
      | "approve"
      | "approveMax"
      | "balanceOf"
      | "checkRatio"
      | "clearStuckToken"
      | "decimals"
      | "getOwner"
      | "manualSend"
      | "maxWalletRule"
      | "name"
      | "owner"
      | "pair"
      | "reduceFee"
      | "removeLimits"
      | "renounceOwnership"
      | "router"
      | "setParameters"
      | "setStructure"
      | "setSwapBackSettings"
      | "setWallets"
      | "showBacking"
      | "showSupply"
      | "startTrading"
      | "swapEnabled"
      | "swapThreshold"
      | "symbol"
      | "totalFee"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "AutoLiquify"
      | "ClearStuck"
      | "ClearToken"
      | "EditTax"
      | "OwnershipTransferred"
      | "Transfer"
      | "set_MaxTX"
      | "set_MaxWallet"
      | "set_Receivers"
      | "set_SwapBack"
      | "user_TxExempt"
      | "user_exemptfromfees"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TradingOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxWalletToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMax",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStuckToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manualSend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletRule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(functionFragment: "reduceFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStructure",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapBackSettings",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWallets",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "showBacking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "showSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "TradingOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxWalletToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearStuckToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manualSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reduceFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapBackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "showSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutoLiquifyEvent {
  export type InputTuple = [
    amountETH: BigNumberish,
    amountTokens: BigNumberish
  ];
  export type OutputTuple = [amountETH: bigint, amountTokens: bigint];
  export interface OutputObject {
    amountETH: bigint;
    amountTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClearStuckEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClearTokenEvent {
  export type InputTuple = [
    TokenAddressCleared: AddressLike,
    Amount: BigNumberish
  ];
  export type OutputTuple = [TokenAddressCleared: string, Amount: bigint];
  export interface OutputObject {
    TokenAddressCleared: string;
    Amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditTaxEvent {
  export type InputTuple = [
    Buy: BigNumberish,
    Sell: BigNumberish,
    Transfer: BigNumberish
  ];
  export type OutputTuple = [Buy: bigint, Sell: bigint, Transfer: bigint];
  export interface OutputObject {
    Buy: bigint;
    Sell: bigint;
    Transfer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace set_MaxTXEvent {
  export type InputTuple = [maxTX: BigNumberish];
  export type OutputTuple = [maxTX: bigint];
  export interface OutputObject {
    maxTX: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace set_MaxWalletEvent {
  export type InputTuple = [maxWallet: BigNumberish];
  export type OutputTuple = [maxWallet: bigint];
  export interface OutputObject {
    maxWallet: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace set_ReceiversEvent {
  export type InputTuple = [
    marketingFeeReceiver: AddressLike,
    buybackFeeReceiver: AddressLike,
    burnFeeReceiver: AddressLike,
    devFeeReceiver: AddressLike
  ];
  export type OutputTuple = [
    marketingFeeReceiver: string,
    buybackFeeReceiver: string,
    burnFeeReceiver: string,
    devFeeReceiver: string
  ];
  export interface OutputObject {
    marketingFeeReceiver: string;
    buybackFeeReceiver: string;
    burnFeeReceiver: string;
    devFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace set_SwapBackEvent {
  export type InputTuple = [Amount: BigNumberish, Enabled: boolean];
  export type OutputTuple = [Amount: bigint, Enabled: boolean];
  export interface OutputObject {
    Amount: bigint;
    Enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace user_TxExemptEvent {
  export type InputTuple = [Wallet: AddressLike, Exempt: boolean];
  export type OutputTuple = [Wallet: string, Exempt: boolean];
  export interface OutputObject {
    Wallet: string;
    Exempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace user_exemptfromfeesEvent {
  export type InputTuple = [Wallet: AddressLike, Exempt: boolean];
  export type OutputTuple = [Wallet: string, Exempt: boolean];
  export interface OutputObject {
    Wallet: string;
    Exempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SWAN extends BaseContract {
  connect(runner?: ContractRunner | null): SWAN;
  waitForDeployment(): Promise<this>;

  interface: SWANInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TradingOpen: TypedContractMethod<[], [boolean], "view">;

  _maxTxAmount: TypedContractMethod<[], [bigint], "view">;

  _maxWalletToken: TypedContractMethod<[], [bigint], "view">;

  _owner: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveMax: TypedContractMethod<
    [spender: AddressLike],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  checkRatio: TypedContractMethod<
    [ratio: BigNumberish, accuracy: BigNumberish],
    [boolean],
    "view"
  >;

  clearStuckToken: TypedContractMethod<
    [tokenAddress: AddressLike, tokens: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  manualSend: TypedContractMethod<[], [void], "nonpayable">;

  maxWalletRule: TypedContractMethod<
    [maxWallPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pair: TypedContractMethod<[], [string], "view">;

  reduceFee: TypedContractMethod<[], [void], "nonpayable">;

  removeLimits: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setParameters: TypedContractMethod<
    [
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _marketingFee: BigNumberish,
      _devFee: BigNumberish,
      _burnFee: BigNumberish,
      _feeDenominator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setStructure: TypedContractMethod<
    [
      _percentonbuy: BigNumberish,
      _percentonsell: BigNumberish,
      _wallettransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setSwapBackSettings: TypedContractMethod<
    [_enabled: boolean, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWallets: TypedContractMethod<
    [
      _autoLiquidityReceiver: AddressLike,
      _marketingFeeReceiver: AddressLike,
      _devFeeReceiver: AddressLike,
      _burnFeeReceiver: AddressLike,
      _buybackFeeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  showBacking: TypedContractMethod<[accuracy: BigNumberish], [bigint], "view">;

  showSupply: TypedContractMethod<[], [bigint], "view">;

  startTrading: TypedContractMethod<[], [void], "nonpayable">;

  swapEnabled: TypedContractMethod<[], [boolean], "view">;

  swapThreshold: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalFee: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TradingOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "_maxTxAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_maxWalletToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveMax"
  ): TypedContractMethod<[spender: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkRatio"
  ): TypedContractMethod<
    [ratio: BigNumberish, accuracy: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "clearStuckToken"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokens: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "manualSend"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxWalletRule"
  ): TypedContractMethod<[maxWallPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reduceFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeLimits"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setParameters"
  ): TypedContractMethod<
    [
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _marketingFee: BigNumberish,
      _devFee: BigNumberish,
      _burnFee: BigNumberish,
      _feeDenominator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStructure"
  ): TypedContractMethod<
    [
      _percentonbuy: BigNumberish,
      _percentonsell: BigNumberish,
      _wallettransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapBackSettings"
  ): TypedContractMethod<
    [_enabled: boolean, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWallets"
  ): TypedContractMethod<
    [
      _autoLiquidityReceiver: AddressLike,
      _marketingFeeReceiver: AddressLike,
      _devFeeReceiver: AddressLike,
      _burnFeeReceiver: AddressLike,
      _buybackFeeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "showBacking"
  ): TypedContractMethod<[accuracy: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "showSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AutoLiquify"
  ): TypedContractEvent<
    AutoLiquifyEvent.InputTuple,
    AutoLiquifyEvent.OutputTuple,
    AutoLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "ClearStuck"
  ): TypedContractEvent<
    ClearStuckEvent.InputTuple,
    ClearStuckEvent.OutputTuple,
    ClearStuckEvent.OutputObject
  >;
  getEvent(
    key: "ClearToken"
  ): TypedContractEvent<
    ClearTokenEvent.InputTuple,
    ClearTokenEvent.OutputTuple,
    ClearTokenEvent.OutputObject
  >;
  getEvent(
    key: "EditTax"
  ): TypedContractEvent<
    EditTaxEvent.InputTuple,
    EditTaxEvent.OutputTuple,
    EditTaxEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "set_MaxTX"
  ): TypedContractEvent<
    set_MaxTXEvent.InputTuple,
    set_MaxTXEvent.OutputTuple,
    set_MaxTXEvent.OutputObject
  >;
  getEvent(
    key: "set_MaxWallet"
  ): TypedContractEvent<
    set_MaxWalletEvent.InputTuple,
    set_MaxWalletEvent.OutputTuple,
    set_MaxWalletEvent.OutputObject
  >;
  getEvent(
    key: "set_Receivers"
  ): TypedContractEvent<
    set_ReceiversEvent.InputTuple,
    set_ReceiversEvent.OutputTuple,
    set_ReceiversEvent.OutputObject
  >;
  getEvent(
    key: "set_SwapBack"
  ): TypedContractEvent<
    set_SwapBackEvent.InputTuple,
    set_SwapBackEvent.OutputTuple,
    set_SwapBackEvent.OutputObject
  >;
  getEvent(
    key: "user_TxExempt"
  ): TypedContractEvent<
    user_TxExemptEvent.InputTuple,
    user_TxExemptEvent.OutputTuple,
    user_TxExemptEvent.OutputObject
  >;
  getEvent(
    key: "user_exemptfromfees"
  ): TypedContractEvent<
    user_exemptfromfeesEvent.InputTuple,
    user_exemptfromfeesEvent.OutputTuple,
    user_exemptfromfeesEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AutoLiquify(uint256,uint256)": TypedContractEvent<
      AutoLiquifyEvent.InputTuple,
      AutoLiquifyEvent.OutputTuple,
      AutoLiquifyEvent.OutputObject
    >;
    AutoLiquify: TypedContractEvent<
      AutoLiquifyEvent.InputTuple,
      AutoLiquifyEvent.OutputTuple,
      AutoLiquifyEvent.OutputObject
    >;

    "ClearStuck(uint256)": TypedContractEvent<
      ClearStuckEvent.InputTuple,
      ClearStuckEvent.OutputTuple,
      ClearStuckEvent.OutputObject
    >;
    ClearStuck: TypedContractEvent<
      ClearStuckEvent.InputTuple,
      ClearStuckEvent.OutputTuple,
      ClearStuckEvent.OutputObject
    >;

    "ClearToken(address,uint256)": TypedContractEvent<
      ClearTokenEvent.InputTuple,
      ClearTokenEvent.OutputTuple,
      ClearTokenEvent.OutputObject
    >;
    ClearToken: TypedContractEvent<
      ClearTokenEvent.InputTuple,
      ClearTokenEvent.OutputTuple,
      ClearTokenEvent.OutputObject
    >;

    "EditTax(uint8,uint8,uint8)": TypedContractEvent<
      EditTaxEvent.InputTuple,
      EditTaxEvent.OutputTuple,
      EditTaxEvent.OutputObject
    >;
    EditTax: TypedContractEvent<
      EditTaxEvent.InputTuple,
      EditTaxEvent.OutputTuple,
      EditTaxEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "set_MaxTX(uint256)": TypedContractEvent<
      set_MaxTXEvent.InputTuple,
      set_MaxTXEvent.OutputTuple,
      set_MaxTXEvent.OutputObject
    >;
    set_MaxTX: TypedContractEvent<
      set_MaxTXEvent.InputTuple,
      set_MaxTXEvent.OutputTuple,
      set_MaxTXEvent.OutputObject
    >;

    "set_MaxWallet(uint256)": TypedContractEvent<
      set_MaxWalletEvent.InputTuple,
      set_MaxWalletEvent.OutputTuple,
      set_MaxWalletEvent.OutputObject
    >;
    set_MaxWallet: TypedContractEvent<
      set_MaxWalletEvent.InputTuple,
      set_MaxWalletEvent.OutputTuple,
      set_MaxWalletEvent.OutputObject
    >;

    "set_Receivers(address,address,address,address)": TypedContractEvent<
      set_ReceiversEvent.InputTuple,
      set_ReceiversEvent.OutputTuple,
      set_ReceiversEvent.OutputObject
    >;
    set_Receivers: TypedContractEvent<
      set_ReceiversEvent.InputTuple,
      set_ReceiversEvent.OutputTuple,
      set_ReceiversEvent.OutputObject
    >;

    "set_SwapBack(uint256,bool)": TypedContractEvent<
      set_SwapBackEvent.InputTuple,
      set_SwapBackEvent.OutputTuple,
      set_SwapBackEvent.OutputObject
    >;
    set_SwapBack: TypedContractEvent<
      set_SwapBackEvent.InputTuple,
      set_SwapBackEvent.OutputTuple,
      set_SwapBackEvent.OutputObject
    >;

    "user_TxExempt(address,bool)": TypedContractEvent<
      user_TxExemptEvent.InputTuple,
      user_TxExemptEvent.OutputTuple,
      user_TxExemptEvent.OutputObject
    >;
    user_TxExempt: TypedContractEvent<
      user_TxExemptEvent.InputTuple,
      user_TxExemptEvent.OutputTuple,
      user_TxExemptEvent.OutputObject
    >;

    "user_exemptfromfees(address,bool)": TypedContractEvent<
      user_exemptfromfeesEvent.InputTuple,
      user_exemptfromfeesEvent.OutputTuple,
      user_exemptfromfeesEvent.OutputObject
    >;
    user_exemptfromfees: TypedContractEvent<
      user_exemptfromfeesEvent.InputTuple,
      user_exemptfromfeesEvent.OutputTuple,
      user_exemptfromfeesEvent.OutputObject
    >;
  };
}
