/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface YieldStoneInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToBlackList"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "blacklist"
      | "buyFee"
      | "decimals"
      | "decreaseAllowance"
      | "disableLimits"
      | "excludeFromFees"
      | "excludeFromMaxTransaction"
      | "increaseAllowance"
      | "isExcludedFromFees"
      | "isExcludedMaxTransaction"
      | "limitsEnabled"
      | "maxTransaction"
      | "maxWallet"
      | "name"
      | "openTrading"
      | "owner"
      | "removeFromBlackList"
      | "renounceOwnership"
      | "sellFee"
      | "setAutomatedMarketMakerPair"
      | "swapAmount"
      | "swapEnabled"
      | "swapEveryBlock"
      | "symbol"
      | "taxWallet"
      | "totalSupply"
      | "tradingEnabled"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "updateBuyFee"
      | "updateMaxTransaction"
      | "updateMaxWallet"
      | "updateSellFee"
      | "updateSwap"
      | "updateTaxWallet"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddedToBlacklist"
      | "Approval"
      | "BuyFeeUpdated"
      | "FeeExcluded"
      | "LimitsRemoved"
      | "MaxTransactionUpdated"
      | "MaxWalletExcluded"
      | "MaxWalletUpdated"
      | "OwnershipTransferred"
      | "RemoveFromBlacklist"
      | "SellFeeUpdated"
      | "SetAutomatedMarketMakerPair"
      | "SwapUpdated"
      | "TaxWalletUpdated"
      | "TradingEnabled"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToBlackList",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "buyFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedMaxTransaction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromBlackList",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEveryBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwap",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTaxWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEveryBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace AddedToBlacklistEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyFeeUpdatedEvent {
  export type InputTuple = [buyFee: BigNumberish];
  export type OutputTuple = [buyFee: bigint];
  export interface OutputObject {
    buyFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeExcludedEvent {
  export type InputTuple = [wallet: AddressLike, excluded: boolean];
  export type OutputTuple = [wallet: string, excluded: boolean];
  export interface OutputObject {
    wallet: string;
    excluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitsRemovedEvent {
  export type InputTuple = [blockNumber: BigNumberish];
  export type OutputTuple = [blockNumber: bigint];
  export interface OutputObject {
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTransactionUpdatedEvent {
  export type InputTuple = [maxTransaction: BigNumberish];
  export type OutputTuple = [maxTransaction: bigint];
  export interface OutputObject {
    maxTransaction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletExcludedEvent {
  export type InputTuple = [wallet: AddressLike, excluded: boolean];
  export type OutputTuple = [wallet: string, excluded: boolean];
  export interface OutputObject {
    wallet: string;
    excluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletUpdatedEvent {
  export type InputTuple = [maxWallet: BigNumberish];
  export type OutputTuple = [maxWallet: bigint];
  export interface OutputObject {
    maxWallet: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveFromBlacklistEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellFeeUpdatedEvent {
  export type InputTuple = [sellFee: BigNumberish];
  export type OutputTuple = [sellFee: bigint];
  export interface OutputObject {
    sellFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAutomatedMarketMakerPairEvent {
  export type InputTuple = [pair: AddressLike, value: boolean];
  export type OutputTuple = [pair: string, value: boolean];
  export interface OutputObject {
    pair: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapUpdatedEvent {
  export type InputTuple = [
    swapEnabled: boolean,
    swapAmount: BigNumberish,
    swapEveryBlock: BigNumberish
  ];
  export type OutputTuple = [
    swapEnabled: boolean,
    swapAmount: bigint,
    swapEveryBlock: bigint
  ];
  export interface OutputObject {
    swapEnabled: boolean;
    swapAmount: bigint;
    swapEveryBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaxWalletUpdatedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingEnabledEvent {
  export type InputTuple = [blockNumber: BigNumberish];
  export type OutputTuple = [blockNumber: bigint];
  export interface OutputObject {
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YieldStone extends BaseContract {
  connect(runner?: ContractRunner | null): YieldStone;
  waitForDeployment(): Promise<this>;

  interface: YieldStoneInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToBlackList: TypedContractMethod<
    [_wallets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  automatedMarketMakerPairs: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  blacklist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  buyFee: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  disableLimits: TypedContractMethod<[], [void], "nonpayable">;

  excludeFromFees: TypedContractMethod<
    [_wallet: AddressLike, _excluded: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromMaxTransaction: TypedContractMethod<
    [_wallet: AddressLike, _excluded: boolean],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isExcludedFromFees: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedMaxTransaction: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  limitsEnabled: TypedContractMethod<[], [boolean], "view">;

  maxTransaction: TypedContractMethod<[], [bigint], "view">;

  maxWallet: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  openTrading: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  removeFromBlackList: TypedContractMethod<
    [_wallets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellFee: TypedContractMethod<[], [bigint], "view">;

  setAutomatedMarketMakerPair: TypedContractMethod<
    [_pair: AddressLike, _value: boolean],
    [void],
    "nonpayable"
  >;

  swapAmount: TypedContractMethod<[], [bigint], "view">;

  swapEnabled: TypedContractMethod<[], [boolean], "view">;

  swapEveryBlock: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  taxWallet: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingEnabled: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  updateBuyFee: TypedContractMethod<
    [_buyFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxTransaction: TypedContractMethod<
    [_maxTransaction: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxWallet: TypedContractMethod<
    [_maxWallet: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSellFee: TypedContractMethod<
    [_sellFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSwap: TypedContractMethod<
    [
      _swapEnabled: boolean,
      _swapAmount: BigNumberish,
      _swapEveryBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateTaxWallet: TypedContractMethod<
    [_taxWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToBlackList"
  ): TypedContractMethod<[_wallets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "automatedMarketMakerPairs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "buyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableLimits"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFees"
  ): TypedContractMethod<
    [_wallet: AddressLike, _excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeFromMaxTransaction"
  ): TypedContractMethod<
    [_wallet: AddressLike, _excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isExcludedFromFees"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedMaxTransaction"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "limitsEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxTransaction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWallet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromBlackList"
  ): TypedContractMethod<[_wallets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAutomatedMarketMakerPair"
  ): TypedContractMethod<
    [_pair: AddressLike, _value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapEveryBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateBuyFee"
  ): TypedContractMethod<[_buyFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxTransaction"
  ): TypedContractMethod<[_maxTransaction: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxWallet"
  ): TypedContractMethod<[_maxWallet: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSellFee"
  ): TypedContractMethod<[_sellFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSwap"
  ): TypedContractMethod<
    [
      _swapEnabled: boolean,
      _swapAmount: BigNumberish,
      _swapEveryBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTaxWallet"
  ): TypedContractMethod<[_taxWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddedToBlacklist"
  ): TypedContractEvent<
    AddedToBlacklistEvent.InputTuple,
    AddedToBlacklistEvent.OutputTuple,
    AddedToBlacklistEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BuyFeeUpdated"
  ): TypedContractEvent<
    BuyFeeUpdatedEvent.InputTuple,
    BuyFeeUpdatedEvent.OutputTuple,
    BuyFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeExcluded"
  ): TypedContractEvent<
    FeeExcludedEvent.InputTuple,
    FeeExcludedEvent.OutputTuple,
    FeeExcludedEvent.OutputObject
  >;
  getEvent(
    key: "LimitsRemoved"
  ): TypedContractEvent<
    LimitsRemovedEvent.InputTuple,
    LimitsRemovedEvent.OutputTuple,
    LimitsRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTransactionUpdated"
  ): TypedContractEvent<
    MaxTransactionUpdatedEvent.InputTuple,
    MaxTransactionUpdatedEvent.OutputTuple,
    MaxTransactionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletExcluded"
  ): TypedContractEvent<
    MaxWalletExcludedEvent.InputTuple,
    MaxWalletExcludedEvent.OutputTuple,
    MaxWalletExcludedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletUpdated"
  ): TypedContractEvent<
    MaxWalletUpdatedEvent.InputTuple,
    MaxWalletUpdatedEvent.OutputTuple,
    MaxWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveFromBlacklist"
  ): TypedContractEvent<
    RemoveFromBlacklistEvent.InputTuple,
    RemoveFromBlacklistEvent.OutputTuple,
    RemoveFromBlacklistEvent.OutputObject
  >;
  getEvent(
    key: "SellFeeUpdated"
  ): TypedContractEvent<
    SellFeeUpdatedEvent.InputTuple,
    SellFeeUpdatedEvent.OutputTuple,
    SellFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SetAutomatedMarketMakerPair"
  ): TypedContractEvent<
    SetAutomatedMarketMakerPairEvent.InputTuple,
    SetAutomatedMarketMakerPairEvent.OutputTuple,
    SetAutomatedMarketMakerPairEvent.OutputObject
  >;
  getEvent(
    key: "SwapUpdated"
  ): TypedContractEvent<
    SwapUpdatedEvent.InputTuple,
    SwapUpdatedEvent.OutputTuple,
    SwapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TaxWalletUpdated"
  ): TypedContractEvent<
    TaxWalletUpdatedEvent.InputTuple,
    TaxWalletUpdatedEvent.OutputTuple,
    TaxWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TradingEnabled"
  ): TypedContractEvent<
    TradingEnabledEvent.InputTuple,
    TradingEnabledEvent.OutputTuple,
    TradingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AddedToBlacklist(address)": TypedContractEvent<
      AddedToBlacklistEvent.InputTuple,
      AddedToBlacklistEvent.OutputTuple,
      AddedToBlacklistEvent.OutputObject
    >;
    AddedToBlacklist: TypedContractEvent<
      AddedToBlacklistEvent.InputTuple,
      AddedToBlacklistEvent.OutputTuple,
      AddedToBlacklistEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BuyFeeUpdated(uint256)": TypedContractEvent<
      BuyFeeUpdatedEvent.InputTuple,
      BuyFeeUpdatedEvent.OutputTuple,
      BuyFeeUpdatedEvent.OutputObject
    >;
    BuyFeeUpdated: TypedContractEvent<
      BuyFeeUpdatedEvent.InputTuple,
      BuyFeeUpdatedEvent.OutputTuple,
      BuyFeeUpdatedEvent.OutputObject
    >;

    "FeeExcluded(address,bool)": TypedContractEvent<
      FeeExcludedEvent.InputTuple,
      FeeExcludedEvent.OutputTuple,
      FeeExcludedEvent.OutputObject
    >;
    FeeExcluded: TypedContractEvent<
      FeeExcludedEvent.InputTuple,
      FeeExcludedEvent.OutputTuple,
      FeeExcludedEvent.OutputObject
    >;

    "LimitsRemoved(uint256)": TypedContractEvent<
      LimitsRemovedEvent.InputTuple,
      LimitsRemovedEvent.OutputTuple,
      LimitsRemovedEvent.OutputObject
    >;
    LimitsRemoved: TypedContractEvent<
      LimitsRemovedEvent.InputTuple,
      LimitsRemovedEvent.OutputTuple,
      LimitsRemovedEvent.OutputObject
    >;

    "MaxTransactionUpdated(uint256)": TypedContractEvent<
      MaxTransactionUpdatedEvent.InputTuple,
      MaxTransactionUpdatedEvent.OutputTuple,
      MaxTransactionUpdatedEvent.OutputObject
    >;
    MaxTransactionUpdated: TypedContractEvent<
      MaxTransactionUpdatedEvent.InputTuple,
      MaxTransactionUpdatedEvent.OutputTuple,
      MaxTransactionUpdatedEvent.OutputObject
    >;

    "MaxWalletExcluded(address,bool)": TypedContractEvent<
      MaxWalletExcludedEvent.InputTuple,
      MaxWalletExcludedEvent.OutputTuple,
      MaxWalletExcludedEvent.OutputObject
    >;
    MaxWalletExcluded: TypedContractEvent<
      MaxWalletExcludedEvent.InputTuple,
      MaxWalletExcludedEvent.OutputTuple,
      MaxWalletExcludedEvent.OutputObject
    >;

    "MaxWalletUpdated(uint256)": TypedContractEvent<
      MaxWalletUpdatedEvent.InputTuple,
      MaxWalletUpdatedEvent.OutputTuple,
      MaxWalletUpdatedEvent.OutputObject
    >;
    MaxWalletUpdated: TypedContractEvent<
      MaxWalletUpdatedEvent.InputTuple,
      MaxWalletUpdatedEvent.OutputTuple,
      MaxWalletUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveFromBlacklist(address)": TypedContractEvent<
      RemoveFromBlacklistEvent.InputTuple,
      RemoveFromBlacklistEvent.OutputTuple,
      RemoveFromBlacklistEvent.OutputObject
    >;
    RemoveFromBlacklist: TypedContractEvent<
      RemoveFromBlacklistEvent.InputTuple,
      RemoveFromBlacklistEvent.OutputTuple,
      RemoveFromBlacklistEvent.OutputObject
    >;

    "SellFeeUpdated(uint256)": TypedContractEvent<
      SellFeeUpdatedEvent.InputTuple,
      SellFeeUpdatedEvent.OutputTuple,
      SellFeeUpdatedEvent.OutputObject
    >;
    SellFeeUpdated: TypedContractEvent<
      SellFeeUpdatedEvent.InputTuple,
      SellFeeUpdatedEvent.OutputTuple,
      SellFeeUpdatedEvent.OutputObject
    >;

    "SetAutomatedMarketMakerPair(address,bool)": TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;
    SetAutomatedMarketMakerPair: TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;

    "SwapUpdated(bool,uint256,uint256)": TypedContractEvent<
      SwapUpdatedEvent.InputTuple,
      SwapUpdatedEvent.OutputTuple,
      SwapUpdatedEvent.OutputObject
    >;
    SwapUpdated: TypedContractEvent<
      SwapUpdatedEvent.InputTuple,
      SwapUpdatedEvent.OutputTuple,
      SwapUpdatedEvent.OutputObject
    >;

    "TaxWalletUpdated(address)": TypedContractEvent<
      TaxWalletUpdatedEvent.InputTuple,
      TaxWalletUpdatedEvent.OutputTuple,
      TaxWalletUpdatedEvent.OutputObject
    >;
    TaxWalletUpdated: TypedContractEvent<
      TaxWalletUpdatedEvent.InputTuple,
      TaxWalletUpdatedEvent.OutputTuple,
      TaxWalletUpdatedEvent.OutputObject
    >;

    "TradingEnabled(uint256)": TypedContractEvent<
      TradingEnabledEvent.InputTuple,
      TradingEnabledEvent.OutputTuple,
      TradingEnabledEvent.OutputObject
    >;
    TradingEnabled: TypedContractEvent<
      TradingEnabledEvent.InputTuple,
      TradingEnabledEvent.OutputTuple,
      TradingEnabledEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
