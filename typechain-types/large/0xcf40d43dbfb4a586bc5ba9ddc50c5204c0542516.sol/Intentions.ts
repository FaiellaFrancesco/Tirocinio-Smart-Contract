/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IntentionsInterface extends utils.Interface {
  functions: {
    "LoI_arrived_for_GWP(address)": FunctionFragment;
    "UNG_Mcap()": FunctionFragment;
    "chainName()": FunctionFragment;
    "didGetFundingFrom(address,address)": FunctionFragment;
    "didInvestTo(address)": FunctionFragment;
    "getAuctionMaster()": FunctionFragment;
    "getFundingReport(address,address)": FunctionFragment;
    "getGWF()": FunctionFragment;
    "getGroupLOIinvestors(address)": FunctionFragment;
    "getIntendedLOIShares(address,address)": FunctionFragment;
    "getIntendedNbOfShares(address)": FunctionFragment;
    "getLOIInvestorName(address,address)": FunctionFragment;
    "getMarketCap()": FunctionFragment;
    "getMasterCopy()": FunctionFragment;
    "getRegController()": FunctionFragment;
    "getSpice(address)": FunctionFragment;
    "getUNGmarketCap()": FunctionFragment;
    "intendedLOIInvestorName(address)": FunctionFragment;
    "intendedLOIShares(address)": FunctionFragment;
    "mCap(address)": FunctionFragment;
    "saveLetterOfIntent(address,uint256)": FunctionFragment;
    "storeInvestment(uint256,address,uint256,bytes32)": FunctionFragment;
    "tld()": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LoI_arrived_for_GWP"
      | "UNG_Mcap"
      | "chainName"
      | "didGetFundingFrom"
      | "didInvestTo"
      | "getAuctionMaster"
      | "getFundingReport"
      | "getGWF"
      | "getGroupLOIinvestors"
      | "getIntendedLOIShares"
      | "getIntendedNbOfShares"
      | "getLOIInvestorName"
      | "getMarketCap"
      | "getMasterCopy"
      | "getRegController"
      | "getSpice"
      | "getUNGmarketCap"
      | "intendedLOIInvestorName"
      | "intendedLOIShares"
      | "mCap"
      | "saveLetterOfIntent"
      | "storeInvestment"
      | "tld"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LoI_arrived_for_GWP",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "UNG_Mcap", values?: undefined): string;
  encodeFunctionData(functionFragment: "chainName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "didGetFundingFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "didInvestTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingReport",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getGWF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGroupLOIinvestors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntendedLOIShares",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntendedNbOfShares",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLOIInvestorName",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMasterCopy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUNGmarketCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intendedLOIInvestorName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "intendedLOIShares",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mCap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveLetterOfIntent",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeInvestment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "tld", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "LoI_arrived_for_GWP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNG_Mcap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "didGetFundingFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didInvestTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGWF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroupLOIinvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntendedLOIShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntendedNbOfShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLOIInvestorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUNGmarketCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intendedLOIInvestorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intendedLOIShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveLetterOfIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tld", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deployment(address,address)": EventFragment;
    "DeploymentIntentions(address,bytes32)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "LetterOfIntent(address,address,uint256)": EventFragment;
    "StoreFunding(address,address,uint256,uint256)": EventFragment;
    "StoreInvestment(address,address,uint256,uint256)": EventFragment;
    "TestReturn(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentIntentions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LetterOfIntent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreFunding"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreInvestment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestReturn"): EventFragment;
}

export interface DeploymentEventObject {
  owner: string;
  theContract: string;
}
export type DeploymentEvent = TypedEvent<
  [string, string],
  DeploymentEventObject
>;

export type DeploymentEventFilter = TypedEventFilter<DeploymentEvent>;

export interface DeploymentIntentionsEventObject {
  theContract: string;
  dhash: string;
}
export type DeploymentIntentionsEvent = TypedEvent<
  [string, string],
  DeploymentIntentionsEventObject
>;

export type DeploymentIntentionsEventFilter =
  TypedEventFilter<DeploymentIntentionsEvent>;

export interface DepositEventObject {
  from: string;
  value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface LetterOfIntentEventObject {
  theInvestorAddress: string;
  targetGWP_Address: string;
  nbOfShares: BigNumber;
}
export type LetterOfIntentEvent = TypedEvent<
  [string, string, BigNumber],
  LetterOfIntentEventObject
>;

export type LetterOfIntentEventFilter = TypedEventFilter<LetterOfIntentEvent>;

export interface StoreFundingEventObject {
  targetGWP_Address: string;
  theInvestorAddress: string;
  nbOfShares: BigNumber;
  pricePaid: BigNumber;
}
export type StoreFundingEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StoreFundingEventObject
>;

export type StoreFundingEventFilter = TypedEventFilter<StoreFundingEvent>;

export interface StoreInvestmentEventObject {
  theInvestorAddress: string;
  targetGWP_Address: string;
  nbOfShares: BigNumber;
  pricePaid: BigNumber;
}
export type StoreInvestmentEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StoreInvestmentEventObject
>;

export type StoreInvestmentEventFilter = TypedEventFilter<StoreInvestmentEvent>;

export interface TestReturnEventObject {
  v1: BigNumber;
  v2: BigNumber;
  v3: BigNumber;
  v4: BigNumber;
}
export type TestReturnEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  TestReturnEventObject
>;

export type TestReturnEventFilter = TypedEventFilter<TestReturnEvent>;

export interface Intentions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IntentionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LoI_arrived_for_GWP(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    UNG_Mcap(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainName(overrides?: CallOverrides): Promise<[string]>;

    didGetFundingFrom(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    didInvestTo(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAuctionMaster(overrides?: CallOverrides): Promise<[string]>;

    getFundingReport(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        mCapGWP: BigNumber;
        dhash: string;
        loiShares: BigNumber;
        shares: BigNumber;
        price: BigNumber;
        mcap: BigNumber;
      }
    >;

    getGWF(overrides?: CallOverrides): Promise<[string]>;

    getGroupLOIinvestors(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getIntendedLOIShares(
      tg: PromiseOrValue<string>,
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIntendedNbOfShares(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLOIInvestorName(
      tg: PromiseOrValue<string>,
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMasterCopy(overrides?: CallOverrides): Promise<[string]>;

    getRegController(overrides?: CallOverrides): Promise<[string]>;

    getSpice(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUNGmarketCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    intendedLOIInvestorName(
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    intendedLOIShares(
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mCap(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    saveLetterOfIntent(
      target: PromiseOrValue<string>,
      nbOfShares: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeInvestment(
      _nbOfShares: PromiseOrValue<BigNumberish>,
      _gwp: PromiseOrValue<string>,
      _pricePaidEth: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tld(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber] & { v: BigNumber }>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LoI_arrived_for_GWP(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  UNG_Mcap(overrides?: CallOverrides): Promise<BigNumber>;

  chainName(overrides?: CallOverrides): Promise<string>;

  didGetFundingFrom(
    _gwp: PromiseOrValue<string>,
    _inv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  didInvestTo(
    _gwp: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAuctionMaster(overrides?: CallOverrides): Promise<string>;

  getFundingReport(
    _gwp: PromiseOrValue<string>,
    _inv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      mCapGWP: BigNumber;
      dhash: string;
      loiShares: BigNumber;
      shares: BigNumber;
      price: BigNumber;
      mcap: BigNumber;
    }
  >;

  getGWF(overrides?: CallOverrides): Promise<string>;

  getGroupLOIinvestors(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIntendedLOIShares(
    tg: PromiseOrValue<string>,
    inv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIntendedNbOfShares(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLOIInvestorName(
    tg: PromiseOrValue<string>,
    _iv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketCap(overrides?: CallOverrides): Promise<BigNumber>;

  getMasterCopy(overrides?: CallOverrides): Promise<string>;

  getRegController(overrides?: CallOverrides): Promise<string>;

  getSpice(
    _gwp: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUNGmarketCap(overrides?: CallOverrides): Promise<BigNumber>;

  intendedLOIInvestorName(
    _iv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  intendedLOIShares(
    inv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mCap(
    _gwp: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  saveLetterOfIntent(
    target: PromiseOrValue<string>,
    nbOfShares: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeInvestment(
    _nbOfShares: PromiseOrValue<BigNumberish>,
    _gwp: PromiseOrValue<string>,
    _pricePaidEth: PromiseOrValue<BigNumberish>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tld(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LoI_arrived_for_GWP(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    UNG_Mcap(overrides?: CallOverrides): Promise<BigNumber>;

    chainName(overrides?: CallOverrides): Promise<string>;

    didGetFundingFrom(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    didInvestTo(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAuctionMaster(overrides?: CallOverrides): Promise<string>;

    getFundingReport(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        mCapGWP: BigNumber;
        dhash: string;
        loiShares: BigNumber;
        shares: BigNumber;
        price: BigNumber;
        mcap: BigNumber;
      }
    >;

    getGWF(overrides?: CallOverrides): Promise<string>;

    getGroupLOIinvestors(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIntendedLOIShares(
      tg: PromiseOrValue<string>,
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntendedNbOfShares(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLOIInvestorName(
      tg: PromiseOrValue<string>,
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketCap(overrides?: CallOverrides): Promise<BigNumber>;

    getMasterCopy(overrides?: CallOverrides): Promise<string>;

    getRegController(overrides?: CallOverrides): Promise<string>;

    getSpice(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUNGmarketCap(overrides?: CallOverrides): Promise<BigNumber>;

    intendedLOIInvestorName(
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    intendedLOIShares(
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mCap(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveLetterOfIntent(
      target: PromiseOrValue<string>,
      nbOfShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeInvestment(
      _nbOfShares: PromiseOrValue<BigNumberish>,
      _gwp: PromiseOrValue<string>,
      _pricePaidEth: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tld(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deployment(address,address)"(
      owner?: null,
      theContract?: null
    ): DeploymentEventFilter;
    Deployment(owner?: null, theContract?: null): DeploymentEventFilter;

    "DeploymentIntentions(address,bytes32)"(
      theContract?: null,
      dhash?: null
    ): DeploymentIntentionsEventFilter;
    DeploymentIntentions(
      theContract?: null,
      dhash?: null
    ): DeploymentIntentionsEventFilter;

    "Deposit(address,uint256)"(from?: null, value?: null): DepositEventFilter;
    Deposit(from?: null, value?: null): DepositEventFilter;

    "LetterOfIntent(address,address,uint256)"(
      theInvestorAddress?: null,
      targetGWP_Address?: null,
      nbOfShares?: null
    ): LetterOfIntentEventFilter;
    LetterOfIntent(
      theInvestorAddress?: null,
      targetGWP_Address?: null,
      nbOfShares?: null
    ): LetterOfIntentEventFilter;

    "StoreFunding(address,address,uint256,uint256)"(
      targetGWP_Address?: null,
      theInvestorAddress?: null,
      nbOfShares?: null,
      pricePaid?: null
    ): StoreFundingEventFilter;
    StoreFunding(
      targetGWP_Address?: null,
      theInvestorAddress?: null,
      nbOfShares?: null,
      pricePaid?: null
    ): StoreFundingEventFilter;

    "StoreInvestment(address,address,uint256,uint256)"(
      theInvestorAddress?: null,
      targetGWP_Address?: null,
      nbOfShares?: null,
      pricePaid?: null
    ): StoreInvestmentEventFilter;
    StoreInvestment(
      theInvestorAddress?: null,
      targetGWP_Address?: null,
      nbOfShares?: null,
      pricePaid?: null
    ): StoreInvestmentEventFilter;

    "TestReturn(uint256,uint256,uint256,uint256)"(
      v1?: null,
      v2?: null,
      v3?: null,
      v4?: null
    ): TestReturnEventFilter;
    TestReturn(
      v1?: null,
      v2?: null,
      v3?: null,
      v4?: null
    ): TestReturnEventFilter;
  };

  estimateGas: {
    LoI_arrived_for_GWP(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UNG_Mcap(overrides?: CallOverrides): Promise<BigNumber>;

    chainName(overrides?: CallOverrides): Promise<BigNumber>;

    didGetFundingFrom(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    didInvestTo(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionMaster(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingReport(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGWF(overrides?: CallOverrides): Promise<BigNumber>;

    getGroupLOIinvestors(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntendedLOIShares(
      tg: PromiseOrValue<string>,
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntendedNbOfShares(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLOIInvestorName(
      tg: PromiseOrValue<string>,
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCap(overrides?: CallOverrides): Promise<BigNumber>;

    getMasterCopy(overrides?: CallOverrides): Promise<BigNumber>;

    getRegController(overrides?: CallOverrides): Promise<BigNumber>;

    getSpice(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUNGmarketCap(overrides?: CallOverrides): Promise<BigNumber>;

    intendedLOIInvestorName(
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intendedLOIShares(
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mCap(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveLetterOfIntent(
      target: PromiseOrValue<string>,
      nbOfShares: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeInvestment(
      _nbOfShares: PromiseOrValue<BigNumberish>,
      _gwp: PromiseOrValue<string>,
      _pricePaidEth: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tld(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LoI_arrived_for_GWP(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNG_Mcap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    didGetFundingFrom(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    didInvestTo(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundingReport(
      _gwp: PromiseOrValue<string>,
      _inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGWF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGroupLOIinvestors(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntendedLOIShares(
      tg: PromiseOrValue<string>,
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntendedNbOfShares(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLOIInvestorName(
      tg: PromiseOrValue<string>,
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMasterCopy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSpice(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUNGmarketCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    intendedLOIInvestorName(
      _iv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    intendedLOIShares(
      inv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mCap(
      _gwp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveLetterOfIntent(
      target: PromiseOrValue<string>,
      nbOfShares: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeInvestment(
      _nbOfShares: PromiseOrValue<BigNumberish>,
      _gwp: PromiseOrValue<string>,
      _pricePaidEth: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tld(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
