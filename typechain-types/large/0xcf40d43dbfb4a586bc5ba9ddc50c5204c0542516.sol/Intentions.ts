/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IntentionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LoI_arrived_for_GWP"
      | "UNG_Mcap"
      | "chainName"
      | "didGetFundingFrom"
      | "didInvestTo"
      | "getAuctionMaster"
      | "getFundingReport"
      | "getGWF"
      | "getGroupLOIinvestors"
      | "getIntendedLOIShares"
      | "getIntendedNbOfShares"
      | "getLOIInvestorName"
      | "getMarketCap"
      | "getMasterCopy"
      | "getRegController"
      | "getSpice"
      | "getUNGmarketCap"
      | "intendedLOIInvestorName"
      | "intendedLOIShares"
      | "mCap"
      | "saveLetterOfIntent"
      | "storeInvestment"
      | "tld"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deployment"
      | "DeploymentIntentions"
      | "Deposit"
      | "LetterOfIntent"
      | "StoreFunding"
      | "StoreInvestment"
      | "TestReturn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LoI_arrived_for_GWP",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "UNG_Mcap", values?: undefined): string;
  encodeFunctionData(functionFragment: "chainName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "didGetFundingFrom",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didInvestTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingReport",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getGWF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGroupLOIinvestors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntendedLOIShares",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntendedNbOfShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLOIInvestorName",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMasterCopy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUNGmarketCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intendedLOIInvestorName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "intendedLOIShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mCap", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "saveLetterOfIntent",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeInvestment",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tld", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "LoI_arrived_for_GWP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNG_Mcap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "didGetFundingFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didInvestTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGWF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroupLOIinvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntendedLOIShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntendedNbOfShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLOIInvestorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUNGmarketCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intendedLOIInvestorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intendedLOIShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveLetterOfIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tld", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DeploymentEvent {
  export type InputTuple = [owner: AddressLike, theContract: AddressLike];
  export type OutputTuple = [owner: string, theContract: string];
  export interface OutputObject {
    owner: string;
    theContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeploymentIntentionsEvent {
  export type InputTuple = [theContract: AddressLike, dhash: BytesLike];
  export type OutputTuple = [theContract: string, dhash: string];
  export interface OutputObject {
    theContract: string;
    dhash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [from: AddressLike, value: BigNumberish];
  export type OutputTuple = [from: string, value: bigint];
  export interface OutputObject {
    from: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LetterOfIntentEvent {
  export type InputTuple = [
    theInvestorAddress: AddressLike,
    targetGWP_Address: AddressLike,
    nbOfShares: BigNumberish
  ];
  export type OutputTuple = [
    theInvestorAddress: string,
    targetGWP_Address: string,
    nbOfShares: bigint
  ];
  export interface OutputObject {
    theInvestorAddress: string;
    targetGWP_Address: string;
    nbOfShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoreFundingEvent {
  export type InputTuple = [
    targetGWP_Address: AddressLike,
    theInvestorAddress: AddressLike,
    nbOfShares: BigNumberish,
    pricePaid: BigNumberish
  ];
  export type OutputTuple = [
    targetGWP_Address: string,
    theInvestorAddress: string,
    nbOfShares: bigint,
    pricePaid: bigint
  ];
  export interface OutputObject {
    targetGWP_Address: string;
    theInvestorAddress: string;
    nbOfShares: bigint;
    pricePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoreInvestmentEvent {
  export type InputTuple = [
    theInvestorAddress: AddressLike,
    targetGWP_Address: AddressLike,
    nbOfShares: BigNumberish,
    pricePaid: BigNumberish
  ];
  export type OutputTuple = [
    theInvestorAddress: string,
    targetGWP_Address: string,
    nbOfShares: bigint,
    pricePaid: bigint
  ];
  export interface OutputObject {
    theInvestorAddress: string;
    targetGWP_Address: string;
    nbOfShares: bigint;
    pricePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TestReturnEvent {
  export type InputTuple = [
    v1: BigNumberish,
    v2: BigNumberish,
    v3: BigNumberish,
    v4: BigNumberish
  ];
  export type OutputTuple = [v1: bigint, v2: bigint, v3: bigint, v4: bigint];
  export interface OutputObject {
    v1: bigint;
    v2: bigint;
    v3: bigint;
    v4: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Intentions extends BaseContract {
  connect(runner?: ContractRunner | null): Intentions;
  waitForDeployment(): Promise<this>;

  interface: IntentionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LoI_arrived_for_GWP: TypedContractMethod<
    [target: AddressLike],
    [boolean],
    "view"
  >;

  UNG_Mcap: TypedContractMethod<[], [bigint], "view">;

  chainName: TypedContractMethod<[], [string], "view">;

  didGetFundingFrom: TypedContractMethod<
    [_gwp: AddressLike, _inv: AddressLike],
    [boolean],
    "view"
  >;

  didInvestTo: TypedContractMethod<[_gwp: AddressLike], [boolean], "view">;

  getAuctionMaster: TypedContractMethod<[], [string], "view">;

  getFundingReport: TypedContractMethod<
    [_gwp: AddressLike, _inv: AddressLike],
    [
      [bigint, string, bigint, bigint, bigint, bigint] & {
        mCapGWP: bigint;
        dhash: string;
        loiShares: bigint;
        shares: bigint;
        price: bigint;
        mcap: bigint;
      }
    ],
    "view"
  >;

  getGWF: TypedContractMethod<[], [string], "view">;

  getGroupLOIinvestors: TypedContractMethod<
    [target: AddressLike],
    [string[]],
    "view"
  >;

  getIntendedLOIShares: TypedContractMethod<
    [tg: AddressLike, inv: AddressLike],
    [bigint],
    "view"
  >;

  getIntendedNbOfShares: TypedContractMethod<
    [target: AddressLike],
    [bigint],
    "view"
  >;

  getLOIInvestorName: TypedContractMethod<
    [tg: AddressLike, _iv: AddressLike],
    [string],
    "view"
  >;

  getMarketCap: TypedContractMethod<[], [bigint], "view">;

  getMasterCopy: TypedContractMethod<[], [string], "view">;

  getRegController: TypedContractMethod<[], [string], "view">;

  getSpice: TypedContractMethod<[_gwp: AddressLike], [string], "view">;

  getUNGmarketCap: TypedContractMethod<[], [bigint], "view">;

  intendedLOIInvestorName: TypedContractMethod<
    [_iv: AddressLike],
    [string],
    "view"
  >;

  intendedLOIShares: TypedContractMethod<[inv: AddressLike], [bigint], "view">;

  mCap: TypedContractMethod<[_gwp: AddressLike], [bigint], "view">;

  saveLetterOfIntent: TypedContractMethod<
    [target: AddressLike, nbOfShares: BigNumberish],
    [void],
    "payable"
  >;

  storeInvestment: TypedContractMethod<
    [
      _nbOfShares: BigNumberish,
      _gwp: AddressLike,
      _pricePaidEth: BigNumberish,
      _salt: BytesLike
    ],
    [void],
    "payable"
  >;

  tld: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LoI_arrived_for_GWP"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "UNG_Mcap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "didGetFundingFrom"
  ): TypedContractMethod<
    [_gwp: AddressLike, _inv: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "didInvestTo"
  ): TypedContractMethod<[_gwp: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAuctionMaster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFundingReport"
  ): TypedContractMethod<
    [_gwp: AddressLike, _inv: AddressLike],
    [
      [bigint, string, bigint, bigint, bigint, bigint] & {
        mCapGWP: bigint;
        dhash: string;
        loiShares: bigint;
        shares: bigint;
        price: bigint;
        mcap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGWF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGroupLOIinvestors"
  ): TypedContractMethod<[target: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getIntendedLOIShares"
  ): TypedContractMethod<[tg: AddressLike, inv: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIntendedNbOfShares"
  ): TypedContractMethod<[target: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLOIInvestorName"
  ): TypedContractMethod<[tg: AddressLike, _iv: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMasterCopy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSpice"
  ): TypedContractMethod<[_gwp: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUNGmarketCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "intendedLOIInvestorName"
  ): TypedContractMethod<[_iv: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "intendedLOIShares"
  ): TypedContractMethod<[inv: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "mCap"
  ): TypedContractMethod<[_gwp: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "saveLetterOfIntent"
  ): TypedContractMethod<
    [target: AddressLike, nbOfShares: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "storeInvestment"
  ): TypedContractMethod<
    [
      _nbOfShares: BigNumberish,
      _gwp: AddressLike,
      _pricePaidEth: BigNumberish,
      _salt: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tld"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Deployment"
  ): TypedContractEvent<
    DeploymentEvent.InputTuple,
    DeploymentEvent.OutputTuple,
    DeploymentEvent.OutputObject
  >;
  getEvent(
    key: "DeploymentIntentions"
  ): TypedContractEvent<
    DeploymentIntentionsEvent.InputTuple,
    DeploymentIntentionsEvent.OutputTuple,
    DeploymentIntentionsEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "LetterOfIntent"
  ): TypedContractEvent<
    LetterOfIntentEvent.InputTuple,
    LetterOfIntentEvent.OutputTuple,
    LetterOfIntentEvent.OutputObject
  >;
  getEvent(
    key: "StoreFunding"
  ): TypedContractEvent<
    StoreFundingEvent.InputTuple,
    StoreFundingEvent.OutputTuple,
    StoreFundingEvent.OutputObject
  >;
  getEvent(
    key: "StoreInvestment"
  ): TypedContractEvent<
    StoreInvestmentEvent.InputTuple,
    StoreInvestmentEvent.OutputTuple,
    StoreInvestmentEvent.OutputObject
  >;
  getEvent(
    key: "TestReturn"
  ): TypedContractEvent<
    TestReturnEvent.InputTuple,
    TestReturnEvent.OutputTuple,
    TestReturnEvent.OutputObject
  >;

  filters: {
    "Deployment(address,address)": TypedContractEvent<
      DeploymentEvent.InputTuple,
      DeploymentEvent.OutputTuple,
      DeploymentEvent.OutputObject
    >;
    Deployment: TypedContractEvent<
      DeploymentEvent.InputTuple,
      DeploymentEvent.OutputTuple,
      DeploymentEvent.OutputObject
    >;

    "DeploymentIntentions(address,bytes32)": TypedContractEvent<
      DeploymentIntentionsEvent.InputTuple,
      DeploymentIntentionsEvent.OutputTuple,
      DeploymentIntentionsEvent.OutputObject
    >;
    DeploymentIntentions: TypedContractEvent<
      DeploymentIntentionsEvent.InputTuple,
      DeploymentIntentionsEvent.OutputTuple,
      DeploymentIntentionsEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "LetterOfIntent(address,address,uint256)": TypedContractEvent<
      LetterOfIntentEvent.InputTuple,
      LetterOfIntentEvent.OutputTuple,
      LetterOfIntentEvent.OutputObject
    >;
    LetterOfIntent: TypedContractEvent<
      LetterOfIntentEvent.InputTuple,
      LetterOfIntentEvent.OutputTuple,
      LetterOfIntentEvent.OutputObject
    >;

    "StoreFunding(address,address,uint256,uint256)": TypedContractEvent<
      StoreFundingEvent.InputTuple,
      StoreFundingEvent.OutputTuple,
      StoreFundingEvent.OutputObject
    >;
    StoreFunding: TypedContractEvent<
      StoreFundingEvent.InputTuple,
      StoreFundingEvent.OutputTuple,
      StoreFundingEvent.OutputObject
    >;

    "StoreInvestment(address,address,uint256,uint256)": TypedContractEvent<
      StoreInvestmentEvent.InputTuple,
      StoreInvestmentEvent.OutputTuple,
      StoreInvestmentEvent.OutputObject
    >;
    StoreInvestment: TypedContractEvent<
      StoreInvestmentEvent.InputTuple,
      StoreInvestmentEvent.OutputTuple,
      StoreInvestmentEvent.OutputObject
    >;

    "TestReturn(uint256,uint256,uint256,uint256)": TypedContractEvent<
      TestReturnEvent.InputTuple,
      TestReturnEvent.OutputTuple,
      TestReturnEvent.OutputObject
    >;
    TestReturn: TypedContractEvent<
      TestReturnEvent.InputTuple,
      TestReturnEvent.OutputTuple,
      TestReturnEvent.OutputObject
    >;
  };
}
