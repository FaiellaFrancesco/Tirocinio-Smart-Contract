/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AbstractTM_ENS_intInterface extends utils.Interface {
  functions: {
    "owner(bytes32)": FunctionFragment;
    "recordExists(bytes32)": FunctionFragment;
    "setOwner(bytes32,address)": FunctionFragment;
    "setSubnodeRecord(bytes32,bytes32,address,address,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owner"
      | "recordExists"
      | "setOwner"
      | "setSubnodeRecord"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "owner",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnodeRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeRecord",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NewOwner(bytes32,bytes32,address)": EventFragment;
    "NewResolver(bytes32,address)": EventFragment;
    "NewTTL(bytes32,uint64)": EventFragment;
    "Transfer(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewResolver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTTL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface NewOwnerEventObject {
  node: string;
  label: string;
  owner: string;
}
export type NewOwnerEvent = TypedEvent<
  [string, string, string],
  NewOwnerEventObject
>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface NewResolverEventObject {
  node: string;
  resolver: string;
}
export type NewResolverEvent = TypedEvent<
  [string, string],
  NewResolverEventObject
>;

export type NewResolverEventFilter = TypedEventFilter<NewResolverEvent>;

export interface NewTTLEventObject {
  node: string;
  ttl: BigNumber;
}
export type NewTTLEvent = TypedEvent<[string, BigNumber], NewTTLEventObject>;

export type NewTTLEventFilter = TypedEventFilter<NewTTLEvent>;

export interface TransferEventObject {
  node: string;
  owner: string;
}
export type TransferEvent = TypedEvent<[string, string], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface AbstractTM_ENS_int extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbstractTM_ENS_intInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recordExists(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setOwner(
      node: PromiseOrValue<BytesLike>,
      set_owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      sub_owner: PromiseOrValue<string>,
      sub_resolver: PromiseOrValue<string>,
      sub_ttl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  owner(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  recordExists(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setOwner(
    node: PromiseOrValue<BytesLike>,
    set_owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubnodeRecord(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    sub_owner: PromiseOrValue<string>,
    sub_resolver: PromiseOrValue<string>,
    sub_ttl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    recordExists(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setOwner(
      node: PromiseOrValue<BytesLike>,
      set_owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      sub_owner: PromiseOrValue<string>,
      sub_resolver: PromiseOrValue<string>,
      sub_ttl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "NewOwner(bytes32,bytes32,address)"(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      owner?: null
    ): NewOwnerEventFilter;
    NewOwner(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      owner?: null
    ): NewOwnerEventFilter;

    "NewResolver(bytes32,address)"(
      node?: PromiseOrValue<BytesLike> | null,
      resolver?: null
    ): NewResolverEventFilter;
    NewResolver(
      node?: PromiseOrValue<BytesLike> | null,
      resolver?: null
    ): NewResolverEventFilter;

    "NewTTL(bytes32,uint64)"(
      node?: PromiseOrValue<BytesLike> | null,
      ttl?: null
    ): NewTTLEventFilter;
    NewTTL(
      node?: PromiseOrValue<BytesLike> | null,
      ttl?: null
    ): NewTTLEventFilter;

    "Transfer(bytes32,address)"(
      node?: PromiseOrValue<BytesLike> | null,
      owner?: null
    ): TransferEventFilter;
    Transfer(
      node?: PromiseOrValue<BytesLike> | null,
      owner?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    owner(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordExists(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwner(
      node: PromiseOrValue<BytesLike>,
      set_owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      sub_owner: PromiseOrValue<string>,
      sub_resolver: PromiseOrValue<string>,
      sub_ttl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordExists(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      node: PromiseOrValue<BytesLike>,
      set_owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      sub_owner: PromiseOrValue<string>,
      sub_resolver: PromiseOrValue<string>,
      sub_ttl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
