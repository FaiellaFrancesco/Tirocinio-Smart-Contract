/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AbstractGWF_intInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionContract"
      | "base"
      | "controllerContract"
      | "domainReport"
      | "ens"
      | "getGWF"
      | "getGWProxy"
      | "getIsOwner"
      | "getOwner"
      | "getProxyToken"
      | "resolverContract"
      | "reverseContract"
      | "tld"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controllerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainReport",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(functionFragment: "getGWF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGWProxy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getProxyToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolverContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reverseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tld", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGWF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGWProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIsOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolverContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reverseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tld", data: BytesLike): Result;
}

export interface AbstractGWF_int extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractGWF_int;
  waitForDeployment(): Promise<this>;

  interface: AbstractGWF_intInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionContract: TypedContractMethod<[], [string], "view">;

  base: TypedContractMethod<[], [string], "view">;

  controllerContract: TypedContractMethod<[], [string], "view">;

  domainReport: TypedContractMethod<
    [_dom: string, command: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        report: bigint;
        gwpc: string;
        ptc: string;
        gwfc: string;
        structure: string;
      }
    ],
    "payable"
  >;

  ens: TypedContractMethod<[], [string], "view">;

  getGWF: TypedContractMethod<[], [string], "view">;

  getGWProxy: TypedContractMethod<[_dHash: BytesLike], [string], "view">;

  getIsOwner: TypedContractMethod<
    [_dHash: BytesLike, _owner: AddressLike],
    [boolean],
    "view"
  >;

  getOwner: TypedContractMethod<[_domainHash: BytesLike], [string], "view">;

  getProxyToken: TypedContractMethod<
    [_domainHash: BytesLike],
    [string],
    "view"
  >;

  resolverContract: TypedContractMethod<[], [string], "view">;

  reverseContract: TypedContractMethod<[], [string], "view">;

  tld: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "base"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "controllerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "domainReport"
  ): TypedContractMethod<
    [_dom: string, command: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        report: bigint;
        gwpc: string;
        ptc: string;
        gwfc: string;
        structure: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ens"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGWF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGWProxy"
  ): TypedContractMethod<[_dHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getIsOwner"
  ): TypedContractMethod<
    [_dHash: BytesLike, _owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[_domainHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getProxyToken"
  ): TypedContractMethod<[_domainHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "resolverContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reverseContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tld"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
