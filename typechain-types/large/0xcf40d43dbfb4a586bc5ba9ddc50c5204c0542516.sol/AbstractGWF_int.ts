/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AbstractGWF_intInterface extends utils.Interface {
  functions: {
    "auctionContract()": FunctionFragment;
    "base()": FunctionFragment;
    "controllerContract()": FunctionFragment;
    "domainReport(string,uint256)": FunctionFragment;
    "ens()": FunctionFragment;
    "getGWF()": FunctionFragment;
    "getGWProxy(bytes32)": FunctionFragment;
    "getIsOwner(bytes32,address)": FunctionFragment;
    "getOwner(bytes32)": FunctionFragment;
    "getProxyToken(bytes32)": FunctionFragment;
    "resolverContract()": FunctionFragment;
    "reverseContract()": FunctionFragment;
    "tld()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionContract"
      | "base"
      | "controllerContract"
      | "domainReport"
      | "ens"
      | "getGWF"
      | "getGWProxy"
      | "getIsOwner"
      | "getOwner"
      | "getProxyToken"
      | "resolverContract"
      | "reverseContract"
      | "tld"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controllerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainReport",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(functionFragment: "getGWF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGWProxy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyToken",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolverContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reverseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tld", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGWF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGWProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIsOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolverContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reverseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tld", data: BytesLike): Result;

  events: {};
}

export interface AbstractGWF_int extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbstractGWF_intInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionContract(overrides?: CallOverrides): Promise<[string]>;

    base(overrides?: CallOverrides): Promise<[string]>;

    controllerContract(overrides?: CallOverrides): Promise<[string]>;

    domainReport(
      _dom: PromiseOrValue<string>,
      command: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    getGWF(overrides?: CallOverrides): Promise<[string]>;

    getGWProxy(
      _dHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getIsOwner(
      _dHash: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getOwner(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProxyToken(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { p: string }>;

    resolverContract(overrides?: CallOverrides): Promise<[string]>;

    reverseContract(overrides?: CallOverrides): Promise<[string]>;

    tld(overrides?: CallOverrides): Promise<[string]>;
  };

  auctionContract(overrides?: CallOverrides): Promise<string>;

  base(overrides?: CallOverrides): Promise<string>;

  controllerContract(overrides?: CallOverrides): Promise<string>;

  domainReport(
    _dom: PromiseOrValue<string>,
    command: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ens(overrides?: CallOverrides): Promise<string>;

  getGWF(overrides?: CallOverrides): Promise<string>;

  getGWProxy(
    _dHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getIsOwner(
    _dHash: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getOwner(
    _domainHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProxyToken(
    _domainHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  resolverContract(overrides?: CallOverrides): Promise<string>;

  reverseContract(overrides?: CallOverrides): Promise<string>;

  tld(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionContract(overrides?: CallOverrides): Promise<string>;

    base(overrides?: CallOverrides): Promise<string>;

    controllerContract(overrides?: CallOverrides): Promise<string>;

    domainReport(
      _dom: PromiseOrValue<string>,
      command: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string] & {
        report: BigNumber;
        gwpc: string;
        ptc: string;
        gwfc: string;
        structure: string;
      }
    >;

    ens(overrides?: CallOverrides): Promise<string>;

    getGWF(overrides?: CallOverrides): Promise<string>;

    getGWProxy(
      _dHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getIsOwner(
      _dHash: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOwner(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProxyToken(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    resolverContract(overrides?: CallOverrides): Promise<string>;

    reverseContract(overrides?: CallOverrides): Promise<string>;

    tld(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    auctionContract(overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    controllerContract(overrides?: CallOverrides): Promise<BigNumber>;

    domainReport(
      _dom: PromiseOrValue<string>,
      command: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    getGWF(overrides?: CallOverrides): Promise<BigNumber>;

    getGWProxy(
      _dHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsOwner(
      _dHash: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyToken(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolverContract(overrides?: CallOverrides): Promise<BigNumber>;

    reverseContract(overrides?: CallOverrides): Promise<BigNumber>;

    tld(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainReport(
      _dom: PromiseOrValue<string>,
      command: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGWF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGWProxy(
      _dHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsOwner(
      _dHash: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyToken(
      _domainHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolverContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reverseContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tld(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
