/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AbstractTokenProxy_intInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve_v2d"
      | "balanceOf"
      | "buyPrice"
      | "drainLegacyShares"
      | "drainShares"
      | "name"
      | "owner"
      | "sellPrice"
      | "sell_LA2"
      | "substring"
      | "tokenAllow"
      | "transferFrom_78S"
      | "transfer_G8l"
      | "upgradeGWM"
      | "upgradeTokenMaster"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve_v2d",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "buyPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drainLegacyShares",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drainShares",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sell_LA2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "substring",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAllow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom_78S",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer_G8l",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeGWM",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTokenMaster",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approve_v2d",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drainLegacyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drainShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell_LA2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "substring", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenAllow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom_78S",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer_G8l",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeGWM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTokenMaster",
    data: BytesLike
  ): Result;
}

export interface AbstractTokenProxy_int extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractTokenProxy_int;
  waitForDeployment(): Promise<this>;

  interface: AbstractTokenProxy_intInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve_v2d: TypedContractMethod<
    [spender: AddressLike, tokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[tokenOwner: AddressLike], [bigint], "view">;

  buyPrice: TypedContractMethod<[], [bigint], "view">;

  drainLegacyShares: TypedContractMethod<
    [dHash: BytesLike, from: AddressLike, toReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  drainShares: TypedContractMethod<
    [dHash: BytesLike, from: AddressLike, toReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  sellPrice: TypedContractMethod<[], [bigint], "view">;

  sell_LA2: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  substring: TypedContractMethod<
    [self: BytesLike, offset: BigNumberish, len: BigNumberish],
    [string],
    "view"
  >;

  tokenAllow: TypedContractMethod<
    [tokenOwner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  transferFrom_78S: TypedContractMethod<
    [from: AddressLike, toReceiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transfer_G8l: TypedContractMethod<
    [toReceiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeGWM: TypedContractMethod<
    [dHash: BytesLike, master: AddressLike],
    [void],
    "payable"
  >;

  upgradeTokenMaster: TypedContractMethod<
    [dHash: BytesLike, master: AddressLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve_v2d"
  ): TypedContractMethod<
    [spender: AddressLike, tokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[tokenOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "drainLegacyShares"
  ): TypedContractMethod<
    [dHash: BytesLike, from: AddressLike, toReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "drainShares"
  ): TypedContractMethod<
    [dHash: BytesLike, from: AddressLike, toReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sellPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sell_LA2"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "substring"
  ): TypedContractMethod<
    [self: BytesLike, offset: BigNumberish, len: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenAllow"
  ): TypedContractMethod<
    [tokenOwner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferFrom_78S"
  ): TypedContractMethod<
    [from: AddressLike, toReceiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer_G8l"
  ): TypedContractMethod<
    [toReceiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeGWM"
  ): TypedContractMethod<
    [dHash: BytesLike, master: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgradeTokenMaster"
  ): TypedContractMethod<
    [dHash: BytesLike, master: AddressLike],
    [void],
    "payable"
  >;

  filters: {};
}
