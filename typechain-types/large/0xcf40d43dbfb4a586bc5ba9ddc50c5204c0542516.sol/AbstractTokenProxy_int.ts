/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AbstractTokenProxy_intInterface extends utils.Interface {
  functions: {
    "approve_v2d(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyPrice()": FunctionFragment;
    "drainLegacyShares(bytes32,address,address)": FunctionFragment;
    "drainShares(bytes32,address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "sellPrice()": FunctionFragment;
    "sell_LA2(uint256)": FunctionFragment;
    "substring(bytes,uint256,uint256)": FunctionFragment;
    "tokenAllow(address,address)": FunctionFragment;
    "transferFrom_78S(address,address,uint256)": FunctionFragment;
    "transfer_G8l(address,uint256)": FunctionFragment;
    "upgradeGWM(bytes32,address)": FunctionFragment;
    "upgradeTokenMaster(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve_v2d"
      | "balanceOf"
      | "buyPrice"
      | "drainLegacyShares"
      | "drainShares"
      | "name"
      | "owner"
      | "sellPrice"
      | "sell_LA2"
      | "substring"
      | "tokenAllow"
      | "transferFrom_78S"
      | "transfer_G8l"
      | "upgradeGWM"
      | "upgradeTokenMaster"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve_v2d",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "buyPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drainLegacyShares",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "drainShares",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sell_LA2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "substring",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAllow",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom_78S",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer_G8l",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeGWM",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTokenMaster",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approve_v2d",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drainLegacyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drainShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell_LA2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "substring", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenAllow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom_78S",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer_G8l",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeGWM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTokenMaster",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AbstractTokenProxy_int extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbstractTokenProxy_intInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve_v2d(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { thebalance: BigNumber }>;

    buyPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bp: BigNumber }>;

    drainLegacyShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drainShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { ow: string }>;

    sellPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sp: BigNumber }>;

    sell_LA2(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    substring(
      self: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      len: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenAllow(
      tokenOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokens: BigNumber }>;

    transferFrom_78S(
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transfer_G8l(
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeGWM(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTokenMaster(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve_v2d(
    spender: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    tokenOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyPrice(overrides?: CallOverrides): Promise<BigNumber>;

  drainLegacyShares(
    dHash: PromiseOrValue<BytesLike>,
    from: PromiseOrValue<string>,
    toReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drainShares(
    dHash: PromiseOrValue<BytesLike>,
    from: PromiseOrValue<string>,
    toReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  sellPrice(overrides?: CallOverrides): Promise<BigNumber>;

  sell_LA2(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  substring(
    self: PromiseOrValue<BytesLike>,
    offset: PromiseOrValue<BigNumberish>,
    len: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenAllow(
    tokenOwner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom_78S(
    from: PromiseOrValue<string>,
    toReceiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transfer_G8l(
    toReceiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeGWM(
    dHash: PromiseOrValue<BytesLike>,
    master: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTokenMaster(
    dHash: PromiseOrValue<BytesLike>,
    master: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve_v2d(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    drainLegacyShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    drainShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    sellPrice(overrides?: CallOverrides): Promise<BigNumber>;

    sell_LA2(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    substring(
      self: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      len: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenAllow(
      tokenOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom_78S(
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer_G8l(
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeGWM(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTokenMaster(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approve_v2d(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    drainLegacyShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drainShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    sellPrice(overrides?: CallOverrides): Promise<BigNumber>;

    sell_LA2(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    substring(
      self: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      len: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAllow(
      tokenOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom_78S(
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transfer_G8l(
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeGWM(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTokenMaster(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve_v2d(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drainLegacyShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drainShares(
      dHash: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell_LA2(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    substring(
      self: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      len: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAllow(
      tokenOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom_78S(
      from: PromiseOrValue<string>,
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transfer_G8l(
      toReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeGWM(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTokenMaster(
      dHash: PromiseOrValue<BytesLike>,
      master: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
