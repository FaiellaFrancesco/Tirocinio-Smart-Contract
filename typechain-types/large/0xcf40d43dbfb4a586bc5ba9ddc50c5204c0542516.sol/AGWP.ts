/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AGWPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllTransactions"
      | "getGWF"
      | "getIsOwner"
      | "getMasterCopy"
      | "getOwners"
      | "getTransactionRecord"
      | "getTransactionsCount"
      | "nameAuctionBidBucketLabel"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGWF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIsOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMasterCopy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransactionRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nameAuctionBidBucketLabel",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGWF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIsOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameAuctionBidBucketLabel",
    data: BytesLike
  ): Result;
}

export interface AGWP extends BaseContract {
  connect(runner?: ContractRunner | null): AGWP;
  waitForDeployment(): Promise<this>;

  interface: AGWPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllTransactions: TypedContractMethod<[], [bigint[]], "view">;

  getGWF: TypedContractMethod<[], [string], "view">;

  getIsOwner: TypedContractMethod<[_owner: AddressLike], [boolean], "view">;

  getMasterCopy: TypedContractMethod<[], [string], "view">;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getTransactionRecord: TypedContractMethod<
    [_tNb: BigNumberish],
    [bigint],
    "view"
  >;

  getTransactionsCount: TypedContractMethod<[], [bigint], "view">;

  nameAuctionBidBucketLabel: TypedContractMethod<
    [labelhash: BytesLike, deedContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllTransactions"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getGWF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIsOwner"
  ): TypedContractMethod<[_owner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getMasterCopy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionRecord"
  ): TypedContractMethod<[_tNb: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransactionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nameAuctionBidBucketLabel"
  ): TypedContractMethod<
    [labelhash: BytesLike, deedContract: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
