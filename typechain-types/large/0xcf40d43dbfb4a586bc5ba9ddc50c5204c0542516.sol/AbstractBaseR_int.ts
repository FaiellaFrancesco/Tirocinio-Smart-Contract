/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AbstractBaseR_intInterface extends utils.Interface {
  functions: {
    "baseNode()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "baseNode"): FunctionFragment;

  encodeFunctionData(functionFragment: "baseNode", values?: undefined): string;

  decodeFunctionResult(functionFragment: "baseNode", data: BytesLike): Result;

  events: {
    "NameMigrated(uint256,address,uint256)": EventFragment;
    "NameRegistered(uint256,address,uint256)": EventFragment;
    "NameRenewed(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRenewed"): EventFragment;
}

export interface NameMigratedEventObject {
  id: BigNumber;
  owner: string;
  expires: BigNumber;
}
export type NameMigratedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  NameMigratedEventObject
>;

export type NameMigratedEventFilter = TypedEventFilter<NameMigratedEvent>;

export interface NameRegisteredEventObject {
  id: BigNumber;
  owner: string;
  expires: BigNumber;
}
export type NameRegisteredEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  NameRegisteredEventObject
>;

export type NameRegisteredEventFilter = TypedEventFilter<NameRegisteredEvent>;

export interface NameRenewedEventObject {
  id: BigNumber;
  expires: BigNumber;
}
export type NameRenewedEvent = TypedEvent<
  [BigNumber, BigNumber],
  NameRenewedEventObject
>;

export type NameRenewedEventFilter = TypedEventFilter<NameRenewedEvent>;

export interface AbstractBaseR_int extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbstractBaseR_intInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseNode(overrides?: CallOverrides): Promise<[string]>;
  };

  baseNode(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    baseNode(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NameMigrated(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      expires?: null
    ): NameMigratedEventFilter;
    NameMigrated(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      expires?: null
    ): NameMigratedEventFilter;

    "NameRegistered(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      expires?: null
    ): NameRegisteredEventFilter;
    NameRegistered(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      expires?: null
    ): NameRegisteredEventFilter;

    "NameRenewed(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      expires?: null
    ): NameRenewedEventFilter;
    NameRenewed(
      id?: PromiseOrValue<BigNumberish> | null,
      expires?: null
    ): NameRenewedEventFilter;
  };

  estimateGas: {
    baseNode(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
