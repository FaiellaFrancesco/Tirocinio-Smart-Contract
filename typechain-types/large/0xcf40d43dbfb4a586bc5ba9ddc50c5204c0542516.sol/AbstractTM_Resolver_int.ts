/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AbstractTM_Resolver_intInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ABI"
      | "addr"
      | "contenthash"
      | "name"
      | "setABI"
      | "setAddr(bytes32,uint256,bytes)"
      | "setAddr(bytes32,address)"
      | "setAuthorisation"
      | "setName"
      | "setText"
      | "text"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ABIChanged"
      | "AddrChanged"
      | "AddressChanged"
      | "ContenthashChanged"
      | "NameChanged"
      | "PubkeyChanged"
      | "TextChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ABI",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "contenthash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setABI",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddr(bytes32,uint256,bytes)",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddr(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorisation",
    values: [BytesLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setText",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "text",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contenthash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setABI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddr(bytes32,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddr(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
}

export namespace ABIChangedEvent {
  export type InputTuple = [node: BytesLike, contentType: BigNumberish];
  export type OutputTuple = [node: string, contentType: bigint];
  export interface OutputObject {
    node: string;
    contentType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddrChangedEvent {
  export type InputTuple = [node: BytesLike, a: AddressLike];
  export type OutputTuple = [node: string, a: string];
  export interface OutputObject {
    node: string;
    a: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressChangedEvent {
  export type InputTuple = [
    node: BytesLike,
    coinType: BigNumberish,
    newAddress: BytesLike
  ];
  export type OutputTuple = [
    node: string,
    coinType: bigint,
    newAddress: string
  ];
  export interface OutputObject {
    node: string;
    coinType: bigint;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContenthashChangedEvent {
  export type InputTuple = [node: BytesLike, hash: BytesLike];
  export type OutputTuple = [node: string, hash: string];
  export interface OutputObject {
    node: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameChangedEvent {
  export type InputTuple = [node: BytesLike, name: string];
  export type OutputTuple = [node: string, name: string];
  export interface OutputObject {
    node: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PubkeyChangedEvent {
  export type InputTuple = [node: BytesLike, x: BytesLike, y: BytesLike];
  export type OutputTuple = [node: string, x: string, y: string];
  export interface OutputObject {
    node: string;
    x: string;
    y: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TextChangedEvent {
  export type InputTuple = [node: BytesLike, indexedKey: string, key: string];
  export type OutputTuple = [node: string, indexedKey: string, key: string];
  export interface OutputObject {
    node: string;
    indexedKey: string;
    key: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AbstractTM_Resolver_int extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractTM_Resolver_int;
  waitForDeployment(): Promise<this>;

  interface: AbstractTM_Resolver_intInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ABI: TypedContractMethod<
    [node: BytesLike, contentTypes: BigNumberish],
    [[bigint, string]],
    "view"
  >;

  addr: TypedContractMethod<[node: BytesLike], [string], "view">;

  contenthash: TypedContractMethod<[node: BytesLike], [string], "view">;

  name: TypedContractMethod<[node: BytesLike], [string], "view">;

  setABI: TypedContractMethod<
    [node: BytesLike, contentType: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  "setAddr(bytes32,uint256,bytes)": TypedContractMethod<
    [node: BytesLike, coinType: BigNumberish, a: BytesLike],
    [void],
    "nonpayable"
  >;

  "setAddr(bytes32,address)": TypedContractMethod<
    [node: BytesLike, r_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  setAuthorisation: TypedContractMethod<
    [node: BytesLike, target: AddressLike, isAuthorised: boolean],
    [void],
    "nonpayable"
  >;

  setName: TypedContractMethod<
    [node: BytesLike, _name: string],
    [void],
    "nonpayable"
  >;

  setText: TypedContractMethod<
    [node: BytesLike, key: string, value: string],
    [void],
    "nonpayable"
  >;

  text: TypedContractMethod<[node: BytesLike, key: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ABI"
  ): TypedContractMethod<
    [node: BytesLike, contentTypes: BigNumberish],
    [[bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "contenthash"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setABI"
  ): TypedContractMethod<
    [node: BytesLike, contentType: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddr(bytes32,uint256,bytes)"
  ): TypedContractMethod<
    [node: BytesLike, coinType: BigNumberish, a: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddr(bytes32,address)"
  ): TypedContractMethod<
    [node: BytesLike, r_addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorisation"
  ): TypedContractMethod<
    [node: BytesLike, target: AddressLike, isAuthorised: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setName"
  ): TypedContractMethod<
    [node: BytesLike, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setText"
  ): TypedContractMethod<
    [node: BytesLike, key: string, value: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "text"
  ): TypedContractMethod<[node: BytesLike, key: string], [string], "view">;

  getEvent(
    key: "ABIChanged"
  ): TypedContractEvent<
    ABIChangedEvent.InputTuple,
    ABIChangedEvent.OutputTuple,
    ABIChangedEvent.OutputObject
  >;
  getEvent(
    key: "AddrChanged"
  ): TypedContractEvent<
    AddrChangedEvent.InputTuple,
    AddrChangedEvent.OutputTuple,
    AddrChangedEvent.OutputObject
  >;
  getEvent(
    key: "AddressChanged"
  ): TypedContractEvent<
    AddressChangedEvent.InputTuple,
    AddressChangedEvent.OutputTuple,
    AddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "ContenthashChanged"
  ): TypedContractEvent<
    ContenthashChangedEvent.InputTuple,
    ContenthashChangedEvent.OutputTuple,
    ContenthashChangedEvent.OutputObject
  >;
  getEvent(
    key: "NameChanged"
  ): TypedContractEvent<
    NameChangedEvent.InputTuple,
    NameChangedEvent.OutputTuple,
    NameChangedEvent.OutputObject
  >;
  getEvent(
    key: "PubkeyChanged"
  ): TypedContractEvent<
    PubkeyChangedEvent.InputTuple,
    PubkeyChangedEvent.OutputTuple,
    PubkeyChangedEvent.OutputObject
  >;
  getEvent(
    key: "TextChanged"
  ): TypedContractEvent<
    TextChangedEvent.InputTuple,
    TextChangedEvent.OutputTuple,
    TextChangedEvent.OutputObject
  >;

  filters: {
    "ABIChanged(bytes32,uint256)": TypedContractEvent<
      ABIChangedEvent.InputTuple,
      ABIChangedEvent.OutputTuple,
      ABIChangedEvent.OutputObject
    >;
    ABIChanged: TypedContractEvent<
      ABIChangedEvent.InputTuple,
      ABIChangedEvent.OutputTuple,
      ABIChangedEvent.OutputObject
    >;

    "AddrChanged(bytes32,address)": TypedContractEvent<
      AddrChangedEvent.InputTuple,
      AddrChangedEvent.OutputTuple,
      AddrChangedEvent.OutputObject
    >;
    AddrChanged: TypedContractEvent<
      AddrChangedEvent.InputTuple,
      AddrChangedEvent.OutputTuple,
      AddrChangedEvent.OutputObject
    >;

    "AddressChanged(bytes32,uint256,bytes)": TypedContractEvent<
      AddressChangedEvent.InputTuple,
      AddressChangedEvent.OutputTuple,
      AddressChangedEvent.OutputObject
    >;
    AddressChanged: TypedContractEvent<
      AddressChangedEvent.InputTuple,
      AddressChangedEvent.OutputTuple,
      AddressChangedEvent.OutputObject
    >;

    "ContenthashChanged(bytes32,bytes)": TypedContractEvent<
      ContenthashChangedEvent.InputTuple,
      ContenthashChangedEvent.OutputTuple,
      ContenthashChangedEvent.OutputObject
    >;
    ContenthashChanged: TypedContractEvent<
      ContenthashChangedEvent.InputTuple,
      ContenthashChangedEvent.OutputTuple,
      ContenthashChangedEvent.OutputObject
    >;

    "NameChanged(bytes32,string)": TypedContractEvent<
      NameChangedEvent.InputTuple,
      NameChangedEvent.OutputTuple,
      NameChangedEvent.OutputObject
    >;
    NameChanged: TypedContractEvent<
      NameChangedEvent.InputTuple,
      NameChangedEvent.OutputTuple,
      NameChangedEvent.OutputObject
    >;

    "PubkeyChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      PubkeyChangedEvent.InputTuple,
      PubkeyChangedEvent.OutputTuple,
      PubkeyChangedEvent.OutputObject
    >;
    PubkeyChanged: TypedContractEvent<
      PubkeyChangedEvent.InputTuple,
      PubkeyChangedEvent.OutputTuple,
      PubkeyChangedEvent.OutputObject
    >;

    "TextChanged(bytes32,string,string)": TypedContractEvent<
      TextChangedEvent.InputTuple,
      TextChangedEvent.OutputTuple,
      TextChangedEvent.OutputObject
    >;
    TextChanged: TypedContractEvent<
      TextChangedEvent.InputTuple,
      TextChangedEvent.OutputTuple,
      TextChangedEvent.OutputObject
    >;
  };
}
