/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LiquidityGeneratorTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE"
      | "VERSION"
      | "_charityAddress"
      | "_charityFee"
      | "_liquidityFee"
      | "_taxFee"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "deliver"
      | "excludeFromFee"
      | "excludeFromReward"
      | "includeInReward"
      | "increaseAllowance"
      | "isExcludedFromFee"
      | "isExcludedFromReward"
      | "name"
      | "owner"
      | "reflectionFromToken"
      | "renounceOwnership"
      | "setCharityFeePercent"
      | "setLiquidityFeePercent"
      | "setSwapBackSettings"
      | "setTaxFeePercent"
      | "swapAndLiquifyEnabled"
      | "symbol"
      | "tokenFromReflection"
      | "totalFees"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "MinTokensBeforeSwapUpdated"
      | "OwnershipTransferred"
      | "SwapAndLiquify"
      | "SwapAndLiquifyAmountUpdated"
      | "TokenCreated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_charityAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_charityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_taxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCharityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapBackSettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_charityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_charityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_taxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCharityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapBackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinTokensBeforeSwapUpdatedEvent {
  export type InputTuple = [minTokensBeforeSwap: BigNumberish];
  export type OutputTuple = [minTokensBeforeSwap: bigint];
  export interface OutputObject {
    minTokensBeforeSwap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEvent {
  export type InputTuple = [
    tokensSwapped: BigNumberish,
    ethReceived: BigNumberish,
    tokensIntoLiqudity: BigNumberish
  ];
  export type OutputTuple = [
    tokensSwapped: bigint,
    ethReceived: bigint,
    tokensIntoLiqudity: bigint
  ];
  export interface OutputObject {
    tokensSwapped: bigint;
    ethReceived: bigint;
    tokensIntoLiqudity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyAmountUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    token: AddressLike,
    tokenType: BigNumberish,
    version: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    token: string,
    tokenType: bigint,
    version: bigint
  ];
  export interface OutputObject {
    owner: string;
    token: string;
    tokenType: bigint;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidityGeneratorToken extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidityGeneratorToken;
  waitForDeployment(): Promise<this>;

  interface: LiquidityGeneratorTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  _charityAddress: TypedContractMethod<[], [string], "view">;

  _charityFee: TypedContractMethod<[], [bigint], "view">;

  _liquidityFee: TypedContractMethod<[], [bigint], "view">;

  _taxFee: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deliver: TypedContractMethod<[tAmount: BigNumberish], [void], "nonpayable">;

  excludeFromFee: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  excludeFromReward: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  includeInReward: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isExcludedFromFee: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedFromReward: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reflectionFromToken: TypedContractMethod<
    [tAmount: BigNumberish, deductTransferFee: boolean],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCharityFeePercent: TypedContractMethod<
    [charityFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidityFeePercent: TypedContractMethod<
    [liquidityFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapBackSettings: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTaxFeePercent: TypedContractMethod<
    [taxFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapAndLiquifyEnabled: TypedContractMethod<[], [boolean], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenFromReflection: TypedContractMethod<
    [rAmount: BigNumberish],
    [bigint],
    "view"
  >;

  totalFees: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_charityAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_charityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_liquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_taxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deliver"
  ): TypedContractMethod<[tAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFee"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromReward"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "includeInReward"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isExcludedFromFee"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromReward"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reflectionFromToken"
  ): TypedContractMethod<
    [tAmount: BigNumberish, deductTransferFee: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCharityFeePercent"
  ): TypedContractMethod<[charityFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidityFeePercent"
  ): TypedContractMethod<[liquidityFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapBackSettings"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTaxFeePercent"
  ): TypedContractMethod<[taxFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapAndLiquifyEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenFromReflection"
  ): TypedContractMethod<[rAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "MinTokensBeforeSwapUpdated"
  ): TypedContractEvent<
    MinTokensBeforeSwapUpdatedEvent.InputTuple,
    MinTokensBeforeSwapUpdatedEvent.OutputTuple,
    MinTokensBeforeSwapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquify"
  ): TypedContractEvent<
    SwapAndLiquifyEvent.InputTuple,
    SwapAndLiquifyEvent.OutputTuple,
    SwapAndLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquifyAmountUpdated"
  ): TypedContractEvent<
    SwapAndLiquifyAmountUpdatedEvent.InputTuple,
    SwapAndLiquifyAmountUpdatedEvent.OutputTuple,
    SwapAndLiquifyAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "MinTokensBeforeSwapUpdated(uint256)": TypedContractEvent<
      MinTokensBeforeSwapUpdatedEvent.InputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputObject
    >;
    MinTokensBeforeSwapUpdated: TypedContractEvent<
      MinTokensBeforeSwapUpdatedEvent.InputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SwapAndLiquify(uint256,uint256,uint256)": TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;
    SwapAndLiquify: TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;

    "SwapAndLiquifyAmountUpdated(uint256)": TypedContractEvent<
      SwapAndLiquifyAmountUpdatedEvent.InputTuple,
      SwapAndLiquifyAmountUpdatedEvent.OutputTuple,
      SwapAndLiquifyAmountUpdatedEvent.OutputObject
    >;
    SwapAndLiquifyAmountUpdated: TypedContractEvent<
      SwapAndLiquifyAmountUpdatedEvent.InputTuple,
      SwapAndLiquifyAmountUpdatedEvent.OutputTuple,
      SwapAndLiquifyAmountUpdatedEvent.OutputObject
    >;

    "TokenCreated(address,address,uint8,uint256)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
