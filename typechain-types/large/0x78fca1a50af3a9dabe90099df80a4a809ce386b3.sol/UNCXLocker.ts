/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace StructsLibrary {
  export type FeeStructStruct = {
    ethFee: BigNumberish;
    secondaryFeeToken: AddressLike;
    secondaryTokenFee: BigNumberish;
    secondaryTokenDiscount: BigNumberish;
    liquidityFee: BigNumberish;
    referralPercent: BigNumberish;
    referralToken: AddressLike;
    referralHold: BigNumberish;
    referralDiscount: BigNumberish;
  };

  export type FeeStructStructOutput = [
    ethFee: bigint,
    secondaryFeeToken: string,
    secondaryTokenFee: bigint,
    secondaryTokenDiscount: bigint,
    liquidityFee: bigint,
    referralPercent: bigint,
    referralToken: string,
    referralHold: bigint,
    referralDiscount: bigint
  ] & {
    ethFee: bigint;
    secondaryFeeToken: string;
    secondaryTokenFee: bigint;
    secondaryTokenDiscount: bigint;
    liquidityFee: bigint;
    referralPercent: bigint;
    referralToken: string;
    referralHold: bigint;
    referralDiscount: bigint;
  };
}

export interface UNCXLockerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "gFees"
      | "lockLPToken(address,uint256,uint256,address,bool,address)"
      | "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address,uint16)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      AddressLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "gFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address,uint16)",
    data: BytesLike
  ): Result;
}

export interface UNCXLocker extends BaseContract {
  connect(runner?: ContractRunner | null): UNCXLocker;
  waitForDeployment(): Promise<this>;

  interface: UNCXLockerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  gFees: TypedContractMethod<
    [],
    [StructsLibrary.FeeStructStructOutput],
    "view"
  >;

  "lockLPToken(address,uint256,uint256,address,bool,address)": TypedContractMethod<
    [
      _lpToken: AddressLike,
      _amount: BigNumberish,
      _unlock_date: BigNumberish,
      _referral: AddressLike,
      _fee_in_eth: boolean,
      _withdrawer: AddressLike
    ],
    [void],
    "payable"
  >;

  "lockLPToken(address,uint256,uint256,address,bool,address,uint16)": TypedContractMethod<
    [
      _lpToken: AddressLike,
      _amount: BigNumberish,
      _unlock_date: BigNumberish,
      _referral: AddressLike,
      _fee_in_eth: boolean,
      _withdrawer: AddressLike,
      _countryCode: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "gFees"
  ): TypedContractMethod<[], [StructsLibrary.FeeStructStructOutput], "view">;
  getFunction(
    nameOrSignature: "lockLPToken(address,uint256,uint256,address,bool,address)"
  ): TypedContractMethod<
    [
      _lpToken: AddressLike,
      _amount: BigNumberish,
      _unlock_date: BigNumberish,
      _referral: AddressLike,
      _fee_in_eth: boolean,
      _withdrawer: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"
  ): TypedContractMethod<
    [
      _lpToken: AddressLike,
      _amount: BigNumberish,
      _unlock_date: BigNumberish,
      _referral: AddressLike,
      _fee_in_eth: boolean,
      _withdrawer: AddressLike,
      _countryCode: BigNumberish
    ],
    [void],
    "payable"
  >;

  filters: {};
}
