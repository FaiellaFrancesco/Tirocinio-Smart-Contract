/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StructsLibrary {
  export type FeeStructStruct = {
    ethFee: PromiseOrValue<BigNumberish>;
    secondaryFeeToken: PromiseOrValue<string>;
    secondaryTokenFee: PromiseOrValue<BigNumberish>;
    secondaryTokenDiscount: PromiseOrValue<BigNumberish>;
    liquidityFee: PromiseOrValue<BigNumberish>;
    referralPercent: PromiseOrValue<BigNumberish>;
    referralToken: PromiseOrValue<string>;
    referralHold: PromiseOrValue<BigNumberish>;
    referralDiscount: PromiseOrValue<BigNumberish>;
  };

  export type FeeStructStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    ethFee: BigNumber;
    secondaryFeeToken: string;
    secondaryTokenFee: BigNumber;
    secondaryTokenDiscount: BigNumber;
    liquidityFee: BigNumber;
    referralPercent: BigNumber;
    referralToken: string;
    referralHold: BigNumber;
    referralDiscount: BigNumber;
  };
}

export interface UNCXLockerInterface extends utils.Interface {
  functions: {
    "gFees()": FunctionFragment;
    "lockLPToken(address,uint256,uint256,address,bool,address)": FunctionFragment;
    "lockLPToken(address,uint256,uint256,address,bool,address,uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "gFees"
      | "lockLPToken(address,uint256,uint256,address,bool,address)"
      | "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address,uint16)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "gFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLPToken(address,uint256,uint256,address,bool,address,uint16)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UNCXLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UNCXLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gFees(
      overrides?: CallOverrides
    ): Promise<
      [StructsLibrary.FeeStructStructOutput] & {
        feeStruct: StructsLibrary.FeeStructStructOutput;
      }
    >;

    "lockLPToken(address,uint256,uint256,address,bool,address)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      _countryCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  gFees(
    overrides?: CallOverrides
  ): Promise<StructsLibrary.FeeStructStructOutput>;

  "lockLPToken(address,uint256,uint256,address,bool,address)"(
    _lpToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _unlock_date: PromiseOrValue<BigNumberish>,
    _referral: PromiseOrValue<string>,
    _fee_in_eth: PromiseOrValue<boolean>,
    _withdrawer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"(
    _lpToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _unlock_date: PromiseOrValue<BigNumberish>,
    _referral: PromiseOrValue<string>,
    _fee_in_eth: PromiseOrValue<boolean>,
    _withdrawer: PromiseOrValue<string>,
    _countryCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gFees(
      overrides?: CallOverrides
    ): Promise<StructsLibrary.FeeStructStructOutput>;

    "lockLPToken(address,uint256,uint256,address,bool,address)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      _countryCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    gFees(overrides?: CallOverrides): Promise<BigNumber>;

    "lockLPToken(address,uint256,uint256,address,bool,address)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      _countryCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockLPToken(address,uint256,uint256,address,bool,address)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lockLPToken(address,uint256,uint256,address,bool,address,uint16)"(
      _lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _unlock_date: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _fee_in_eth: PromiseOrValue<boolean>,
      _withdrawer: PromiseOrValue<string>,
      _countryCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
