/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StructsLibrary {
  export type TokenInfoStruct = {
    _name: PromiseOrValue<string>;
    _symbol: PromiseOrValue<string>;
    _supply: PromiseOrValue<BigNumberish>;
    _teamTokenPercent: PromiseOrValue<BigNumberish>;
    _teamTokensWallet: PromiseOrValue<string>;
    _maxWallets: PromiseOrValue<BigNumberish>[];
    _buyTaxes: PromiseOrValue<BigNumberish>[];
    _sellTaxes: PromiseOrValue<BigNumberish>[];
    _incubatorWallet: PromiseOrValue<string>;
    _taxWallet1: PromiseOrValue<string>;
    _taxWallet1Split: PromiseOrValue<BigNumberish>;
    _taxWallet2: PromiseOrValue<string>;
    _isWhitelistLaunch: PromiseOrValue<boolean>;
    lpLockDurationInMonths: PromiseOrValue<BigNumberish>;
    _vestTeamTokens: PromiseOrValue<boolean>;
  };

  export type TokenInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    number[],
    number[],
    number[],
    string,
    string,
    number,
    string,
    boolean,
    BigNumber,
    boolean
  ] & {
    _name: string;
    _symbol: string;
    _supply: BigNumber;
    _teamTokenPercent: BigNumber;
    _teamTokensWallet: string;
    _maxWallets: number[];
    _buyTaxes: number[];
    _sellTaxes: number[];
    _incubatorWallet: string;
    _taxWallet1: string;
    _taxWallet1Split: number;
    _taxWallet2: string;
    _isWhitelistLaunch: boolean;
    lpLockDurationInMonths: BigNumber;
    _vestTeamTokens: boolean;
  };
}

export interface SparkStarterTokenInterface extends utils.Interface {
  functions: {
    "FEE_DIVISOR()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addLp(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "athMcap()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyBackAndBurn(uint256)": FunctionFragment;
    "buyTax()": FunctionFragment;
    "computeMcap()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "dynamicTaxOn()": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "exemptFromFees(address)": FunctionFragment;
    "exemptFromLimits(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "incubatorAddress()": FunctionFragment;
    "isAMMPair(address)": FunctionFragment;
    "lastSwapBackBlock()": FunctionFragment;
    "launchTimestamp()": FunctionFragment;
    "limited()": FunctionFragment;
    "lpPair()": FunctionFragment;
    "maxWallet()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "platformAddress()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellTax()": FunctionFragment;
    "startingMcap()": FunctionFragment;
    "swapTokensAtAmt()": FunctionFragment;
    "symbol()": FunctionFragment;
    "taxAddress1()": FunctionFragment;
    "taxAddress1Split()": FunctionFragment;
    "taxAddress2()": FunctionFragment;
    "teamTokenAddress()": FunctionFragment;
    "tokenInfo()": FunctionFragment;
    "tokenLocker()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingAllowed()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultAddress()": FunctionFragment;
    "vaultUnlocked()": FunctionFragment;
    "whitelistActive()": FunctionFragment;
    "whitelistStartTime()": FunctionFragment;
    "whitelistWallets(address[],bool)": FunctionFragment;
    "whitelistedAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_DIVISOR"
      | "WETH"
      | "addLp"
      | "allowance"
      | "approve"
      | "athMcap"
      | "balanceOf"
      | "buyBackAndBurn"
      | "buyTax"
      | "computeMcap"
      | "decimals"
      | "decreaseAllowance"
      | "dexRouter"
      | "dynamicTaxOn"
      | "enableTrading"
      | "exemptFromFees"
      | "exemptFromLimits"
      | "increaseAllowance"
      | "incubatorAddress"
      | "isAMMPair"
      | "lastSwapBackBlock"
      | "launchTimestamp"
      | "limited"
      | "lpPair"
      | "maxWallet"
      | "name"
      | "owner"
      | "platformAddress"
      | "priceFeed"
      | "renounceOwnership"
      | "sellTax"
      | "startingMcap"
      | "swapTokensAtAmt"
      | "symbol"
      | "taxAddress1"
      | "taxAddress1Split"
      | "taxAddress2"
      | "teamTokenAddress"
      | "tokenInfo"
      | "tokenLocker"
      | "totalSupply"
      | "tradingAllowed"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "vaultAddress"
      | "vaultUnlocked"
      | "whitelistActive"
      | "whitelistStartTime"
      | "whitelistWallets"
      | "whitelistedAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "athMcap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackAndBurn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "buyTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeMcap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dynamicTaxOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exemptFromFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exemptFromLimits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAMMPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSwapBackBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "limited", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startingMcap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxAddress1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxAddress1Split",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxAddress2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenLocker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistWallets",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addLp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "athMcap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBackAndBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeMcap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynamicTaxOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptFromLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAMMPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSwapBackBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limited", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingMcap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxAddress1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxAddress1Split",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxAddress2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAddress",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface SparkStarterToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SparkStarterTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLp(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    athMcap(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyBackAndBurn(
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTax(overrides?: CallOverrides): Promise<[number]>;

    computeMcap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mcapInUSD: BigNumber; mcapInEth: BigNumber }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    dynamicTaxOn(overrides?: CallOverrides): Promise<[boolean]>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exemptFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exemptFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incubatorAddress(overrides?: CallOverrides): Promise<[string]>;

    isAMMPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastSwapBackBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    launchTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    limited(overrides?: CallOverrides): Promise<[boolean]>;

    lpPair(overrides?: CallOverrides): Promise<[string]>;

    maxWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platformAddress(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellTax(overrides?: CallOverrides): Promise<[number]>;

    startingMcap(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapTokensAtAmt(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    taxAddress1(overrides?: CallOverrides): Promise<[string]>;

    taxAddress1Split(overrides?: CallOverrides): Promise<[number]>;

    taxAddress2(overrides?: CallOverrides): Promise<[string]>;

    teamTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number,
        string,
        boolean,
        BigNumber,
        boolean
      ] & {
        _name: string;
        _symbol: string;
        _supply: BigNumber;
        _teamTokenPercent: BigNumber;
        _teamTokensWallet: string;
        _incubatorWallet: string;
        _taxWallet1: string;
        _taxWallet1Split: number;
        _taxWallet2: string;
        _isWhitelistLaunch: boolean;
        lpLockDurationInMonths: BigNumber;
        _vestTeamTokens: boolean;
      }
    >;

    tokenLocker(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultAddress(overrides?: CallOverrides): Promise<[string]>;

    vaultUnlocked(overrides?: CallOverrides): Promise<[boolean]>;

    whitelistActive(overrides?: CallOverrides): Promise<[boolean]>;

    whitelistStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistWallets(
      wallets: PromiseOrValue<string>[],
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistedAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addLp(
    to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  athMcap(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyBackAndBurn(
    minOutput: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTax(overrides?: CallOverrides): Promise<number>;

  computeMcap(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { mcapInUSD: BigNumber; mcapInEth: BigNumber }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  dynamicTaxOn(overrides?: CallOverrides): Promise<boolean>;

  enableTrading(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exemptFromFees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exemptFromLimits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incubatorAddress(overrides?: CallOverrides): Promise<string>;

  isAMMPair(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastSwapBackBlock(overrides?: CallOverrides): Promise<BigNumber>;

  launchTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  limited(overrides?: CallOverrides): Promise<boolean>;

  lpPair(overrides?: CallOverrides): Promise<string>;

  maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  platformAddress(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellTax(overrides?: CallOverrides): Promise<number>;

  startingMcap(overrides?: CallOverrides): Promise<BigNumber>;

  swapTokensAtAmt(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  taxAddress1(overrides?: CallOverrides): Promise<string>;

  taxAddress1Split(overrides?: CallOverrides): Promise<number>;

  taxAddress2(overrides?: CallOverrides): Promise<string>;

  teamTokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      number,
      string,
      boolean,
      BigNumber,
      boolean
    ] & {
      _name: string;
      _symbol: string;
      _supply: BigNumber;
      _teamTokenPercent: BigNumber;
      _teamTokensWallet: string;
      _incubatorWallet: string;
      _taxWallet1: string;
      _taxWallet1Split: number;
      _taxWallet2: string;
      _isWhitelistLaunch: boolean;
      lpLockDurationInMonths: BigNumber;
      _vestTeamTokens: boolean;
    }
  >;

  tokenLocker(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingAllowed(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultAddress(overrides?: CallOverrides): Promise<string>;

  vaultUnlocked(overrides?: CallOverrides): Promise<boolean>;

  whitelistActive(overrides?: CallOverrides): Promise<boolean>;

  whitelistStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistWallets(
    wallets: PromiseOrValue<string>[],
    _whitelist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistedAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addLp(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    athMcap(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBackAndBurn(
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTax(overrides?: CallOverrides): Promise<number>;

    computeMcap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mcapInUSD: BigNumber; mcapInEth: BigNumber }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    dynamicTaxOn(overrides?: CallOverrides): Promise<boolean>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    exemptFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exemptFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incubatorAddress(overrides?: CallOverrides): Promise<string>;

    isAMMPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastSwapBackBlock(overrides?: CallOverrides): Promise<BigNumber>;

    launchTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    limited(overrides?: CallOverrides): Promise<boolean>;

    lpPair(overrides?: CallOverrides): Promise<string>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    platformAddress(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellTax(overrides?: CallOverrides): Promise<number>;

    startingMcap(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensAtAmt(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    taxAddress1(overrides?: CallOverrides): Promise<string>;

    taxAddress1Split(overrides?: CallOverrides): Promise<number>;

    taxAddress2(overrides?: CallOverrides): Promise<string>;

    teamTokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number,
        string,
        boolean,
        BigNumber,
        boolean
      ] & {
        _name: string;
        _symbol: string;
        _supply: BigNumber;
        _teamTokenPercent: BigNumber;
        _teamTokensWallet: string;
        _incubatorWallet: string;
        _taxWallet1: string;
        _taxWallet1Split: number;
        _taxWallet2: string;
        _isWhitelistLaunch: boolean;
        lpLockDurationInMonths: BigNumber;
        _vestTeamTokens: boolean;
      }
    >;

    tokenLocker(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingAllowed(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultAddress(overrides?: CallOverrides): Promise<string>;

    vaultUnlocked(overrides?: CallOverrides): Promise<boolean>;

    whitelistActive(overrides?: CallOverrides): Promise<boolean>;

    whitelistStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistWallets(
      wallets: PromiseOrValue<string>[],
      _whitelist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addLp(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    athMcap(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBackAndBurn(
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTax(overrides?: CallOverrides): Promise<BigNumber>;

    computeMcap(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    dynamicTaxOn(overrides?: CallOverrides): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exemptFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exemptFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incubatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isAMMPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSwapBackBlock(overrides?: CallOverrides): Promise<BigNumber>;

    launchTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    limited(overrides?: CallOverrides): Promise<BigNumber>;

    lpPair(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platformAddress(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellTax(overrides?: CallOverrides): Promise<BigNumber>;

    startingMcap(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensAtAmt(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    taxAddress1(overrides?: CallOverrides): Promise<BigNumber>;

    taxAddress1Split(overrides?: CallOverrides): Promise<BigNumber>;

    taxAddress2(overrides?: CallOverrides): Promise<BigNumber>;

    teamTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInfo(overrides?: CallOverrides): Promise<BigNumber>;

    tokenLocker(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    vaultUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistActive(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistWallets(
      wallets: PromiseOrValue<string>[],
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistedAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLp(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    athMcap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBackAndBurn(
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeMcap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dynamicTaxOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exemptFromFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exemptFromLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incubatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAMMPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSwapBackBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startingMcap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapTokensAtAmt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxAddress1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxAddress1Split(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxAddress2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistWallets(
      wallets: PromiseOrValue<string>[],
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
