/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace StructsLibrary {
  export type TokenInfoStruct = {
    _name: string;
    _symbol: string;
    _supply: BigNumberish;
    _teamTokenPercent: BigNumberish;
    _teamTokensWallet: AddressLike;
    _maxWallets: BigNumberish[];
    _buyTaxes: BigNumberish[];
    _sellTaxes: BigNumberish[];
    _incubatorWallet: AddressLike;
    _taxWallet1: AddressLike;
    _taxWallet1Split: BigNumberish;
    _taxWallet2: AddressLike;
    _isWhitelistLaunch: boolean;
    lpLockDurationInMonths: BigNumberish;
    _vestTeamTokens: boolean;
  };

  export type TokenInfoStructOutput = [
    _name: string,
    _symbol: string,
    _supply: bigint,
    _teamTokenPercent: bigint,
    _teamTokensWallet: string,
    _maxWallets: bigint[],
    _buyTaxes: bigint[],
    _sellTaxes: bigint[],
    _incubatorWallet: string,
    _taxWallet1: string,
    _taxWallet1Split: bigint,
    _taxWallet2: string,
    _isWhitelistLaunch: boolean,
    lpLockDurationInMonths: bigint,
    _vestTeamTokens: boolean
  ] & {
    _name: string;
    _symbol: string;
    _supply: bigint;
    _teamTokenPercent: bigint;
    _teamTokensWallet: string;
    _maxWallets: bigint[];
    _buyTaxes: bigint[];
    _sellTaxes: bigint[];
    _incubatorWallet: string;
    _taxWallet1: string;
    _taxWallet1Split: bigint;
    _taxWallet2: string;
    _isWhitelistLaunch: boolean;
    lpLockDurationInMonths: bigint;
    _vestTeamTokens: boolean;
  };
}

export interface SparkStarterTokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedChecker"
      | "generateToken"
      | "platformAddress"
      | "vaultFactory"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewTokenCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedChecker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateToken",
    values: [StructsLibrary.TokenInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "platformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedChecker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultFactory",
    data: BytesLike
  ): Result;
}

export namespace NewTokenCreatedEvent {
  export type InputTuple = [newToken: AddressLike];
  export type OutputTuple = [newToken: string];
  export interface OutputObject {
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SparkStarterTokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SparkStarterTokenFactory;
  waitForDeployment(): Promise<this>;

  interface: SparkStarterTokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedChecker: TypedContractMethod<[], [string], "view">;

  generateToken: TypedContractMethod<
    [params: StructsLibrary.TokenInfoStruct],
    [string],
    "payable"
  >;

  platformAddress: TypedContractMethod<[], [string], "view">;

  vaultFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedChecker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateToken"
  ): TypedContractMethod<
    [params: StructsLibrary.TokenInfoStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "platformAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NewTokenCreated"
  ): TypedContractEvent<
    NewTokenCreatedEvent.InputTuple,
    NewTokenCreatedEvent.OutputTuple,
    NewTokenCreatedEvent.OutputObject
  >;

  filters: {
    "NewTokenCreated(address)": TypedContractEvent<
      NewTokenCreatedEvent.InputTuple,
      NewTokenCreatedEvent.OutputTuple,
      NewTokenCreatedEvent.OutputObject
    >;
    NewTokenCreated: TypedContractEvent<
      NewTokenCreatedEvent.InputTuple,
      NewTokenCreatedEvent.OutputTuple,
      NewTokenCreatedEvent.OutputObject
    >;
  };
}
