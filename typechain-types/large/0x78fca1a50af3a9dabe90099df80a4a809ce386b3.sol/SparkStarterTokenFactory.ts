/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StructsLibrary {
  export type TokenInfoStruct = {
    _name: PromiseOrValue<string>;
    _symbol: PromiseOrValue<string>;
    _supply: PromiseOrValue<BigNumberish>;
    _teamTokenPercent: PromiseOrValue<BigNumberish>;
    _teamTokensWallet: PromiseOrValue<string>;
    _maxWallets: PromiseOrValue<BigNumberish>[];
    _buyTaxes: PromiseOrValue<BigNumberish>[];
    _sellTaxes: PromiseOrValue<BigNumberish>[];
    _incubatorWallet: PromiseOrValue<string>;
    _taxWallet1: PromiseOrValue<string>;
    _taxWallet1Split: PromiseOrValue<BigNumberish>;
    _taxWallet2: PromiseOrValue<string>;
    _isWhitelistLaunch: PromiseOrValue<boolean>;
    lpLockDurationInMonths: PromiseOrValue<BigNumberish>;
    _vestTeamTokens: PromiseOrValue<boolean>;
  };

  export type TokenInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    number[],
    number[],
    number[],
    string,
    string,
    number,
    string,
    boolean,
    BigNumber,
    boolean
  ] & {
    _name: string;
    _symbol: string;
    _supply: BigNumber;
    _teamTokenPercent: BigNumber;
    _teamTokensWallet: string;
    _maxWallets: number[];
    _buyTaxes: number[];
    _sellTaxes: number[];
    _incubatorWallet: string;
    _taxWallet1: string;
    _taxWallet1Split: number;
    _taxWallet2: string;
    _isWhitelistLaunch: boolean;
    lpLockDurationInMonths: BigNumber;
    _vestTeamTokens: boolean;
  };
}

export interface SparkStarterTokenFactoryInterface extends utils.Interface {
  functions: {
    "authorizedChecker()": FunctionFragment;
    "generateToken((string,string,uint256,uint256,address,uint32[],uint24[],uint24[],address,address,uint24,address,bool,uint256,bool))": FunctionFragment;
    "platformAddress()": FunctionFragment;
    "vaultFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizedChecker"
      | "generateToken"
      | "platformAddress"
      | "vaultFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizedChecker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateToken",
    values: [StructsLibrary.TokenInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "platformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedChecker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultFactory",
    data: BytesLike
  ): Result;

  events: {
    "NewTokenCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTokenCreated"): EventFragment;
}

export interface NewTokenCreatedEventObject {
  newToken: string;
}
export type NewTokenCreatedEvent = TypedEvent<
  [string],
  NewTokenCreatedEventObject
>;

export type NewTokenCreatedEventFilter = TypedEventFilter<NewTokenCreatedEvent>;

export interface SparkStarterTokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SparkStarterTokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizedChecker(overrides?: CallOverrides): Promise<[string]>;

    generateToken(
      params: StructsLibrary.TokenInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    platformAddress(overrides?: CallOverrides): Promise<[string]>;

    vaultFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  authorizedChecker(overrides?: CallOverrides): Promise<string>;

  generateToken(
    params: StructsLibrary.TokenInfoStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  platformAddress(overrides?: CallOverrides): Promise<string>;

  vaultFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    authorizedChecker(overrides?: CallOverrides): Promise<string>;

    generateToken(
      params: StructsLibrary.TokenInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    platformAddress(overrides?: CallOverrides): Promise<string>;

    vaultFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewTokenCreated(address)"(
      newToken?: PromiseOrValue<string> | null
    ): NewTokenCreatedEventFilter;
    NewTokenCreated(
      newToken?: PromiseOrValue<string> | null
    ): NewTokenCreatedEventFilter;
  };

  estimateGas: {
    authorizedChecker(overrides?: CallOverrides): Promise<BigNumber>;

    generateToken(
      params: StructsLibrary.TokenInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    platformAddress(overrides?: CallOverrides): Promise<BigNumber>;

    vaultFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizedChecker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateToken(
      params: StructsLibrary.TokenInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    platformAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
