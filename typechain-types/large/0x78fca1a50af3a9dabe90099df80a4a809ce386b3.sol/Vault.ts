/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VaultInterface extends utils.Interface {
  functions: {
    "FEE_DIVISOR()": FunctionFragment;
    "approveTaxesFullyForTeam()": FunctionFragment;
    "ethDispersed()": FunctionFragment;
    "ethReceived()": FunctionFragment;
    "ethRelease(uint256)": FunctionFragment;
    "forceBuyBack(uint256,uint256)": FunctionFragment;
    "incubatorAddress()": FunctionFragment;
    "incubatorFullApproved()": FunctionFragment;
    "incubatorRejected()": FunctionFragment;
    "overrideAddress()": FunctionFragment;
    "parentToken()": FunctionFragment;
    "tokenRelease(uint256)": FunctionFragment;
    "tokensDispersed()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_DIVISOR"
      | "approveTaxesFullyForTeam"
      | "ethDispersed"
      | "ethReceived"
      | "ethRelease"
      | "forceBuyBack"
      | "incubatorAddress"
      | "incubatorFullApproved"
      | "incubatorRejected"
      | "overrideAddress"
      | "parentToken"
      | "tokenRelease"
      | "tokensDispersed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveTaxesFullyForTeam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethDispersed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethRelease",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceBuyBack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorFullApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorRejected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overrideAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRelease",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensDispersed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTaxesFullyForTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethDispersed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceBuyBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorFullApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensDispersed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveTaxesFullyForTeam(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ethDispersed(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethRelease(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceBuyBack(
      ethAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incubatorAddress(overrides?: CallOverrides): Promise<[string]>;

    incubatorFullApproved(overrides?: CallOverrides): Promise<[boolean]>;

    incubatorRejected(overrides?: CallOverrides): Promise<[boolean]>;

    overrideAddress(overrides?: CallOverrides): Promise<[string]>;

    parentToken(overrides?: CallOverrides): Promise<[string]>;

    tokenRelease(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensDispersed(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  approveTaxesFullyForTeam(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ethDispersed(overrides?: CallOverrides): Promise<BigNumber>;

  ethReceived(overrides?: CallOverrides): Promise<BigNumber>;

  ethRelease(
    ethAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceBuyBack(
    ethAmount: PromiseOrValue<BigNumberish>,
    minOutput: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incubatorAddress(overrides?: CallOverrides): Promise<string>;

  incubatorFullApproved(overrides?: CallOverrides): Promise<boolean>;

  incubatorRejected(overrides?: CallOverrides): Promise<boolean>;

  overrideAddress(overrides?: CallOverrides): Promise<string>;

  parentToken(overrides?: CallOverrides): Promise<string>;

  tokenRelease(
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensDispersed(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    approveTaxesFullyForTeam(overrides?: CallOverrides): Promise<void>;

    ethDispersed(overrides?: CallOverrides): Promise<BigNumber>;

    ethReceived(overrides?: CallOverrides): Promise<BigNumber>;

    ethRelease(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceBuyBack(
      ethAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incubatorAddress(overrides?: CallOverrides): Promise<string>;

    incubatorFullApproved(overrides?: CallOverrides): Promise<boolean>;

    incubatorRejected(overrides?: CallOverrides): Promise<boolean>;

    overrideAddress(overrides?: CallOverrides): Promise<string>;

    parentToken(overrides?: CallOverrides): Promise<string>;

    tokenRelease(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensDispersed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    approveTaxesFullyForTeam(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ethDispersed(overrides?: CallOverrides): Promise<BigNumber>;

    ethReceived(overrides?: CallOverrides): Promise<BigNumber>;

    ethRelease(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceBuyBack(
      ethAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incubatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    incubatorFullApproved(overrides?: CallOverrides): Promise<BigNumber>;

    incubatorRejected(overrides?: CallOverrides): Promise<BigNumber>;

    overrideAddress(overrides?: CallOverrides): Promise<BigNumber>;

    parentToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRelease(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensDispersed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveTaxesFullyForTeam(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ethDispersed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethRelease(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceBuyBack(
      ethAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incubatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incubatorFullApproved(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incubatorRejected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overrideAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenRelease(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensDispersed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
