/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ZAMMSingleLiqETH,
  ZAMMSingleLiqETHInterface,
} from "../../0x7c1e515f1c7f1c4909206bd92f6a4bfc0138e58b.sol/ZAMMSingleLiqETH";

const _abi = [
  {
    inputs: [],
    name: "InvalidPoolKey",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "id1",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "swapFee",
            type: "uint96",
          },
        ],
        internalType: "struct PoolKey",
        name: "poolKey",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount0Min",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1Min",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addSingleLiqETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506105028061001f6000396000f3fe60806040526004361061001e5760003560e01c8063d3a6541f14610023575b600080fd5b610036610031366004610303565b610055565b6040805193845260208401929092529082015260600160405180910390f35b600080808061006a60608b0160408c01610368565b6001600160a01b0316146100915760405163c256622b60e01b815260040160405180910390fd5b600038600038346d08882d72efa6cce4b6a40b24c8605af150604051637466fde760e01b815260023404906000906d08882d72efa6cce4b6a40b24c86090637466fde7906100ee908e9086908f9060019087908e906004016103f8565b6020604051808303816000875af115801561010d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610131919061043a565b6040516309082db560e31b81529091506d08882d72efa6cce4b6a40b24c860906348416da890610171908e90869086908f908f908f908f90600401610453565b6060604051808303816000875af1158015610190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b4919061049e565b604051635323fe1560e11b8152600060048201819052602482015233604482015292975090955093506d08882d72efa6cce4b6a40b24c8609063a647fc2a906064016020604051808303816000875af1158015610215573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610239919061043a565b506d08882d72efa6cce4b6a40b24c86063a647fc2a61025e60808e0160608f01610368565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260208e013560248201523360448201526064016020604051808303816000875af11580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d8919061043a565b50505096509650969350505050565b80356001600160a01b03811681146102fe57600080fd5b919050565b60008060008060008086880361014081121561031e57600080fd5b60a081121561032c57600080fd5b5086955060a0860135945060c0860135935060e0860135925061035261010087016102e7565b9598949750929591949361012090920135925050565b60006020828403121561037a57600080fd5b610383826102e7565b9392505050565b80358252602080820135908301526001600160a01b036103ac604083016102e7565b1660408301526001600160a01b036103c6606083016102e7565b16606083015260808101356bffffffffffffffffffffffff81168082146103ec57600080fd5b80608085015250505050565b6101408101610407828961038a565b60a082019690965260c081019490945291151560e08401526001600160a01b031661010083015261012090910152919050565b60006020828403121561044c57600080fd5b5051919050565b6101608101610462828a61038a565b60a082019790975260c081019590955260e08501939093526101008401919091526001600160a01b031661012083015261014090910152919050565b6000806000606084860312156104b357600080fd5b505081516020830151604090930151909492935091905056fea2646970667358221220d295806844df866e796ab8b284ec7313a862fd5cf554c0473cd3e06300deeb8d64736f6c634300081d0033";

type ZAMMSingleLiqETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZAMMSingleLiqETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZAMMSingleLiqETH__factory extends ContractFactory {
  constructor(...args: ZAMMSingleLiqETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ZAMMSingleLiqETH & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZAMMSingleLiqETH__factory {
    return super.connect(runner) as ZAMMSingleLiqETH__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZAMMSingleLiqETHInterface {
    return new Interface(_abi) as ZAMMSingleLiqETHInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ZAMMSingleLiqETH {
    return new Contract(address, _abi, runner) as unknown as ZAMMSingleLiqETH;
  }
}
