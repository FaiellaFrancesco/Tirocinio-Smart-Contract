/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TicketFactory,
  TicketFactoryInterface,
} from "../../0xf32ba1ce02cfa61ce7de6b5b19ff0ddcc1ab8572.sol/TicketFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "ticket",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "TicketCreated",
    type: "event",
  },
  {
    inputs: [],
    name: "create",
    outputs: [
      {
        internalType: "address",
        name: "ticketAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeCall",
    outputs: [
      {
        internalType: "bytes",
        name: "returnData",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTicketBytecode",
    outputs: [
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getTicketIdentifier",
    outputs: [
      {
        internalType: "uint256",
        name: "ticketIdentifier",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserData",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "tickets",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ticketsIndex",
    outputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "ticketAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "userTicketCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userTickets",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "viewCreateTicketContract",
    outputs: [
      {
        internalType: "address",
        name: "predicted",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610e948061005e6000396000f3fe6080604052600436106100a75760003560e01c8063dd11247e11610064578063dd11247e14610199578063e04d8232146101af578063ecdcdc581461022c578063efc81a8c1461029b578063f2fde38b146102b0578063ffc9896b146102d257600080fd5b80632e04b8e7146100ac578063508b6284146100ec5780638448f106146101245780638da5cb5b146101465780639e5d4c4914610166578063cf260baf14610179575b600080fd5b3480156100b857600080fd5b506100d96100c73660046108ad565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156100f857600080fd5b5061010c6101073660046108ad565b610300565b6040516001600160a01b0390911681526020016100e3565b34801561013057600080fd5b506101396103ba565b6040516100e391906108cf565b34801561015257600080fd5b5060005461010c906001600160a01b031681565b61013961017436600461091d565b6103dd565b34801561018557600080fd5b5061010c6101943660046109a7565b61053d565b3480156101a557600080fd5b506100d960045481565b3480156101bb57600080fd5b506100d96101ca3660046109d1565b6000908152600360209081526040918290208054600182015460029092015484516001600160601b0319606093841b8116828701529390921b909216603482015260488082019290925283518082039092018252606801909252815191012090565b34801561023857600080fd5b506102756102473660046109d1565b6003602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016100e3565b3480156102a757600080fd5b5061010c610575565b3480156102bc57600080fd5b506102d06102cb3660046108ad565b61070f565b005b3480156102de57600080fd5b506102f26102ed3660046108ad565b610814565b6040516100e39291906109ea565b6001600160a01b0381166000908152600160209081526040808320548151606086901b6001600160601b031916818501526034808201839052835180830390910181526054909101909252815191909201208261035b6103ba565b8051602091820120604080516001600160f81b0319818501523060601b6001600160601b031916602182015260358101959095526055808601929092528051808603909201825260759094019093528251920191909120949350505050565b60606040518061040001604052806103c48152602001610a9b6103c49139905090565b6000546060906001600160a01b031633146104395760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064015b60405180910390fd5b834710156104895760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e742062616c616e636520666f722063616c6c0000006044820152606401610430565b600080866001600160a01b03168686866040516104a7929190610a42565b60006040518083038185875af1925050503d80600081146104e4576040519150601f19603f3d011682016040523d82523d6000602084013e6104e9565b606091505b5091509150816105335760405162461bcd60e51b8152602060048201526015602482015274131bddcb5b195d995b0818d85b1b0819985a5b1959605a1b6044820152606401610430565b9695505050505050565b6002602052816000526040600020818154811061055957600080fd5b6000918252602090912001546001600160a01b03169150829050565b3360008181526001602090815260408083205490519293909284926105b5929185910160609290921b6001600160601b0319168252601482015260340190565b6040516020818303038152906040528051906020012090508160016105da9190610a68565b336000908152600160205260408120919091556105f56103ba565b90506020810181518381836000f5955050508361061157600080fd5b3360008181526002602081815260408084208054600181810183559186528386200180546001600160a01b038c81166001600160a01b03199283168117909355845160608101865289815280870193845298885283865284882054898601908152600480548a5260039097529488209851895490821690831617895591519288018054939092169216919091179055519390910192909255815491906106b683610a81565b919050555082846001600160a01b0316336001600160a01b03167f05cdcb45ca099de767f581a60de18f4f6b673b3d7ed30d91d5c98f1bfad3418e4260405161070191815260200190565b60405180910390a450505090565b6000546001600160a01b031633146107635760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610430565b6001600160a01b0381166107b95760405162461bcd60e51b815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152606401610430565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600160209081526040808320546002835292819020805482518185028101850190935280835260609383018282801561088557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610867575b50505050509050915091565b80356001600160a01b03811681146108a857600080fd5b919050565b6000602082840312156108bf57600080fd5b6108c882610891565b9392505050565b602081526000825180602084015260005b818110156108fd57602081860181015160408684010152016108e0565b506000604082850101526040601f19601f83011684010191505092915050565b6000806000806060858703121561093357600080fd5b61093c85610891565b935060208501359250604085013567ffffffffffffffff81111561095f57600080fd5b8501601f8101871361097057600080fd5b803567ffffffffffffffff81111561098757600080fd5b87602082840101111561099957600080fd5b949793965060200194505050565b600080604083850312156109ba57600080fd5b6109c383610891565b946020939093013593505050565b6000602082840312156109e357600080fd5b5035919050565b6000604082018483526040602084015280845180835260608501915060208601925060005b81811015610a365783516001600160a01b0316835260209384019390920191600101610a0f565b50909695505050505050565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a7b57610a7b610a52565b92915050565b600060018201610a9357610a93610a52565b506001019056fe6080604052348015600e575f5ffd5b506103a88061001c5f395ff3fe60806040526004361061002c575f3560e01c806309a483431461015d578063c0406226146101835761006d565b3661006d576040805134815242602082015233917f1d57945c1033a96907a78f6e0ebf6a03815725dac25f33cc806558670344ac88910160405180910390a2005b5f738c68123f200823decf204211d39054127dd75b2a73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100cb573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100ef9190610338565b905073ffffffffffffffffffffffffffffffffffffffff811661010e57005b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117815560405190369082375f813683855af43d805f843e818015610157578184f35b8184fd5b005b348015610168575f5ffd5b505f5460ff1615604051901515815260200160405180910390f35b34801561018e575f5ffd5b5061015b5f738c68123f200823decf204211d39054127dd75b2a73ffffffffffffffffffffffffffffffffffffffff1663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102149190610338565b90503373ffffffffffffffffffffffffffffffffffffffff8216146102bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4d73672e73656e646572206973206e6f7420746865206d616e6167657220616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001178155367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc01908190604490375f5f825f60243560043560601c5af190503d805f5f3e81801561033457815ff35b815ffd5b5f60208284031215610348575f5ffd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461036b575f5ffd5b939250505056fea2646970667358221220b212380e3b9d79c5e4b123e47256221a273f65e23db94a232b64cfa4daf777e864736f6c634300081e0033a2646970667358221220bd1bbd218d38c7a8f93d5dc6920fc85f83636641d70a5b7f61283b6c679375f864736f6c634300081e0033";

type TicketFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicketFactory__factory extends ContractFactory {
  constructor(...args: TicketFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TicketFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TicketFactory__factory {
    return super.connect(runner) as TicketFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketFactoryInterface {
    return new Interface(_abi) as TicketFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TicketFactory {
    return new Contract(address, _abi, runner) as unknown as TicketFactory;
  }
}
