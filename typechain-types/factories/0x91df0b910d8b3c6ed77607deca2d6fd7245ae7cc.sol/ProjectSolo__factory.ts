/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ProjectSolo,
  ProjectSoloInterface,
} from "../../0x91df0b910d8b3c6ed77607deca2d6fd7245ae7cc.sol/ProjectSolo";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "frm",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enableTrading",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxHoldings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapPairAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff60a01b1916600960a01b179081905561002f9060ff600160a01b90910416600a61021a565b61003c90620f4240610230565b600155600380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d1781556005805460ff60a01b19169055600680546001600160b01b031916734ebc5685c735ce4527d7017883f4dfeb3073e3cd17905560006007819055600855600a553480156100b157600080fd5b50600080546001600160a01b031916331781556001546040513092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef916100fb91815260200190565b60405180910390a360015430600090815260046020526040902055610247565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561016c578085048111156101505761015061011b565b600184161561015e57908102905b60019390931c928002610135565b935093915050565b60008261018357506001610214565b8161019057506000610214565b81600181146101a657600281146101b0576101cc565b6001915050610214565b60ff8411156101c1576101c161011b565b50506001821b610214565b5060208310610133831016604e8410600b84101617156101ef575081810a610214565b6101fc6000198484610131565b80600019048211156102105761021061011b565b0290505b92915050565b600061022960ff841683610174565b9392505050565b80820281158282048414176102145761021461011b565b610db6806102566000396000f3fe6080604052600436106100ec5760003560e01c8063715018a61161008a578063a9059cbb11610059578063a9059cbb146102a6578063bd3733fe146102c6578063dd62ed3e146102e6578063e54f4faa1461032c57600080fd5b8063715018a61461022a5780638a8c523c1461023f5780638da5cb5b1461024757806395d89b411461027957600080fd5b806323b872dd116100c657806323b872dd146101865780632ccb1b30146101a6578063313ce567146101c857806370a08231146101f457600080fd5b806306fdde03146100f8578063095ea7b31461013757806318160ddd1461016757600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50604080518082019091526004815263536f6c6f60e01b60208201525b60405161012e9190610ba7565b60405180910390f35b34801561014357600080fd5b50610157610152366004610c0d565b610342565b604051901515815260200161012e565b34801561017357600080fd5b506001545b60405190815260200161012e565b34801561019257600080fd5b506101576101a1366004610c39565b610359565b3480156101b257600080fd5b506101c66101c1366004610c0d565b6103aa565b005b3480156101d457600080fd5b50600054600160a01b900460ff1660405160ff909116815260200161012e565b34801561020057600080fd5b5061017861020f366004610c7a565b6001600160a01b031660009081526004602052604090205490565b34801561023657600080fd5b506101c6610433565b6101c66104da565b34801561025357600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161012e565b34801561028557600080fd5b50604080518082019091526004815263534f4c4f60e01b6020820152610121565b3480156102b257600080fd5b506101576102c1366004610c0d565b610851565b3480156102d257600080fd5b50600554610261906001600160a01b031681565b3480156102f257600080fd5b50610178610301366004610c9e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561033857600080fd5b5061017860095481565b600061034f33848461085e565b5060015b92915050565b6000610366848484610983565b6001600160a01b0384166000908152600260209081526040808320338085529252909120546103a091869161039b9086610b41565b61085e565b5060019392505050565b6103be6006546001600160a01b0316331490565b15610420576001600160a01b0382166000908152600460205260408120546103e7908390610ced565b6001600160a01b038416600090815260046020526040812080549293508392909190610414908490610ced565b9091555061042f915050565b600061042c8183610ced565b50505b5050565b336104466000546001600160a01b031690565b6001600160a01b0316146104905760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71037bbb732b960a11b60448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b336104ed6000546001600160a01b031690565b6001600160a01b0316146105325760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71037bbb732b960a11b6044820152606401610487565b600554600160a01b900460ff161561054957600080fd5b6003546001546105669130916001600160a01b039091169061085e565b600360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190610d00565b6001600160a01b031663c9c6539630600360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190610d00565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190610d00565b600580546001600160a01b039283166001600160a01b03199091161790556003541663f305d719343061071c816001600160a01b031660009081526004602052604090205490565b6000806107316000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610799573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107be9190610d1d565b505060055460035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190610d4b565b506005805460ff60a01b1916600160a01b179055565b600061034f338484610983565b6001600160a01b0383166108c05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610487565b6001600160a01b0382166109215760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610487565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166109d95760405162461bcd60e51b815260206004820152601c60248201527f5472616e7366657220746f20746865207a65726f2061646472657373000000006044820152606401610487565b6001600160a01b038316610a3e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a205472616e736665722066726f6d20746865207a65726f206164604482015265323932b9b99760d11b6064820152608401610487565b60008111610aa05760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610487565b6001600160a01b03831660009081526004602052604081208054839290610ac8908490610ced565b90915550506001600160a01b03821660009081526004602052604081208054839290610af5908490610d6d565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161097691815260200190565b600082821115610b935760405162461bcd60e51b815260206004820181905260248201527f536166654d6174683a20207375627472616374696f6e206f766572666c6f772e6044820152606401610487565b6000610b9f8385610ced565b949350505050565b602081526000825180602084015260005b81811015610bd55760208186018101516040868401015201610bb8565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b0381168114610c0a57600080fd5b50565b60008060408385031215610c2057600080fd5b8235610c2b81610bf5565b946020939093013593505050565b600080600060608486031215610c4e57600080fd5b8335610c5981610bf5565b92506020840135610c6981610bf5565b929592945050506040919091013590565b600060208284031215610c8c57600080fd5b8135610c9781610bf5565b9392505050565b60008060408385031215610cb157600080fd5b8235610cbc81610bf5565b91506020830135610ccc81610bf5565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561035357610353610cd7565b600060208284031215610d1257600080fd5b8151610c9781610bf5565b600080600060608486031215610d3257600080fd5b5050815160208301516040909301519094929350919050565b600060208284031215610d5d57600080fd5b81518015158114610c9757600080fd5b8082018082111561035357610353610cd756fea264697066735822122056fa5d90f82e1fdaed49b03ca38490d7a2f65fee1ec465ca93405e7030522d7964736f6c634300081d0033";

type ProjectSoloConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProjectSoloConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProjectSolo__factory extends ContractFactory {
  constructor(...args: ProjectSoloConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ProjectSolo & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ProjectSolo__factory {
    return super.connect(runner) as ProjectSolo__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProjectSoloInterface {
    return new Interface(_abi) as ProjectSoloInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ProjectSolo {
    return new Contract(address, _abi, runner) as unknown as ProjectSolo;
  }
}
