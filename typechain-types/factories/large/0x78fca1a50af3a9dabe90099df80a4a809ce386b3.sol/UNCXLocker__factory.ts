/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  UNCXLocker,
  UNCXLockerInterface,
} from "../../../large/0x78fca1a50af3a9dabe90099df80a4a809ce386b3.sol/UNCXLocker";

const _abi = [
  {
    inputs: [],
    name: "gFees",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "ethFee",
            type: "uint256",
          },
          {
            internalType: "contract IERCBurn",
            name: "secondaryFeeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "secondaryTokenFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "secondaryTokenDiscount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidityFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralPercent",
            type: "uint256",
          },
          {
            internalType: "contract IERCBurn",
            name: "referralToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "referralHold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralDiscount",
            type: "uint256",
          },
        ],
        internalType: "struct StructsLibrary.FeeStruct",
        name: "feeStruct",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlock_date",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_referral",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_fee_in_eth",
        type: "bool",
      },
      {
        internalType: "address payable",
        name: "_withdrawer",
        type: "address",
      },
    ],
    name: "lockLPToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlock_date",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_referral",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_fee_in_eth",
        type: "bool",
      },
      {
        internalType: "address payable",
        name: "_withdrawer",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_countryCode",
        type: "uint16",
      },
    ],
    name: "lockLPToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class UNCXLocker__factory {
  static readonly abi = _abi;
  static createInterface(): UNCXLockerInterface {
    return new Interface(_abi) as UNCXLockerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UNCXLocker {
    return new Contract(address, _abi, runner) as unknown as UNCXLocker;
  }
}
