/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Babylon,
  BabylonInterface,
} from "../../../large/0x949f5a65d700a45011cc3c5e2b66b89bee034e99.sol/Babylon";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "to",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "bulktransfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051806040016040528060078152602001662130b13cb637b760c91b815250604051806040016040528060048152602001634241425960e01b815250816003908161005d91906102c4565b50600461006a82826102c4565b5050506100b2733a6e7393aca522ee1b6b070e68ca93d95af2d5576100936100b760201b60201c565b61009e90600a610481565b6100ad906402540be400610497565b6100bc565b6104c1565b601290565b6001600160a01b0382166100eb5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b6100f7600083836100fb565b5050565b6001600160a01b03831661012657806002600082825461011b91906104ae565b909155506101989050565b6001600160a01b038316600090815260208190526040902054818110156101795760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100e2565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166101b4576002805482900390556101d3565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161021891815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061024f57607f821691505b60208210810361026f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102bf57806000526020600020601f840160051c8101602085101561029c5750805b601f840160051c820191505b818110156102bc57600081556001016102a8565b50505b505050565b81516001600160401b038111156102dd576102dd610225565b6102f1816102eb845461023b565b84610275565b6020601f821160018114610325576000831561030d5750848201515b600019600385901b1c1916600184901b1784556102bc565b600084815260208120601f198516915b828110156103555787850151825560209485019460019092019101610335565b50848210156103735786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156103d3578085048111156103b7576103b7610382565b60018416156103c557908102905b60019390931c92800261039c565b935093915050565b6000826103ea5750600161047b565b816103f75750600061047b565b816001811461040d576002811461041757610433565b600191505061047b565b60ff84111561042857610428610382565b50506001821b61047b565b5060208310610133831016604e8410600b8410161715610456575081810a61047b565b6104636000198484610398565b806000190482111561047757610477610382565b0290505b92915050565b600061049060ff8416836103db565b9392505050565b808202811582820484141761047b5761047b610382565b8082018082111561047b5761047b610382565b61092a806104d06000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063313ce56711610066578063313ce5671461011c57806370a082311461012b57806395d89b4114610154578063a9059cbb1461015c578063dd62ed3e1461016f57600080fd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e45780631c380e53146100f657806323b872dd14610109575b600080fd5b6100ab6101a8565b6040516100b89190610676565b60405180910390f35b6100d46100cf3660046106e0565b61023a565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d4610104366004610720565b610254565b6100d46101173660046107f8565b610299565b604051601281526020016100b8565b6100e8610139366004610835565b6001600160a01b031660009081526020819052604090205490565b6100ab610366565b6100d461016a3660046106e0565b610375565b6100e861017d366004610850565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101b790610883565b80601f01602080910402602001604051908101604052809291908181526020018280546101e390610883565b80156102305780601f1061020557610100808354040283529160200191610230565b820191906000526020600020905b81548152906001019060200180831161021357829003601f168201915b5050505050905090565b600033610248818585610383565b60019150505b92915050565b600033815b845181101561028e5761028682868381518110610278576102786108bd565b602002602001015186610395565b600101610259565b506001949350505050565b600073b046e3e5a31bc012fb1c1f88b9be500edcf6540a3314806102d05750738d6ba07ad5f88e65756e383018c871772611f9fe33145b806102ee575073c11ded40508c9b3c3764ff77617553559644e4ad33145b8061030c575073577f28bdef359e5f1c1b2089962b7e26fd37689633145b8061032a5750734752179069086bcdd30729f1092f4fc1f557ffc033145b156103425761033a848484610395565b50600161035f565b3361034e8582856103f9565b610359858585610395565b60019150505b9392505050565b6060600480546101b790610883565b600033610248818585610395565b6103908383836001610477565b505050565b6001600160a01b0383166103c457604051634b637e8f60e11b8152600060048201526024015b60405180910390fd5b6001600160a01b0382166103ee5760405163ec442f0560e01b8152600060048201526024016103bb565b61039083838361054c565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610471578181101561046257604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103bb565b61047184848484036000610477565b50505050565b6001600160a01b0384166104a15760405163e602df0560e01b8152600060048201526024016103bb565b6001600160a01b0383166104cb57604051634a1406b160e11b8152600060048201526024016103bb565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561047157826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161053e91815260200190565b60405180910390a350505050565b6001600160a01b03831661057757806002600082825461056c91906108d3565b909155506105e99050565b6001600160a01b038316600090815260208190526040902054818110156105ca5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103bb565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661060557600280548290039055610624565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161066991815260200190565b60405180910390a3505050565b602081526000825180602084015260005b818110156106a45760208186018101516040868401015201610687565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146106db57600080fd5b919050565b600080604083850312156106f357600080fd5b6106fc836106c4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561073357600080fd5b823567ffffffffffffffff81111561074a57600080fd5b8301601f8101851361075b57600080fd5b803567ffffffffffffffff8111156107755761077561070a565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156107a2576107a261070a565b6040529182526020818401810192908101888411156107c057600080fd5b6020850194505b838510156107e6576107d8856106c4565b8152602094850194016107c7565b50976020969096013596505050505050565b60008060006060848603121561080d57600080fd5b610816846106c4565b9250610824602085016106c4565b929592945050506040919091013590565b60006020828403121561084757600080fd5b61035f826106c4565b6000806040838503121561086357600080fd5b61086c836106c4565b915061087a602084016106c4565b90509250929050565b600181811c9082168061089757607f821691505b6020821081036108b757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561024e57634e487b7160e01b600052601160045260246000fdfea264697066735822122012250e65d313f4cf3fac6780d84c4002a3c29e5263ee9d10ce3e52e75f5dabb264736f6c634300081e0033";

type BabylonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BabylonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Babylon__factory extends ContractFactory {
  constructor(...args: BabylonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Babylon> {
    return super.deploy(overrides || {}) as Promise<Babylon>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Babylon {
    return super.attach(address) as Babylon;
  }
  override connect(signer: Signer): Babylon__factory {
    return super.connect(signer) as Babylon__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BabylonInterface {
    return new utils.Interface(_abi) as BabylonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Babylon {
    return new Contract(address, _abi, signerOrProvider) as Babylon;
  }
}
