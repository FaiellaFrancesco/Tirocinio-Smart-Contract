/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LeverageAI,
  LeverageAIInterface,
} from "../../../large/0x5df7d8b42593740131eb4180c78659d4365b9e77.sol/LeverageAI";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "OpenTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600a6080908152694c65766572616765414960b01b60a0526008906100299082610681565b506040805180820190915260088152674c4556455241474560c01b60208201526009906100569082610681565b506100636012600a61083e565b610072906402540be400610854565b600a5534801561008157600080fd5b503360088054610090906105f9565b80601f01602080910402602001604051908101604052809291908181526020018280546100bc906105f9565b80156101095780601f106100de57610100808354040283529160200191610109565b820191906000526020600020905b8154815290600101906020018083116100ec57829003601f168201915b50505050506009805461011b906105f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610147906105f9565b80156101945780601f1061016957610100808354040283529160200191610194565b820191906000526020600020905b81548152906001019060200180831161017757829003601f168201915b505050505081600390816101a89190610681565b5060046101b58282610681565b5050506001600160a01b0381166101e757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101f081610233565b50336000818152600660205260408082208054600160ff1991821681179092553084529190922080549091169091179055600a5461022e9190610285565b61087e565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166102af5760405163ec442f0560e01b8152600060048201526024016101de565b6102bb600083836102bf565b5050565b3260009081526006602052604090205460ff16156102e7576102e28383836104b9565b505050565b600c54600160a01b900460ff1661032f5760405162461bcd60e51b815260206004820152600c60248201526b13dc195b881b9bdd081e595d60a21b60448201526064016101de565b600c546001600160a01b03838116911614801561035557506001600160a01b0383163014155b156103e5576001600160a01b0383166000908152600760205260409020543a11801561039857506001600160a01b03831660009081526007602052604090205415155b156103e55760405162461bcd60e51b815260206004820152601f60248201527f4578636565647320746865205f4d41585f414444206f6e2073656c6c2074780060448201526064016101de565b600c546001600160a01b038381169116148015906104115750600c546001600160a01b03848116911614155b156104b2576001600160a01b0383166000908152600760205260409020543a11801561045457506001600160a01b03831660009081526007602052604090205415155b156104b25760405162461bcd60e51b815260206004820152602860248201527f4578636565647320746865205f4d41585f414444206f6e207472616e73666572604482015267040cce4deda40e8f60c31b60648201526084016101de565b6102e28383835b6001600160a01b0383166104e45780600260008282546104d9919061086b565b909155506105569050565b6001600160a01b038316600090815260208190526040902054818110156105375760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016101de565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661057257600280548290039055610591565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105d691815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061060d57607f821691505b60208210810361062d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102e257806000526020600020601f840160051c8101602085101561065a5750805b601f840160051c820191505b8181101561067a5760008155600101610666565b5050505050565b81516001600160401b0381111561069a5761069a6105e3565b6106ae816106a884546105f9565b84610633565b6020601f8211600181146106e257600083156106ca5750848201515b600019600385901b1c1916600184901b17845561067a565b600084815260208120601f198516915b8281101561071257878501518255602094850194600190920191016106f2565b50848210156107305786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b6001841115610790578085048111156107745761077461073f565b600184161561078257908102905b60019390931c928002610759565b935093915050565b6000826107a757506001610838565b816107b457506000610838565b81600181146107ca57600281146107d4576107f0565b6001915050610838565b60ff8411156107e5576107e561073f565b50506001821b610838565b5060208310610133831016604e8410600b8410161715610813575081810a610838565b6108206000198484610755565b80600019048211156108345761083461073f565b0290505b92915050565b600061084d60ff841683610798565b9392505050565b80820281158282048414176108385761083861073f565b808201808211156108385761083861073f565b610cb78061088d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b411461019f578063a9059cbb146101a7578063dd62ed3e146101ba578063f2fde38b146101f357600080fd5b806370a0823114610153578063715018a61461017c5780638da5cb5b1461018457600080fd5b806306fdde03146100d4578063095ea7b3146100f25780630f8540e41461011557806318160ddd1461011f57806323b872dd14610131578063313ce56714610144575b600080fd5b6100dc610206565b6040516100e99190610adc565b60405180910390f35b610105610100366004610b3f565b610298565b60405190151581526020016100e9565b61011d6102e2565b005b6002545b6040519081526020016100e9565b61010561013f366004610b6b565b610491565b604051601281526020016100e9565b610123610161366004610bac565b6001600160a01b031660009081526020819052604090205490565b61011d6104d0565b6005546040516001600160a01b0390911681526020016100e9565b6100dc6104e4565b6101056101b5366004610b3f565b6104f3565b6101236101c8366004610bd0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61011d610201366004610bac565b610501565b60606008805461021590610c09565b80601f016020809104026020016040519081016040528092919081815260200182805461024190610c09565b801561028e5780601f106102635761010080835404028352916020019161028e565b820191906000526020600020905b81548152906001019060200180831161027157829003601f168201915b5050505050905090565b3360009081526006602052604081205460ff16156102cc576001600160a01b03831660009081526007602052604090208290555b6102d68383610544565b50600190505b92915050565b6102ea610552565b600b80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103729190610c43565b6001600160a01b031663e6a4390530600b60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610c43565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190610c43565b600c80546001600160a81b0319166001600160a01b039290921691909117600160a01b179055565b3360009081526006602052604081205460ff16156104b9576104b484848461057f565b6104c6565b6104c48484846106a9565b505b5060019392505050565b6104d8610552565b6104e260006106cd565b565b60606009805461021590610c09565b6000336104c681858561071f565b610509610552565b6001600160a01b03811661053857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610541816106cd565b50565b6000336104c6818585610783565b6005546001600160a01b031633146104e25760405163118cdaa760e01b815233600482015260240161052f565b6001600160a01b0383166105aa57806002600082825461059f9190610c60565b9091555061061c9050565b6001600160a01b038316600090815260208190526040902054818110156105fd5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161052f565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661063857600280548290039055610657565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161069c91815260200190565b60405180910390a3505050565b6000336106b7858285610790565b6106c285858561071f565b506001949350505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03831661074957604051634b637e8f60e11b81526000600482015260240161052f565b6001600160a01b0382166107735760405163ec442f0560e01b81526000600482015260240161052f565b61077e83838361080e565b505050565b61077e8383836001610a07565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461080857818110156107f957604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161052f565b61080884848484036000610a07565b50505050565b3260009081526006602052604090205460ff16156108315761077e83838361057f565b600c54600160a01b900460ff166108795760405162461bcd60e51b815260206004820152600c60248201526b13dc195b881b9bdd081e595d60a21b604482015260640161052f565b600c546001600160a01b03838116911614801561089f57506001600160a01b0383163014155b1561092f576001600160a01b0383166000908152600760205260409020543a1180156108e257506001600160a01b03831660009081526007602052604090205415155b1561092f5760405162461bcd60e51b815260206004820152601f60248201527f4578636565647320746865205f4d41585f414444206f6e2073656c6c20747800604482015260640161052f565b600c546001600160a01b0383811691161480159061095b5750600c546001600160a01b03848116911614155b156109fc576001600160a01b0383166000908152600760205260409020543a11801561099e57506001600160a01b03831660009081526007602052604090205415155b156109fc5760405162461bcd60e51b815260206004820152602860248201527f4578636565647320746865205f4d41585f414444206f6e207472616e73666572604482015267040cce4deda40e8f60c31b606482015260840161052f565b61077e83838361057f565b6001600160a01b038416610a315760405163e602df0560e01b81526000600482015260240161052f565b6001600160a01b038316610a5b57604051634a1406b160e11b81526000600482015260240161052f565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561080857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ace91815260200190565b60405180910390a350505050565b602081526000825180602084015260005b81811015610b0a5760208186018101516040868401015201610aed565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461054157600080fd5b60008060408385031215610b5257600080fd5b8235610b5d81610b2a565b946020939093013593505050565b600080600060608486031215610b8057600080fd5b8335610b8b81610b2a565b92506020840135610b9b81610b2a565b929592945050506040919091013590565b600060208284031215610bbe57600080fd5b8135610bc981610b2a565b9392505050565b60008060408385031215610be357600080fd5b8235610bee81610b2a565b91506020830135610bfe81610b2a565b809150509250929050565b600181811c90821680610c1d57607f821691505b602082108103610c3d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610c5557600080fd5b8151610bc981610b2a565b808201808211156102dc57634e487b7160e01b600052601160045260246000fdfea264697066735822122091eed856ec99111701ac7e11accb760e70c490f6b5f15ecd8f59d32a897badc264736f6c634300081a0033";

type LeverageAIConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LeverageAIConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LeverageAI__factory extends ContractFactory {
  constructor(...args: LeverageAIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LeverageAI & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LeverageAI__factory {
    return super.connect(runner) as LeverageAI__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LeverageAIInterface {
    return new Interface(_abi) as LeverageAIInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LeverageAI {
    return new Contract(address, _abi, runner) as unknown as LeverageAI;
  }
}
