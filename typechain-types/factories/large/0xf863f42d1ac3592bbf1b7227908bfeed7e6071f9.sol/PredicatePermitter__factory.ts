/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PredicatePermitter,
  PredicatePermitterInterface,
} from "../../../large/0xf863f42d1ac3592bbf1b7227908bfeed7e6071f9.sol/PredicatePermitter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "ERC1967InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC1967NonPayable",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedCall",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "PolicyIDEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "UUPSUnauthorizedCallContext",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "slot",
        type: "bytes32",
      },
    ],
    name: "UUPSUnsupportedProxiableUUID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "policyID",
        type: "string",
      },
    ],
    name: "PolicySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "predicateManager",
        type: "address",
      },
    ],
    name: "PredicateManagerSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPolicy",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPredicateManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_predicateManager",
        type: "address",
      },
      {
        internalType: "string",
        name: "policyID",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "encodedData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "permission",
        type: "bytes",
      },
    ],
    name: "permit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "policyID",
        type: "string",
      },
    ],
    name: "setPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "serviceManager",
        type: "address",
      },
    ],
    name: "setPredicateManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516117486100fd6000396000818161072001528181610749015261088f01526117486000f3fe6080604052600436106100a75760003560e01c8063901afa5f11610064578063901afa5f1461016b578063a4b3bc011461019b578063ad3cb1cc146101b0578063ce1e4626146101ee578063e0a7704a14610203578063f2fde38b1461022357600080fd5b80634571e3a6146100ac5780634f1ef286146100ce57806352d1902d146100e15780636b4c991b14610109578063715018a6146101295780638da5cb5b1461013e575b600080fd5b3480156100b857600080fd5b506100cc6100c7366004610e9e565b610243565b005b6100cc6100dc366004610fe7565b61046e565b3480156100ed57600080fd5b506100f661048d565b6040519081526020015b60405180910390f35b34801561011557600080fd5b506100cc610124366004611034565b6104aa565b34801561013557600080fd5b506100cc61052e565b34801561014a57600080fd5b50610153610542565b6040516001600160a01b039091168152602001610100565b34801561017757600080fd5b5061018b610186366004611075565b610577565b6040519015158152602001610100565b3480156101a757600080fd5b506101536105d8565b3480156101bc57600080fd5b506101e1604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101009190611152565b3480156101fa57600080fd5b506101e16105e7565b34801561020f57600080fd5b506100cc61021e366004611165565b6105f1565b34801561022f57600080fd5b506100cc61023e366004611165565b610660565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156102885750825b90506000826001600160401b031660011480156102a45750303b155b9050811580156102b2575080155b156102d05760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156102fa57845460ff60401b1916600160401b1785555b6001600160a01b038916158061031757506001600160a01b038816155b1561033557604051639fabe1c160e01b815260040160405180910390fd5b600086900361035757604051634a40f49b60e01b815260040160405180910390fd5b610360896106a3565b6103686106b4565b6103a88888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106bc92505050565b7f115a7076b27726a2ae5bd26756c4e4ec6b292eb6151f84772978a722b09271a587876040516103d9929190611180565b60405180910390a16040516001600160a01b03891681527f282797d873547dfc33f40236c7b1e0c8c816e2784b7ede18c24a90179446b0269060200160405180910390a1831561046357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b610476610715565b61047f826107ba565b61048982826107c2565b5050565b6000610497610884565b506000805160206116d383398151915290565b6104b26108cd565b6104f182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108ff92505050565b7f115a7076b27726a2ae5bd26756c4e4ec6b292eb6151f84772978a722b09271a58282604051610522929190611180565b60405180910390a15050565b6105366108cd565b6105406000610939565b565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b600080610586838501856112c8565b90506105cc8187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c91506109aa9050565b98975050505050505050565b60006105e2610b37565b905090565b60606105e2610b4e565b6105f96108cd565b6000805160206116f383398151915280546001600160a01b0319166001600160a01b0383161790556040516001600160a01b03821681527f282797d873547dfc33f40236c7b1e0c8c816e2784b7ede18c24a90179446b0269060200160405180910390a150565b6106686108cd565b6001600160a01b03811661069757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6106a081610939565b50565b6106ab610c11565b6106a081610c5a565b610540610c11565b6000805160206116f383398151915280546001600160a01b0319166001600160a01b0384161781557f804776a84f3d03ad8442127b1451e2fbbb6a715c681d6a83c9e9fca787b9930161070f8382611433565b50505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061079c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107906000805160206116d3833981519152546001600160a01b031690565b6001600160a01b031614155b156105405760405163703e46dd60e11b815260040160405180910390fd5b6106a06108cd565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561081c575060408051601f3d908101601f19168201909252610819918101906114f1565b60015b61084457604051634c9c8ce360e01b81526001600160a01b038316600482015260240161068e565b6000805160206116d3833981519152811461087557604051632a87526960e21b81526004810182905260240161068e565b61087f8383610c62565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105405760405163703e46dd60e11b815260040160405180910390fd5b336108d6610542565b6001600160a01b0316146105405760405163118cdaa760e01b815233600482015260240161068e565b6000805160206116f38339815191527f804776a84f3d03ad8442127b1451e2fbbb6a715c681d6a83c9e9fca787b9930161087f8382611433565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6000806000805160206116f38339815191529050600060405180610100016040528088600001518152602001866001600160a01b03168152602001306001600160a01b03168152602001858152602001878152602001836001018054610a0f906113ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b906113ab565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b50505091835250506040808a0180515163ffffffff166020808501919091528b0151928201929092528454915160608b015191516318cea58d60e01b81529394506001600160a01b03909216926318cea58d92610ae99286926004016115ab565b6020604051808303816000875af1158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c9190611694565b979650505050505050565b6000806000805160206116f3833981519152610567565b7f804776a84f3d03ad8442127b1451e2fbbb6a715c681d6a83c9e9fca787b9930180546060916000805160206116f383398151915291610b8d906113ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb9906113ab565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b505050505091505090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661054057604051631afcd79f60e31b815260040160405180910390fd5b610668610c11565b610c6b82610cb8565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115610cb05761087f8282610d1d565b610489610d93565b806001600160a01b03163b600003610cee57604051634c9c8ce360e01b81526001600160a01b038216600482015260240161068e565b6000805160206116d383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051610d3a91906116b6565b600060405180830381855af49150503d8060008114610d75576040519150601f19603f3d011682016040523d82523d6000602084013e610d7a565b606091505b5091509150610d8a858383610db2565b95945050505050565b34156105405760405163b398979f60e01b815260040160405180910390fd5b606082610dc757610dc282610e11565b610e0a565b8151158015610dde57506001600160a01b0384163b155b15610e0757604051639996b31560e01b81526001600160a01b038516600482015260240161068e565b50805b9392505050565b805115610e215780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b80356001600160a01b0381168114610e5157600080fd5b919050565b60008083601f840112610e6857600080fd5b5081356001600160401b03811115610e7f57600080fd5b602083019150836020828501011115610e9757600080fd5b9250929050565b60008060008060608587031215610eb457600080fd5b610ebd85610e3a565b9350610ecb60208601610e3a565b925060408501356001600160401b03811115610ee657600080fd5b610ef287828801610e56565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610f3657610f36610efe565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610f6457610f64610efe565b604052919050565b6000806001600160401b03841115610f8657610f86610efe565b50601f8301601f1916602001610f9b81610f3c565b915050828152838383011115610fb057600080fd5b828260208301376000602084830101529392505050565b600082601f830112610fd857600080fd5b610e0a83833560208501610f6c565b60008060408385031215610ffa57600080fd5b61100383610e3a565b915060208301356001600160401b0381111561101e57600080fd5b61102a85828601610fc7565b9150509250929050565b6000806020838503121561104757600080fd5b82356001600160401b0381111561105d57600080fd5b61106985828601610e56565b90969095509350505050565b6000806000806000806080878903121561108e57600080fd5b61109787610e3a565b95506020870135945060408701356001600160401b038111156110b957600080fd5b6110c589828a01610e56565b90955093505060608701356001600160401b038111156110e457600080fd5b6110f089828a01610e56565b979a9699509497509295939492505050565b60005b8381101561111d578181015183820152602001611105565b50506000910152565b6000815180845261113e816020860160208601611102565b601f01601f19169290920160200192915050565b602081526000610e0a6020830184611126565b60006020828403121561117757600080fd5b610e0a82610e3a565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006001600160401b038211156111c8576111c8610efe565b5060051b60200190565b600082601f8301126111e357600080fd5b81356111f66111f1826111af565b610f3c565b8082825260208201915060208360051b86010192508583111561121857600080fd5b602085015b8381101561123c5761122e81610e3a565b83526020928301920161121d565b5095945050505050565b600082601f83011261125757600080fd5b81356112656111f1826111af565b8082825260208201915060208360051b86010192508583111561128757600080fd5b602085015b8381101561123c5780356001600160401b038111156112aa57600080fd5b6112b9886020838a0101610fc7565b8452506020928301920161128c565b6000602082840312156112da57600080fd5b81356001600160401b038111156112f057600080fd5b82016080818503121561130257600080fd5b61130a610f14565b81356001600160401b0381111561132057600080fd5b8201601f8101861361133157600080fd5b61134086823560208401610f6c565b8252506020828101359082015260408201356001600160401b0381111561136657600080fd5b611372868285016111d2565b60408301525060608201356001600160401b0381111561139157600080fd5b61139d86828501611246565b606083015250949350505050565b600181811c908216806113bf57607f821691505b6020821081036113df57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561087f57806000526020600020601f840160051c8101602085101561140c5750805b601f840160051c820191505b8181101561142c5760008155600101611418565b5050505050565b81516001600160401b0381111561144c5761144c610efe565b6114608161145a84546113ab565b846113e5565b6020601f821160018114611494576000831561147c5750848201515b600019600385901b1c1916600184901b17845561142c565b600084815260208120601f198516915b828110156114c457878501518255602094850194600190920191016114a4565b50848210156114e25786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60006020828403121561150357600080fd5b5051919050565b600081518084526020840193506020830160005b828110156115455781516001600160a01b031686526020958601959091019060010161151e565b5093949350505050565b600082825180855260208501945060208160051b8301016020850160005b8381101561159f57601f19858403018852611589838351611126565b602098890198909350919091019060010161156d565b50909695505050505050565b606081526000845161010060608401526115c9610160840182611126565b905060208601516115e560808501826001600160a01b03169052565b5060408601516001600160a01b031660a0840152606086015160c08401526080860151838203605f190160e085015261161e8282611126565b91505060a0860151605f198483030161010085015261163d8282611126565b91505060c086015161165861012085018263ffffffff169052565b5060e08601516101408401528281036020840152611676818661150a565b9050828103604084015261168a818561154f565b9695505050505050565b6000602082840312156116a657600080fd5b81518015158114610e0a57600080fd5b600082516116c8818460208701611102565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc804776a84f3d03ad8442127b1451e2fbbb6a715c681d6a83c9e9fca787b99300a26469706673582212209ee3800ba955fcfe5d9fea8cc38a0327359d9d6a702cf8dc44662c955668bbc364736f6c634300081b0033";

type PredicatePermitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PredicatePermitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PredicatePermitter__factory extends ContractFactory {
  constructor(...args: PredicatePermitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PredicatePermitter> {
    return super.deploy(overrides || {}) as Promise<PredicatePermitter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PredicatePermitter {
    return super.attach(address) as PredicatePermitter;
  }
  override connect(signer: Signer): PredicatePermitter__factory {
    return super.connect(signer) as PredicatePermitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PredicatePermitterInterface {
    return new utils.Interface(_abi) as PredicatePermitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PredicatePermitter {
    return new Contract(address, _abi, signerOrProvider) as PredicatePermitter;
  }
}
