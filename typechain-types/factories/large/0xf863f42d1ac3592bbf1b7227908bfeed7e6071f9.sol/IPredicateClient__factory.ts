/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPredicateClient,
  IPredicateClientInterface,
} from "../../../large/0xf863f42d1ac3592bbf1b7227908bfeed7e6071f9.sol/IPredicateClient";

const _abi = [
  {
    inputs: [],
    name: "getPolicy",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPredicateManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_policyID",
        type: "string",
      },
    ],
    name: "setPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_predicateManager",
        type: "address",
      },
    ],
    name: "setPredicateManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPredicateClient__factory {
  static readonly abi = _abi;
  static createInterface(): IPredicateClientInterface {
    return new Interface(_abi) as IPredicateClientInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPredicateClient {
    return new Contract(address, _abi, runner) as unknown as IPredicateClient;
  }
}
