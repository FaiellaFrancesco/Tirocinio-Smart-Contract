/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FluidVaultTypes,
  FluidVaultTypesInterface,
} from "../../../large/0xeea800b16c51449322e48afa70fcea948dc58b10.sol/FluidVaultTypes";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultType",
        type: "uint256",
      },
    ],
    name: "InvalidVaultType",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202ff52b25f51f865b222e8791cf94b0c7e0eaee21650f64ecfd1a253af53268e264736f6c63430008180033";

type FluidVaultTypesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FluidVaultTypesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FluidVaultTypes__factory extends ContractFactory {
  constructor(...args: FluidVaultTypesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FluidVaultTypes> {
    return super.deploy(overrides || {}) as Promise<FluidVaultTypes>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FluidVaultTypes {
    return super.attach(address) as FluidVaultTypes;
  }
  override connect(signer: Signer): FluidVaultTypes__factory {
    return super.connect(signer) as FluidVaultTypes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FluidVaultTypesInterface {
    return new utils.Interface(_abi) as FluidVaultTypesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FluidVaultTypes {
    return new Contract(address, _abi, signerOrProvider) as FluidVaultTypes;
  }
}
