/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IFluidVaultResolver,
  IFluidVaultResolverInterface,
} from "../../../large/0xeea800b16c51449322e48afa70fcea948dc58b10.sol/IFluidVaultResolver";

const _abi = [
  {
    inputs: [],
    name: "getAllVaultsAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "vaults_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultId_",
        type: "uint256",
      },
    ],
    name: "getVaultAddress",
    outputs: [
      {
        internalType: "address",
        name: "vault_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault_",
        type: "address",
      },
    ],
    name: "getVaultEntireData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "vault",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isSmartCol",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isSmartDebt",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "address",
                name: "liquidity",
                type: "address",
              },
              {
                internalType: "address",
                name: "factory",
                type: "address",
              },
              {
                internalType: "address",
                name: "operateImplementation",
                type: "address",
              },
              {
                internalType: "address",
                name: "adminImplementation",
                type: "address",
              },
              {
                internalType: "address",
                name: "secondaryImplementation",
                type: "address",
              },
              {
                internalType: "address",
                name: "deployer",
                type: "address",
              },
              {
                internalType: "address",
                name: "supply",
                type: "address",
              },
              {
                internalType: "address",
                name: "borrow",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "token0",
                    type: "address",
                  },
                  {
                    internalType: "address",
                    name: "token1",
                    type: "address",
                  },
                ],
                internalType: "struct IFluidVaultResolver.Tokens",
                name: "supplyToken",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "token0",
                    type: "address",
                  },
                  {
                    internalType: "address",
                    name: "token1",
                    type: "address",
                  },
                ],
                internalType: "struct IFluidVaultResolver.Tokens",
                name: "borrowToken",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "vaultId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vaultType",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "supplyExchangePriceSlot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "borrowExchangePriceSlot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "userSupplySlot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "userBorrowSlot",
                type: "bytes32",
              },
            ],
            internalType: "struct IFluidVaultResolver.ConstantViews",
            name: "constantVariables",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "supplyRateMagnifier",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "borrowRateMagnifier",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "collateralFactor",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "liquidationThreshold",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "liquidationMaxLimit",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "withdrawalGap",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "liquidationPenalty",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "borrowFee",
                type: "uint16",
              },
              {
                internalType: "address",
                name: "oracle",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "oraclePriceOperate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "oraclePriceLiquidate",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "rebalancer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "lastUpdateTimestamp",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.Configs",
            name: "configs",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "lastStoredLiquiditySupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastStoredLiquidityBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastStoredVaultSupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastStoredVaultBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "liquiditySupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "liquidityBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vaultSupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vaultBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "supplyRateLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowRateLiquidity",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "supplyRateVault",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "borrowRateVault",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "rewardsOrFeeRateSupply",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "rewardsOrFeeRateBorrow",
                type: "int256",
              },
            ],
            internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
            name: "exchangePricesAndRates",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "totalSupplyVault",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBorrowVault",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalSupplyLiquidityOrDex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBorrowLiquidityOrDex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "absorbedSupply",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "absorbedBorrow",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
            name: "totalSupplyAndBorrow",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "withdrawLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawable",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowable",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimitUtilization",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minimumBorrowing",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
            name: "limitsAndAvailability",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "totalPositions",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "topTick",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "currentBranch",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBranch",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBorrow",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "status",
                    type: "uint256",
                  },
                  {
                    internalType: "int256",
                    name: "minimaTick",
                    type: "int256",
                  },
                  {
                    internalType: "uint256",
                    name: "debtFactor",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "partials",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "debtLiquidity",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "baseBranchId",
                    type: "uint256",
                  },
                  {
                    internalType: "int256",
                    name: "baseBranchMinima",
                    type: "int256",
                  },
                ],
                internalType: "struct IFluidVaultResolver.CurrentBranchState",
                name: "currentBranchState",
                type: "tuple",
              },
            ],
            internalType: "struct IFluidVaultResolver.VaultState",
            name: "vaultState",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "modeWithInterest",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "supply",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawalLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastUpdateTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandDuration",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseWithdrawalLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawable",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.UserSupplyData",
            name: "liquidityUserSupplyData",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "modeWithInterest",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "borrow",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastUpdateTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandDuration",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseBorrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxBorrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowable",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimitUtilization",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.UserBorrowData",
            name: "liquidityUserBorrowData",
            type: "tuple",
          },
        ],
        internalType: "struct IFluidVaultResolver.VaultEntireData",
        name: "vaultData_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault_",
        type: "address",
      },
    ],
    name: "getVaultId",
    outputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId_",
        type: "uint256",
      },
    ],
    name: "positionByNftId",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isLiquidated",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isSupplyPosition",
            type: "bool",
          },
          {
            internalType: "int256",
            name: "tick",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tickId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "beforeSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "beforeBorrow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "beforeDustBorrow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dustBorrow",
            type: "uint256",
          },
        ],
        internalType: "struct IFluidVaultResolver.UserPosition",
        name: "userPosition_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "vault",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isSmartCol",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isSmartDebt",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "address",
                name: "liquidity",
                type: "address",
              },
              {
                internalType: "address",
                name: "factory",
                type: "address",
              },
              {
                internalType: "address",
                name: "operateImplementation",
                type: "address",
              },
              {
                internalType: "address",
                name: "adminImplementation",
                type: "address",
              },
              {
                internalType: "address",
                name: "secondaryImplementation",
                type: "address",
              },
              {
                internalType: "address",
                name: "deployer",
                type: "address",
              },
              {
                internalType: "address",
                name: "supply",
                type: "address",
              },
              {
                internalType: "address",
                name: "borrow",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "token0",
                    type: "address",
                  },
                  {
                    internalType: "address",
                    name: "token1",
                    type: "address",
                  },
                ],
                internalType: "struct IFluidVaultResolver.Tokens",
                name: "supplyToken",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "token0",
                    type: "address",
                  },
                  {
                    internalType: "address",
                    name: "token1",
                    type: "address",
                  },
                ],
                internalType: "struct IFluidVaultResolver.Tokens",
                name: "borrowToken",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "vaultId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vaultType",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "supplyExchangePriceSlot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "borrowExchangePriceSlot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "userSupplySlot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "userBorrowSlot",
                type: "bytes32",
              },
            ],
            internalType: "struct IFluidVaultResolver.ConstantViews",
            name: "constantVariables",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "supplyRateMagnifier",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "borrowRateMagnifier",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "collateralFactor",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "liquidationThreshold",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "liquidationMaxLimit",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "withdrawalGap",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "liquidationPenalty",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "borrowFee",
                type: "uint16",
              },
              {
                internalType: "address",
                name: "oracle",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "oraclePriceOperate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "oraclePriceLiquidate",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "rebalancer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "lastUpdateTimestamp",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.Configs",
            name: "configs",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "lastStoredLiquiditySupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastStoredLiquidityBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastStoredVaultSupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastStoredVaultBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "liquiditySupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "liquidityBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vaultSupplyExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vaultBorrowExchangePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "supplyRateLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowRateLiquidity",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "supplyRateVault",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "borrowRateVault",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "rewardsOrFeeRateSupply",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "rewardsOrFeeRateBorrow",
                type: "int256",
              },
            ],
            internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
            name: "exchangePricesAndRates",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "totalSupplyVault",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBorrowVault",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalSupplyLiquidityOrDex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBorrowLiquidityOrDex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "absorbedSupply",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "absorbedBorrow",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
            name: "totalSupplyAndBorrow",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "withdrawLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawable",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowable",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimitUtilization",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minimumBorrowing",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
            name: "limitsAndAvailability",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "totalPositions",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "topTick",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "currentBranch",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBranch",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalBorrow",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "status",
                    type: "uint256",
                  },
                  {
                    internalType: "int256",
                    name: "minimaTick",
                    type: "int256",
                  },
                  {
                    internalType: "uint256",
                    name: "debtFactor",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "partials",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "debtLiquidity",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "baseBranchId",
                    type: "uint256",
                  },
                  {
                    internalType: "int256",
                    name: "baseBranchMinima",
                    type: "int256",
                  },
                ],
                internalType: "struct IFluidVaultResolver.CurrentBranchState",
                name: "currentBranchState",
                type: "tuple",
              },
            ],
            internalType: "struct IFluidVaultResolver.VaultState",
            name: "vaultState",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "modeWithInterest",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "supply",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawalLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastUpdateTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandDuration",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseWithdrawalLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "withdrawable",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.UserSupplyData",
            name: "liquidityUserSupplyData",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "modeWithInterest",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "borrow",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastUpdateTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expandDuration",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseBorrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxBorrowLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowableUntilLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowable",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowLimitUtilization",
                type: "uint256",
              },
            ],
            internalType: "struct IFluidVaultResolver.UserBorrowData",
            name: "liquidityUserBorrowData",
            type: "tuple",
          },
        ],
        internalType: "struct IFluidVaultResolver.VaultEntireData",
        name: "vaultData_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user_",
        type: "address",
      },
    ],
    name: "positionsNftIdOfUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "nftIds_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId_",
        type: "uint256",
      },
    ],
    name: "vaultByNftId",
    outputs: [
      {
        internalType: "address",
        name: "vault_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IFluidVaultResolver__factory {
  static readonly abi = _abi;
  static createInterface(): IFluidVaultResolverInterface {
    return new Interface(_abi) as IFluidVaultResolverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IFluidVaultResolver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IFluidVaultResolver;
  }
}
