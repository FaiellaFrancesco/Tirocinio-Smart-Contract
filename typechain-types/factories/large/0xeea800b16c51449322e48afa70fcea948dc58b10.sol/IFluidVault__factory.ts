/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IFluidVault,
  IFluidVaultInterface,
} from "../../../large/0xeea800b16c51449322e48afa70fcea948dc58b10.sol/IFluidVault";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user_",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nftId_",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "colAmt_",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "debtAmt_",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to_",
        type: "address",
      },
    ],
    name: "LogOperate",
    type: "event",
  },
  {
    inputs: [],
    name: "constantsView",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "liquidity",
            type: "address",
          },
          {
            internalType: "address",
            name: "factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "operateImplementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "adminImplementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "secondaryImplementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "deployer",
            type: "address",
          },
          {
            internalType: "address",
            name: "supply",
            type: "address",
          },
          {
            internalType: "address",
            name: "borrow",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
            ],
            internalType: "struct IFluidVault.Tokens",
            name: "supplyToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
            ],
            internalType: "struct IFluidVault.Tokens",
            name: "borrowToken",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vaultType",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "supplyExchangePriceSlot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "borrowExchangePriceSlot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "userSupplySlot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "userBorrowSlot",
            type: "bytes32",
          },
        ],
        internalType: "struct IFluidVault.ConstantViews",
        name: "constantsView_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IFluidVault__factory {
  static readonly abi = _abi;
  static createInterface(): IFluidVaultInterface {
    return new Interface(_abi) as IFluidVaultInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IFluidVault {
    return new Contract(address, _abi, runner) as unknown as IFluidVault;
  }
}
