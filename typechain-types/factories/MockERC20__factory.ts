/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MockERC20, MockERC20Interface } from "../MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600960809081526826b7b1b5aa37b5b2b760b91b60a0526003906100289082610142565b506040805180820190915260038152624d544b60e81b60208201526004906100509082610142565b506005805460ff1916601217905534801561006a57600080fd5b506040516108e33803806108e383398101604081905261008991610200565b600281905533600090815260208190526040902055610219565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100cd57607f821691505b6020821081036100ed57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561013d57806000526020600020601f840160051c8101602085101561011a5750805b601f840160051c820191505b8181101561013a5760008155600101610126565b50505b505050565b81516001600160401b0381111561015b5761015b6100a3565b61016f8161016984546100b9565b846100f3565b6020601f8211600181146101a3576000831561018b5750848201515b600019600385901b1c1916600184901b17845561013a565b600084815260208120601f198516915b828110156101d357878501518255602094850194600190920191016101b3565b50848210156101f15786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60006020828403121561021257600080fd5b5051919050565b6106bb806102286000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461012857806370a082311461013d57806395d89b4114610166578063a9059cbb1461016e578063dd62ed3e1461018157600080fd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e457806323b872dd146100f6578063313ce56714610109575b600080fd5b6100ab6101ba565b6040516100b891906104e9565b60405180910390f35b6100d46100cf366004610553565b610248565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d461010436600461057d565b610276565b6005546101169060ff1681565b60405160ff90911681526020016100b8565b61013b610136366004610553565b6103e2565b005b6100e861014b3660046105ba565b6001600160a01b031660009081526020819052604090205490565b6100ab61042c565b6100d461017c366004610553565b610439565b6100e861018f3660046105dc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600380546101c79061060f565b80601f01602080910402602001604051908101604052809291908181526020018280546101f39061060f565b80156102405780601f1061021557610100808354040283529160200191610240565b820191906000526020600020905b81548152906001019060200180831161022357829003601f168201915b505050505081565b3360009081526001602081815260408084206001600160a01b03871685529091529091208290555b92915050565b6001600160a01b03831660009081526001602090815260408083203384529091528120548211156102e75760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b60448201526064015b60405180910390fd5b6001600160a01b0384166000908152602081905260409020548211156103465760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016102de565b6001600160a01b03841660009081526001602090815260408083203384529091528120805484929061037990849061065f565b90915550506001600160a01b038416600090815260208190526040812080548492906103a690849061065f565b90915550506001600160a01b038316600090815260208190526040812080548492906103d3908490610672565b90915550600195945050505050565b6001600160a01b0382166000908152602081905260408120805483929061040a908490610672565b9250508190555080600260008282546104239190610672565b90915550505050565b600480546101c79061060f565b3360009081526020819052604081205482111561048f5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016102de565b33600090815260208190526040812080548492906104ae90849061065f565b90915550506001600160a01b038316600090815260208190526040812080548492906104db908490610672565b909155506001949350505050565b602081526000825180602084015260005b8181101561051757602081860181015160408684010152016104fa565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461054e57600080fd5b919050565b6000806040838503121561056657600080fd5b61056f83610537565b946020939093013593505050565b60008060006060848603121561059257600080fd5b61059b84610537565b92506105a960208501610537565b929592945050506040919091013590565b6000602082840312156105cc57600080fd5b6105d582610537565b9392505050565b600080604083850312156105ef57600080fd5b6105f883610537565b915061060660208401610537565b90509250929050565b600181811c9082168061062357607f821691505b60208210810361064357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561027057610270610649565b808201808211156102705761027061064956fea2646970667358221220a1dbb2732027a0d53cf2fc6017d4845efd56cc206acb11dc26d61fc9eaca06db64736f6c634300081e0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_initialSupply, overrides || {});
  }
  override deploy(
    _initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_initialSupply, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
