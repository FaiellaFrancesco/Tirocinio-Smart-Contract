/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TOKEN,
  TOKENInterface,
} from "../../../medium/0xa8a431f6f1a062a942cb6b763626e92370b71a0b.sol/TOKEN";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_maxTaxSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_swapThres",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "launch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rescueETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "setTaxWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600060055560006006556000600755600060085560006009556009600a61002b919061031a565b61003990633b9aca00610330565b600a556000600b819055600d805461ffff60a81b19169055600e819055600f81905580546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b0319163317815530600090815260036020526040808220805460ff19908116600190811790925593546001600160a01b031683529120805490921617905560646100f16009600a61031a565b6100ff90633b9aca00610330565b61010a906002610330565b6101149190610347565b3360009081526001602052604090205560646101326009600a61031a565b61014090633b9aca00610330565b61014b906062610330565b6101559190610347565b30600090815260016020526040902055336001600160a01b031660006000805160206119ec833981519152606461018e6009600a61031a565b61019c90633b9aca00610330565b6101a7906002610330565b6101b19190610347565b60405190815260200160405180910390a33060006000805160206119ec83398151915260646101e26009600a61031a565b6101f090633b9aca00610330565b6101fb906062610330565b6102059190610347565b60405190815260200160405180910390a3610369565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561026c578085048111156102505761025061021b565b600184161561025e57908102905b60019390931c928002610235565b935093915050565b60008261028357506001610314565b8161029057506000610314565b81600181146102a657600281146102b0576102cc565b6001915050610314565b60ff8411156102c1576102c161021b565b50506001821b610314565b5060208310610133831016604e8410600b84101617156102ef575081810a610314565b6102fc6000198484610231565b80600019048211156103105761031061021b565b0290505b92915050565b600061032960ff841683610274565b9392505050565b80820281158282048414176103145761031461021b565b60008261036457634e487b7160e01b600052601260045260246000fd5b500490565b611674806103786000396000f3fe6080604052600436106101025760003560e01c80636482c89a116100955780638da5cb5b116100645780638da5cb5b1461029a57806395d89b41146102c2578063a9059cbb146102f0578063dd62ed3e14610310578063ea414b281461035657600080fd5b80636482c89a1461022457806370a082311461023a578063715018a614610270578063751039fc1461028557600080fd5b806318160ddd116100d157806318160ddd146101be57806320800a00146101d357806323b872dd146101e8578063313ce5671461020857600080fd5b806301339c211461010e57806306fdde0314610125578063095ea7b31461016a5780630faee56f1461019a57600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b50610123610376565b005b34801561013157600080fd5b5060408051808201909152600a815269476f726b277320446f6760b01b60208201525b6040516101619190611242565b60405180910390f35b34801561017657600080fd5b5061018a6101853660046112a5565b61073f565b6040519015158152602001610161565b3480156101a657600080fd5b506101b0600a5481565b604051908152602001610161565b3480156101ca57600080fd5b506101b0610756565b3480156101df57600080fd5b50610123610777565b3480156101f457600080fd5b5061018a6102033660046112d1565b6107da565b34801561021457600080fd5b5060405160098152602001610161565b34801561023057600080fd5b506101b0600b5481565b34801561024657600080fd5b506101b0610255366004611312565b6001600160a01b031660009081526001602052604090205490565b34801561027c57600080fd5b50610123610885565b34801561029157600080fd5b506101236108f9565b3480156102a657600080fd5b506000546040516001600160a01b039091168152602001610161565b3480156102ce57600080fd5b50604080518082019091526005815264537465766560d81b6020820152610154565b3480156102fc57600080fd5b5061018a61030b3660046112a5565b610925565b34801561031c57600080fd5b506101b061032b36600461132f565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561036257600080fd5b50610123610371366004611312565b610932565b6000546001600160a01b031633146103a95760405162461bcd60e51b81526004016103a090611368565b60405180910390fd5b600d54600160a01b900460ff16156104035760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016103a0565b600c80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561045190309061043e6009600a61149a565b61044c90633b9aca006114a9565b610970565b600c60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c891906114c0565b6001600160a01b031663c9c6539630600c60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906114c0565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf91906114c0565b600d80546001600160a01b039283166001600160a01b0319909116179055600c541663f305d7194730610607816001600160a01b031660009081526001602052604090205490565b60008061061c6000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610684573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106a991906114dd565b5050600d805462ff00ff60a01b1981166201000160a01b17909155600c5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073c919061150b565b50565b600061074c338484610970565b5060015b92915050565b60006107646009600a61149a565b61077290633b9aca006114a9565b905090565b6000546001600160a01b031633146107a15760405162461bcd60e51b81526004016103a090611368565b600047116107ae57600080fd5b60405133904780156108fc02916000818181858888f1935050505015801561073c573d6000803e3d6000fd5b60006107e7848484610a94565b3360009081526003602052604090205460ff161580156108295750600d546001600160a01b038581169116148061082957506001600160a01b03831661dead14155b1561087b5761087b843361044c85604051806060016040528060288152602001611617602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190610eb6565b5060019392505050565b6000546001600160a01b031633146108af5760405162461bcd60e51b81526004016103a090611368565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146109235760405162461bcd60e51b81526004016103a090611368565b565b600061074c338484610a94565b3360009081526003602052604090205460ff1661094e57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166109d25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103a0565b6001600160a01b038216610a335760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103a0565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610af85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103a0565b6001600160a01b038216610b5a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103a0565b60008111610bbc5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016103a0565b60006001600160a01b0384163014801590610be057506001600160a01b0383163014155b15610d5857600d54600160a81b900460ff16610c2557610c226064610c1c60075460085411610c1157600554610c15565b6006545b8590610ef0565b90610f79565b90505b600d546001600160a01b038581169116148015610c505750600c546001600160a01b03848116911614155b8015610c7557506001600160a01b03831660009081526003602052604090205460ff16155b8015610c8f57506004546001600160a01b03848116911614155b15610caa5760088054906000610ca48361152d565b91905055505b30600090815260016020526040902054600d54600160a81b900460ff16158015610ce15750600d546001600160a01b038581169116145b8015610cf65750600d54600160b01b900460ff165b8015610d1057506004546001600160a01b03868116911614155b15610d56578015610d4a576000600a548211610d2c5781610d30565b600a545b9050610d48818511610d425784610fbb565b81610fbb565b505b47610d5447611135565b505b505b6001600160a01b038416600090815260016020526040902054610d7b9083611173565b6001600160a01b038516600090815260016020526040902055610dc0610da18383611173565b6001600160a01b038516600090815260016020526040902054906111b5565b6001600160a01b0384166000908152600160205260409020558015610e535730600090815260016020526040902054610df990826111b5565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e4a9085815260200190565b60405180910390a35b6001600160a01b03831661dead14610eb0576001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610e9e8585611173565b60405190815260200160405180910390a35b50505050565b60008184841115610eda5760405162461bcd60e51b81526004016103a09190611242565b506000610ee78486611546565b95945050505050565b600082600003610f0257506000610750565b6000610f0e83856114a9565b905082610f1b8583611559565b14610f725760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016103a0565b9392505050565b6000610f7283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611214565b600d805460ff60a81b1916600160a81b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106110035761100361157b565b6001600160a01b03928316602091820292909201810191909152600c54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906114c0565b816001815181106110935761109361157b565b6001600160a01b039283166020918202929092010152600c546110b99130911684610970565b600c5460405163791ac94760e01b81526001600160a01b039091169063791ac947906110f2908590600090869030904290600401611591565b600060405180830381600087803b15801561110c57600080fd5b505af1158015611120573d6000803e3d6000fd5b5050600d805460ff60a81b1916905550505050565b6004546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561116f573d6000803e3d6000fd5b5050565b6000610f7283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610eb6565b6000806111c28385611603565b905083811015610f725760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016103a0565b600081836112355760405162461bcd60e51b81526004016103a09190611242565b506000610ee78486611559565b602081526000825180602084015260005b818110156112705760208186018101516040868401015201611253565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461073c57600080fd5b600080604083850312156112b857600080fd5b82356112c381611290565b946020939093013593505050565b6000806000606084860312156112e657600080fd5b83356112f181611290565b9250602084013561130181611290565b929592945050506040919091013590565b60006020828403121561132457600080fd5b8135610f7281611290565b6000806040838503121561134257600080fd5b823561134d81611290565b9150602083013561135d81611290565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156113ee578085048111156113d2576113d261139d565b60018416156113e057908102905b60019390931c9280026113b7565b935093915050565b60008261140557506001610750565b8161141257506000610750565b816001811461142857600281146114325761144e565b6001915050610750565b60ff8411156114435761144361139d565b50506001821b610750565b5060208310610133831016604e8410600b8410161715611471575081810a610750565b61147e60001984846113b3565b80600019048211156114925761149261139d565b029392505050565b6000610f7260ff8416836113f6565b80820281158282048414176107505761075061139d565b6000602082840312156114d257600080fd5b8151610f7281611290565b6000806000606084860312156114f257600080fd5b5050815160208301516040909301519094929350919050565b60006020828403121561151d57600080fd5b81518015158114610f7257600080fd5b60006001820161153f5761153f61139d565b5060010190565b818103818111156107505761075061139d565b60008261157657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a0820187835286602084015260a0604084015280865180835260c08501915060208801925060005b818110156115e35783516001600160a01b03168352602093840193909201916001016115bc565b50506001600160a01b039590951660608401525050608001529392505050565b808201808211156107505761075061139d56fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220603f18a657f792ad16b0b8368a218b4facf31e89c6d1cf86cf5077fe57416dba64736f6c634300081e0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type TOKENConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TOKENConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TOKEN__factory extends ContractFactory {
  constructor(...args: TOKENConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TOKEN> {
    return super.deploy(overrides || {}) as Promise<TOKEN>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TOKEN {
    return super.attach(address) as TOKEN;
  }
  override connect(signer: Signer): TOKEN__factory {
    return super.connect(signer) as TOKEN__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TOKENInterface {
    return new utils.Interface(_abi) as TOKENInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TOKEN {
    return new Contract(address, _abi, signerOrProvider) as TOKEN;
  }
}
