/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  VotingWithQuorum,
  VotingWithQuorumInterface,
} from "../../medium/VotingWithQuorum";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialQuorumPercent",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "ProposalAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "ProposalAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newQuorumPercent",
        type: "uint256",
      },
    ],
    name: "QuorumChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "proposalIndex",
        type: "uint256",
      },
    ],
    name: "VoteCast",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "VoterRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "VotingStarted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "addProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getWinningProposal",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "bool",
        name: "accepted",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "quorumPercent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "registerVoter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "registeredVoters",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newQuorumPercent",
        type: "uint256",
      },
    ],
    name: "setQuorumPercent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalVoters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalIndex",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "votesCast",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "votingStarted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051610f3a380380610f3a833981016040819052602c9160b9565b600081118015603c575060648111155b608b5760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642071756f72756d2070657263656e7400000000000000000000604482015260640160405180910390fd5b600080546001600160a01b031916331781556001919091556002805460ff19169055600381905560045560d1565b60006020828403121560ca57600080fd5b5051919050565b610e5a806100e06000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635f5300ff1161008c5780638da5cb5b116100665780638da5cb5b146101cf578063a5134620146101fa578063a9ff6df114610210578063f81cbd261461023357600080fd5b80635f5300ff146101a6578063797294ac146101af57806383d948b7146101c257600080fd5b80631ec6b60a116100c85780631ec6b60a146101615780632fdae3c51461016957806338db6dd31461017c5780635009272e1461018f57600080fd5b80630121b93f146100ef578063013cf08b1461010457806309eef43e1461012e575b600080fd5b6101026100fd366004610a99565b61023c565b005b610117610112366004610a99565b61041d565b604051610125929190610af8565b60405180910390f35b61015161013c366004610b1a565b60076020526000908152604090205460ff1681565b6040519015158152602001610125565b6101026104d9565b610102610177366004610b4a565b6105eb565b61010261018a366004610b1a565b6106e9565b61019860045481565b604051908152602001610125565b61019860035481565b6101026101bd366004610a99565b61080e565b6002546101519060ff1681565b6000546101e2906001600160a01b031681565b6040516001600160a01b039091168152602001610125565b6102026108e6565b604051610125929190610bbe565b61015161021e366004610b1a565b60066020526000908152604090205460ff1681565b61019860015481565b60025460ff166102885760405162461bcd60e51b8152602060048201526012602482015271159bdd1a5b99c81b9bdd081cdd185c9d195960721b60448201526064015b60405180910390fd5b3360009081526006602052604090205460ff166102e05760405162461bcd60e51b81526020600482015260166024820152752737ba1030903932b3b4b9ba32b932b2103b37ba32b960511b604482015260640161027f565b3360009081526007602052604090205460ff16156103305760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b604482015260640161027f565b600554811061037a5760405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e0e4dee0dee6c2d840d2dcc8caf60531b604482015260640161027f565b336000908152600760205260409020805460ff1916600117905560058054829081106103a8576103a8610be2565b6000918252602082206001600290920201018054916103c683610c0e565b9091555050600480549060006103db83610c0e565b909155505060408051338152602081018390527fa36cc2bebb74db33e9f88110a07ef56e1b31b24b4c4f51b54b1664266e29f45b91015b60405180910390a150565b6005818154811061042d57600080fd5b906000526020600020906002020160009150905080600001805461045090610c27565b80601f016020809104026020016040519081016040528092919081815260200182805461047c90610c27565b80156104c95780601f1061049e576101008083540402835291602001916104c9565b820191906000526020600020905b8154815290600101906020018083116104ac57829003601f168201915b5050505050908060010154905082565b6000546001600160a01b031633146105035760405162461bcd60e51b815260040161027f90610c61565b60025460ff16156105265760405162461bcd60e51b815260040161027f90610c84565b60055461056a5760405162461bcd60e51b8152602060048201526012602482015271139bc81c1c9bdc1bdcd85b1cc8185919195960721b604482015260640161027f565b6000600354116105b35760405162461bcd60e51b8152602060048201526014602482015273139bc81d9bdd195c9cc81c9959da5cdd195c995960621b604482015260640161027f565b6002805460ff191660011790556040517f877e2548498f42b7975a186b94ef1d32c86d420b7b806dd2be2bea293b89590490600090a1565b6000546001600160a01b031633146106155760405162461bcd60e51b815260040161027f90610c61565b60025460ff16156106385760405162461bcd60e51b815260040161027f90610c84565b6040805160606020601f850181900402820181018352918101838152600592829190869086908190850183828082843760009201829052509385525050506020918201819052835460018101855593815220815191926002020190819061069f9082610d19565b506020820151816001015550507f7e462b77205d9bc889740e6a08a3415c6040322fa001a664ca7838319e80d5f982826040516106dd929190610dd8565b60405180910390a15050565b6000546001600160a01b031633146107135760405162461bcd60e51b815260040161027f90610c61565b60025460ff16156107365760405162461bcd60e51b815260040161027f90610c84565b6001600160a01b03811660009081526006602052604090205460ff161561079f5760405162461bcd60e51b815260206004820152601860248201527f566f74657220616c726561647920726567697374657265640000000000000000604482015260640161027f565b6001600160a01b0381166000908152600660205260408120805460ff1916600117905560038054916107d083610c0e565b90915550506040516001600160a01b03821681527fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd90602001610412565b6000546001600160a01b031633146108385760405162461bcd60e51b815260040161027f90610c61565b60025460ff161561085b5760405162461bcd60e51b815260040161027f90610c84565b60008111801561086c575060648111155b6108b15760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081c5d5bdc9d5b481c195c98d95b9d60521b604482015260640161027f565b60018190556040518181527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e90602001610412565b60025460609060009060ff166109335760405162461bcd60e51b8152602060048201526012602482015271159bdd1a5b99c81b9bdd081cdd185c9d195960721b604482015260640161027f565b6001546003546109439190610e07565b600454610951906064610e07565b101561096d575050604080516020810190915260008082529091565b60008060005b6005548110156109dc57826005828154811061099157610991610be2565b90600052602060002090600202016001015411156109d457600581815481106109bc576109bc610be2565b90600052602060002090600202016001015492508091505b600101610973565b50600581815481106109f0576109f0610be2565b90600052602060002090600202016000016001818054610a0f90610c27565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b90610c27565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b505050505091509350935050509091565b600060208284031215610aab57600080fd5b5035919050565b6000815180845260005b81811015610ad857602081850181015186830182015201610abc565b506000602082860101526020601f19601f83011685010191505092915050565b604081526000610b0b6040830185610ab2565b90508260208301529392505050565b600060208284031215610b2c57600080fd5b81356001600160a01b0381168114610b4357600080fd5b9392505050565b60008060208385031215610b5d57600080fd5b823567ffffffffffffffff811115610b7457600080fd5b8301601f81018513610b8557600080fd5b803567ffffffffffffffff811115610b9c57600080fd5b856020828401011115610bae57600080fd5b6020919091019590945092505050565b604081526000610bd16040830185610ab2565b905082151560208301529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610c2057610c20610bf8565b5060010190565b600181811c90821680610c3b57607f821691505b602082108103610c5b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b602080825260169082015275159bdd1a5b99c8185b1c9958591e481cdd185c9d195960521b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b601f821115610d1457806000526020600020601f840160051c81016020851015610cf15750805b601f840160051c820191505b81811015610d115760008155600101610cfd565b50505b505050565b815167ffffffffffffffff811115610d3357610d33610cb4565b610d4781610d418454610c27565b84610cca565b6020601f821160018114610d7b5760008315610d635750848201515b600019600385901b1c1916600184901b178455610d11565b600084815260208120601f198516915b82811015610dab5787850151825560209485019460019092019101610d8b565b5084821015610dc95786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b8082028115828204841417610e1e57610e1e610bf8565b9291505056fea2646970667358221220ec97bf294dcaf5190b84db41ce9196b6f87a6160f447b83e2f87d5b9c7dd0d2c64736f6c634300081e0033";

type VotingWithQuorumConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingWithQuorumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VotingWithQuorum__factory extends ContractFactory {
  constructor(...args: VotingWithQuorumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialQuorumPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VotingWithQuorum> {
    return super.deploy(
      initialQuorumPercent,
      overrides || {}
    ) as Promise<VotingWithQuorum>;
  }
  override getDeployTransaction(
    initialQuorumPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialQuorumPercent, overrides || {});
  }
  override attach(address: string): VotingWithQuorum {
    return super.attach(address) as VotingWithQuorum;
  }
  override connect(signer: Signer): VotingWithQuorum__factory {
    return super.connect(signer) as VotingWithQuorum__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingWithQuorumInterface {
    return new utils.Interface(_abi) as VotingWithQuorumInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingWithQuorum {
    return new Contract(address, _abi, signerOrProvider) as VotingWithQuorum;
  }
}
