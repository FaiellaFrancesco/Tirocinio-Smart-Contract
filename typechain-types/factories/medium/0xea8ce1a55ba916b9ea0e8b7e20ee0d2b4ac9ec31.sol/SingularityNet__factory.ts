/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SingularityNet,
  SingularityNetInterface,
} from "../../../medium/0xea8ce1a55ba916b9ea0e8b7e20ee0d2b4ac9ec31.sol/SingularityNet";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "add_iiWUG",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_add_iiWUG",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_var_vhHjcq",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "update_var_vhHjcq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060408051808201909152600e81526d14da5b99dd5b185c9a5d1e53995d60921b60208201526000906100439082610188565b5060408051808201909152600481526314d3915560e21b602082015260019061006c9082610188565b506100796012600a610345565b61008890640737be7600610358565b600281905533600081815260046020908152604080832085905551938452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36100e16103e84261036f565b600355610391565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061011357607f821691505b60208210810361013357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561018357806000526020600020601f840160051c810160208510156101605750805b601f840160051c820191505b81811015610180576000815560010161016c565b50505b505050565b81516001600160401b038111156101a1576101a16100e9565b6101b5816101af84546100ff565b84610139565b6020601f8211600181146101e957600083156101d15750848201515b600019600385901b1c1916600184901b178455610180565b600084815260208120601f198516915b8281101561021957878501518255602094850194600190920191016101f9565b50848210156102375786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156102975780850481111561027b5761027b610246565b600184161561028957908102905b60019390931c928002610260565b935093915050565b6000826102ae5750600161033f565b816102bb5750600061033f565b81600181146102d157600281146102db576102f7565b600191505061033f565b60ff8411156102ec576102ec610246565b50506001821b61033f565b5060208310610133831016604e8410600b841016171561031a575081810a61033f565b610327600019848461025c565b806000190482111561033b5761033b610246565b0290505b92915050565b6000610351838361029f565b9392505050565b808202811582820484141761033f5761033f610246565b60008261038c57634e487b7160e01b600052601260045260246000fd5b500690565b610794806103a06000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80632f98e80b1161008c57806370a082311161006657806370a082311461018857806395d89b41146101a8578063a9059cbb146101b0578063dd62ed3e146101c357600080fd5b80632f98e80b14610153578063313ce56714610166578063381c792e1461018057600080fd5b806202aec2146100d357806306fdde03146100ea578063095ea7b3146100ff57806318160ddd1461012257806323b872dd1461012b5780632b2e81831461013e575b600080fd5b6003545b6040519081526020015b60405180910390f35b6100f26101ee565b6040516100e19190610563565b61011261010d3660046105cd565b61027c565b60405190151581526020016100e1565b6100d760025481565b6101126101393660046105f7565b6102e9565b61015161014c366004610634565b600355565b005b610151610161366004610634565b600655565b61016e601281565b60405160ff90911681526020016100e1565b6006546100d7565b6100d761019636600461064d565b60046020526000908152604090205481565b6100f2610499565b6101126101be3660046105cd565b6104a6565b6100d76101d136600461066f565b600560209081526000928352604080842090915290825290205481565b600080546101fb906106a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610227906106a2565b80156102745780601f1061024957610100808354040283529160200191610274565b820191906000526020600020905b81548152906001019060200180831161025757829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102d79086815260200190565b60405180910390a35060015b92915050565b6001600160a01b03831660009081526004602052604081205482111561032a5760405162461bcd60e51b8152600401610321906106dc565b60405180910390fd5b6001600160a01b03841660009081526005602090815260408083203384529091529020548211156103ae5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610321565b6001600160a01b038416600090815260046020526040812080548492906103d6908490610738565b90915550506001600160a01b0383166000908152600460205260408120805484929061040390849061074b565b90915550506001600160a01b03841660009081526005602090815260408083203384529091528120805484929061043b908490610738565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161048791815260200190565b60405180910390a35060019392505050565b600180546101fb906106a2565b336000908152600460205260408120548211156104d55760405162461bcd60e51b8152600401610321906106dc565b33600090815260046020526040812080548492906104f4908490610738565b90915550506001600160a01b0383166000908152600460205260408120805484929061052190849061074b565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016102d7565b602081526000825180602084015260005b818110156105915760208186018101516040868401015201610574565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146105c857600080fd5b919050565b600080604083850312156105e057600080fd5b6105e9836105b1565b946020939093013593505050565b60008060006060848603121561060c57600080fd5b610615846105b1565b9250610623602085016105b1565b929592945050506040919091013590565b60006020828403121561064657600080fd5b5035919050565b60006020828403121561065f57600080fd5b610668826105b1565b9392505050565b6000806040838503121561068257600080fd5b61068b836105b1565b9150610699602084016105b1565b90509250929050565b600181811c908216806106b657607f821691505b6020821081036106d657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b818103818111156102e3576102e3610722565b808201808211156102e3576102e361072256fea264697066735822122029bf87ab2e846f0674fcc9d821bde3586b9358574293ed2e5016706ca6905ef364736f6c634300081e0033";

type SingularityNetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SingularityNetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SingularityNet__factory extends ContractFactory {
  constructor(...args: SingularityNetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SingularityNet> {
    return super.deploy(overrides || {}) as Promise<SingularityNet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SingularityNet {
    return super.attach(address) as SingularityNet;
  }
  override connect(signer: Signer): SingularityNet__factory {
    return super.connect(signer) as SingularityNet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SingularityNetInterface {
    return new utils.Interface(_abi) as SingularityNetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SingularityNet {
    return new Contract(address, _abi, signerOrProvider) as SingularityNet;
  }
}
