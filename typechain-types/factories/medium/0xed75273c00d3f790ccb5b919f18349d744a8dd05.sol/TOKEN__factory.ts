/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { PayableOverrides } from "../../../common";
import type {
  TOKEN,
  TOKENInterface,
} from "../../../medium/0xed75273c00d3f790ccb5b919f18349d744a8dd05.sol/TOKEN";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_maxTaxSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_swapThres",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "launch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rescueETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "setTaxWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052600060055560006006556000600755600060085560006009556009600a61002b919061031a565b61003990633b9aca00610330565b600a556000600b819055600d805461ffff60a81b19169055600e819055600f81905580546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b0319163317815530600090815260036020526040808220805460ff19908116600190811790925593546001600160a01b031683529120805490921617905560646100f16009600a61031a565b6100ff90633b9aca00610330565b61010a906002610330565b6101149190610347565b3360009081526001602052604090205560646101326009600a61031a565b61014090633b9aca00610330565b61014b906062610330565b6101559190610347565b30600090815260016020526040902055336001600160a01b031660006000805160206119b6833981519152606461018e6009600a61031a565b61019c90633b9aca00610330565b6101a7906002610330565b6101b19190610347565b60405190815260200160405180910390a33060006000805160206119b683398151915260646101e26009600a61031a565b6101f090633b9aca00610330565b6101fb906062610330565b6102059190610347565b60405190815260200160405180910390a3610369565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561026c578085048111156102505761025061021b565b600184161561025e57908102905b60019390931c928002610235565b935093915050565b60008261028357506001610314565b8161029057506000610314565b81600181146102a657600281146102b0576102cc565b6001915050610314565b60ff8411156102c1576102c161021b565b50506001821b610314565b5060208310610133831016604e8410600b84101617156102ef575081810a610314565b6102fc6000198484610231565b80600019048211156103105761031061021b565b0290505b92915050565b600061032960ff841683610274565b9392505050565b80820281158282048414176103145761031461021b565b60008261036457634e487b7160e01b600052601260045260246000fd5b500490565b61163e806103786000396000f3fe6080604052600436106101025760003560e01c80636482c89a116100955780638da5cb5b116100645780638da5cb5b1461029257806395d89b4114610125578063a9059cbb146102ba578063dd62ed3e146102da578063ea414b281461032057600080fd5b80636482c89a1461021c57806370a0823114610232578063715018a614610268578063751039fc1461027d57600080fd5b806318160ddd116100d157806318160ddd146101b657806320800a00146101cb57806323b872dd146101e0578063313ce5671461020057600080fd5b806301339c211461010e57806306fdde0314610125578063095ea7b3146101625780630faee56f1461019257600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b50610123610340565b005b34801561013157600080fd5b5060408051808201825260058152642c1026a0a760d91b60208201529051610159919061120c565b60405180910390f35b34801561016e57600080fd5b5061018261017d36600461126f565b610709565b6040519015158152602001610159565b34801561019e57600080fd5b506101a8600a5481565b604051908152602001610159565b3480156101c257600080fd5b506101a8610720565b3480156101d757600080fd5b50610123610741565b3480156101ec57600080fd5b506101826101fb36600461129b565b6107a4565b34801561020c57600080fd5b5060405160098152602001610159565b34801561022857600080fd5b506101a8600b5481565b34801561023e57600080fd5b506101a861024d3660046112dc565b6001600160a01b031660009081526001602052604090205490565b34801561027457600080fd5b5061012361084f565b34801561028957600080fd5b506101236108c3565b34801561029e57600080fd5b506000546040516001600160a01b039091168152602001610159565b3480156102c657600080fd5b506101826102d536600461126f565b6108ef565b3480156102e657600080fd5b506101a86102f53660046112f9565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561032c57600080fd5b5061012361033b3660046112dc565b6108fc565b6000546001600160a01b031633146103735760405162461bcd60e51b815260040161036a90611332565b60405180910390fd5b600d54600160a01b900460ff16156103cd5760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161036a565b600c80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561041b9030906104086009600a611464565b61041690633b9aca00611473565b61093a565b600c60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610492919061148a565b6001600160a01b031663c9c6539630600c60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610518919061148a565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610565573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610589919061148a565b600d80546001600160a01b039283166001600160a01b0319909116179055600c541663f305d71947306105d1816001600160a01b031660009081526001602052604090205490565b6000806105e66000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561064e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061067391906114a7565b5050600d805462ff00ff60a01b1981166201000160a01b17909155600c5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af11580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070691906114d5565b50565b600061071633848461093a565b5060015b92915050565b600061072e6009600a611464565b61073c90633b9aca00611473565b905090565b6000546001600160a01b0316331461076b5760405162461bcd60e51b815260040161036a90611332565b6000471161077857600080fd5b60405133904780156108fc02916000818181858888f19350505050158015610706573d6000803e3d6000fd5b60006107b1848484610a5e565b3360009081526003602052604090205460ff161580156107f35750600d546001600160a01b03858116911614806107f357506001600160a01b03831661dead14155b15610845576108458433610416856040518060600160405280602881526020016115e1602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190610e80565b5060019392505050565b6000546001600160a01b031633146108795760405162461bcd60e51b815260040161036a90611332565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108ed5760405162461bcd60e51b815260040161036a90611332565b565b6000610716338484610a5e565b3360009081526003602052604090205460ff1661091857600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831661099c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161036a565b6001600160a01b0382166109fd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161036a565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610ac25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161036a565b6001600160a01b038216610b245760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161036a565b60008111610b865760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161036a565b60006001600160a01b0384163014801590610baa57506001600160a01b0383163014155b15610d2257600d54600160a81b900460ff16610bef57610bec6064610be660075460085411610bdb57600554610bdf565b6006545b8590610eba565b90610f43565b90505b600d546001600160a01b038581169116148015610c1a5750600c546001600160a01b03848116911614155b8015610c3f57506001600160a01b03831660009081526003602052604090205460ff16155b8015610c5957506004546001600160a01b03848116911614155b15610c745760088054906000610c6e836114f7565b91905055505b30600090815260016020526040902054600d54600160a81b900460ff16158015610cab5750600d546001600160a01b038581169116145b8015610cc05750600d54600160b01b900460ff165b8015610cda57506004546001600160a01b03868116911614155b15610d20578015610d14576000600a548211610cf65781610cfa565b600a545b9050610d12818511610d0c5784610f85565b81610f85565b505b47610d1e476110ff565b505b505b6001600160a01b038416600090815260016020526040902054610d45908361113d565b6001600160a01b038516600090815260016020526040902055610d8a610d6b838361113d565b6001600160a01b0385166000908152600160205260409020549061117f565b6001600160a01b0384166000908152600160205260409020558015610e1d5730600090815260016020526040902054610dc3908261117f565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e149085815260200190565b60405180910390a35b6001600160a01b03831661dead14610e7a576001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610e68858561113d565b60405190815260200160405180910390a35b50505050565b60008184841115610ea45760405162461bcd60e51b815260040161036a919061120c565b506000610eb18486611510565b95945050505050565b600082600003610ecc5750600061071a565b6000610ed88385611473565b905082610ee58583611523565b14610f3c5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161036a565b9392505050565b6000610f3c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506111de565b600d805460ff60a81b1916600160a81b1790556040805160028082526060820183526000926020830190803683370190505090503081600081518110610fcd57610fcd611545565b6001600160a01b03928316602091820292909201810191909152600c54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a919061148a565b8160018151811061105d5761105d611545565b6001600160a01b039283166020918202929092010152600c54611083913091168461093a565b600c5460405163791ac94760e01b81526001600160a01b039091169063791ac947906110bc90859060009086903090429060040161155b565b600060405180830381600087803b1580156110d657600080fd5b505af11580156110ea573d6000803e3d6000fd5b5050600d805460ff60a81b1916905550505050565b6004546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611139573d6000803e3d6000fd5b5050565b6000610f3c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e80565b60008061118c83856115cd565b905083811015610f3c5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161036a565b600081836111ff5760405162461bcd60e51b815260040161036a919061120c565b506000610eb18486611523565b602081526000825180602084015260005b8181101561123a576020818601810151604086840101520161121d565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461070657600080fd5b6000806040838503121561128257600080fd5b823561128d8161125a565b946020939093013593505050565b6000806000606084860312156112b057600080fd5b83356112bb8161125a565b925060208401356112cb8161125a565b929592945050506040919091013590565b6000602082840312156112ee57600080fd5b8135610f3c8161125a565b6000806040838503121561130c57600080fd5b82356113178161125a565b915060208301356113278161125a565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156113b85780850481111561139c5761139c611367565b60018416156113aa57908102905b60019390931c928002611381565b935093915050565b6000826113cf5750600161071a565b816113dc5750600061071a565b81600181146113f257600281146113fc57611418565b600191505061071a565b60ff84111561140d5761140d611367565b50506001821b61071a565b5060208310610133831016604e8410600b841016171561143b575081810a61071a565b611448600019848461137d565b806000190482111561145c5761145c611367565b029392505050565b6000610f3c60ff8416836113c0565b808202811582820484141761071a5761071a611367565b60006020828403121561149c57600080fd5b8151610f3c8161125a565b6000806000606084860312156114bc57600080fd5b5050815160208301516040909301519094929350919050565b6000602082840312156114e757600080fd5b81518015158114610f3c57600080fd5b60006001820161150957611509611367565b5060010190565b8181038181111561071a5761071a611367565b60008261154057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a0820187835286602084015260a0604084015280865180835260c08501915060208801925060005b818110156115ad5783516001600160a01b0316835260209384019390920191600101611586565b50506001600160a01b039590951660608401525050608001529392505050565b8082018082111561071a5761071a61136756fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220d0ade7c23370687fd2b30d9a35f74f5a6f17323711fb0b93f6b7056c0a6725d064736f6c634300081e0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type TOKENConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TOKENConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TOKEN__factory extends ContractFactory {
  constructor(...args: TOKENConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TOKEN & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TOKEN__factory {
    return super.connect(runner) as TOKEN__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TOKENInterface {
    return new Interface(_abi) as TOKENInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TOKEN {
    return new Contract(address, _abi, runner) as unknown as TOKEN;
  }
}
