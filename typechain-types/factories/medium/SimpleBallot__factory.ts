/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SimpleBallot,
  SimpleBallotInterface,
} from "../../medium/SimpleBallot";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "proposalNames",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyVoted",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "NoProposals",
    type: "error",
  },
  {
    inputs: [],
    name: "NotChairperson",
    type: "error",
  },
  {
    inputs: [],
    name: "NotRegistered",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalIndex",
        type: "uint256",
      },
    ],
    name: "VoteCast",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "VoterRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "chairperson",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "registerVoter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalIndex",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "bool",
        name: "registered",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "voted",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "vote",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "votes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a26380380610a2683398101604081905261002f91610119565b80516000036100515760405163b9a23e0360e01b815260040160405180910390fd5b3360805260005b81518110156100cc576000604051806040016040528084848151811061008057610080610260565b602090810291909101810151825260009181018290528354600181018555938252902081519192600202019081906100b890826102ff565b506020919091015160019182015501610058565b50506103bd565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610111576101116100d3565b604052919050565b60006020828403121561012b57600080fd5b81516001600160401b0381111561014157600080fd5b8201601f8101841361015257600080fd5b80516001600160401b0381111561016b5761016b6100d3565b8060051b61017b602082016100e9565b9182526020818401810192908101908784111561019757600080fd5b6020850192505b838310156102555782516001600160401b038111156101bc57600080fd5b8501603f810189136101cd57600080fd5b60208101516001600160401b038111156101e9576101e96100d3565b6101fc601f8201601f19166020016100e9565b8181526040838301018b101561021157600080fd5b60005b828110156102345780840160400151602083830181019190915201610214565b5060006020838301015280855250505060208201915060208301925061019e565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061028a57607f821691505b6020821081036102aa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102fa57806000526020600020601f840160051c810160208510156102d75750805b601f840160051c820191505b818110156102f757600081556001016102e3565b50505b505050565b81516001600160401b03811115610318576103186100d3565b61032c816103268454610276565b846102b0565b6020601f82116001811461036057600083156103485750848201515b600019600385901b1c1916600184901b1784556102f7565b600084815260208120601f198516915b828110156103905787850151825560209485019460019092019101610370565b50848210156103ae5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6080516106486103de6000396000818160ab015261031301526106486000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630121b93f14610067578063013cf08b1461007c5780632e4176cf146100a657806338db6dd3146100e5578063a3ec138d146100f8578063dfbf53ae14610149575b600080fd5b61007a6100753660046104e8565b610160565b005b61008f61008a3660046104e8565b61024c565b60405161009d929190610547565b60405180910390f35b6100cd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161009d565b61007a6100f3366004610569565b610308565b61012c610106366004610569565b6001602081905260009182526040909120805491015460ff808316926101009004169083565b60408051931515845291151560208401529082015260600161009d565b6101516103b6565b60405161009d93929190610599565b336000908152600160205260409020805460ff166101915760405163aba4733960e01b815260040160405180910390fd5b8054610100900460ff16156101b957604051637c9a1cf960e01b815260040160405180910390fd5b60005482106101db57604051631dc0650160e31b815260040160405180910390fd5b805461ff001916610100178155600181018290556000805483908110610203576102036105c2565b6000918252602082206001600290920201810180549091019055604051839133917fa36cc2bebb74db33e9f88110a07ef56e1b31b24b4c4f51b54b1664266e29f45b9190a35050565b6000818154811061025c57600080fd5b906000526020600020906002020160009150905080600001805461027f906105d8565b80601f01602080910402602001604051908101604052809291908181526020018280546102ab906105d8565b80156102f85780601f106102cd576101008083540402835291602001916102f8565b820191906000526020600020905b8154815290600101906020018083116102db57829003601f168201915b5050505050908060010154905082565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461035157604051636c4a979d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152600160205260409020805460ff166103b257805460ff191660011781556040516001600160a01b038316907fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd90600090a25b5050565b60006060818080805b6000548110156104285782600082815481106103dd576103dd6105c2565b90600052602060002090600202016001015411156104205760008181548110610408576104086105c2565b90600052602060002090600202016001015492508091505b6001016103bf565b50806000828154811061043d5761043d6105c2565b90600052602060002090600202016000018381805461045b906105d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610487906105d8565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b505050505091509450945094505050909192565b6000602082840312156104fa57600080fd5b5035919050565b6000815180845260005b818110156105275760208185018101518683018201520161050b565b506000602082860101526020601f19601f83011685010191505092915050565b60408152600061055a6040830185610501565b90508260208301529392505050565b60006020828403121561057b57600080fd5b81356001600160a01b038116811461059257600080fd5b9392505050565b8381526060602082015260006105b26060830185610501565b9050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806105ec57607f821691505b60208210810361060c57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122048e1bacce02c4dea75b43e4cad540da5d0495c4e258305c4ed8d7cb3f21b42e064736f6c634300081e0033";

type SimpleBallotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleBallotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleBallot__factory extends ContractFactory {
  constructor(...args: SimpleBallotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    proposalNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleBallot> {
    return super.deploy(
      proposalNames,
      overrides || {}
    ) as Promise<SimpleBallot>;
  }
  override getDeployTransaction(
    proposalNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(proposalNames, overrides || {});
  }
  override attach(address: string): SimpleBallot {
    return super.attach(address) as SimpleBallot;
  }
  override connect(signer: Signer): SimpleBallot__factory {
    return super.connect(signer) as SimpleBallot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleBallotInterface {
    return new utils.Interface(_abi) as SimpleBallotInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleBallot {
    return new Contract(address, _abi, signerOrProvider) as SimpleBallot;
  }
}
