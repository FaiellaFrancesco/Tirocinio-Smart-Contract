/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ChadGPT,
  ChadGPTInterface,
} from "../../../medium/0xea939135450bdb80ff4e069b89732e2d1ff20915.sol/ChadGPT";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600061001f6012600a610185565b61002e9064174876e800610198565b6000818155338082526001602052604080832084905551929350917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906100789085815260200190565b60405180910390a3506101af565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156100d7578085048111156100bb576100bb610086565b60018416156100c957908102905b60019390931c9280026100a0565b935093915050565b6000826100ee5750600161017f565b816100fb5750600061017f565b8160018114610111576002811461011b57610137565b600191505061017f565b60ff84111561012c5761012c610086565b50506001821b61017f565b5060208310610133831016604e8410600b841016171561015a575081810a61017f565b610167600019848461009c565b806000190482111561017b5761017b610086565b0290505b92915050565b600061019183836100df565b9392505050565b808202811582820484141761017f5761017f610086565b610753806101be6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461012157806370a082311461013b57806395d89b411461015b578063a9059cbb1461017e578063dd62ed3e1461019157600080fd5b806306fdde0314610098578063095ea7b3146100d457806318160ddd146100f757806323b872dd1461010e575b600080fd5b6100be6040518060400160405280600781526020016610da185911d41560ca1b81525081565b6040516100cb91906105bb565b60405180910390f35b6100e76100e2366004610625565b6101bc565b60405190151581526020016100cb565b61010060005481565b6040519081526020016100cb565b6100e761011c36600461064f565b61027f565b610129601281565b60405160ff90911681526020016100cb565b61010061014936600461068c565b60016020526000908152604090205481565b6100be6040518060400160405280600481526020016310d1d41560e21b81525081565b6100e761018c366004610625565b610484565b61010061019f3660046106ae565b600260209081526000928352604080842090915290825290205481565b60006001600160a01b0383166102195760405162461bcd60e51b815260206004820152601760248201527f417070726f766520746f207a65726f206164647265737300000000000000000060448201526064015b60405180910390fd5b3360008181526002602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060015b92915050565b60006001600160a01b0383166102d25760405162461bcd60e51b81526020600482015260186024820152775472616e7366657220746f207a65726f206164647265737360401b6044820152606401610210565b6001600160a01b0384166000908152600160205260409020548211156103315760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610210565b6001600160a01b03841660009081526002602090815260408083203384529091529020548211156103995760405162461bcd60e51b8152602060048201526012602482015271105b1b1bddd85b98d948195e18d95959195960721b6044820152606401610210565b6001600160a01b038416600090815260016020526040812080548492906103c19084906106f7565b90915550506001600160a01b038316600090815260016020526040812080548492906103ee90849061070a565b90915550506001600160a01b0384166000908152600260209081526040808320338452909152812080548492906104269084906106f7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161047291815260200190565b60405180910390a35060019392505050565b60006001600160a01b0383166104d75760405162461bcd60e51b81526020600482015260186024820152775472616e7366657220746f207a65726f206164647265737360401b6044820152606401610210565b3360009081526001602052604090205482111561052d5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610210565b336000908152600160205260408120805484929061054c9084906106f7565b90915550506001600160a01b0383166000908152600160205260408120805484929061057990849061070a565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161026d565b602081526000825180602084015260005b818110156105e957602081860181015160408684010152016105cc565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461062057600080fd5b919050565b6000806040838503121561063857600080fd5b61064183610609565b946020939093013593505050565b60008060006060848603121561066457600080fd5b61066d84610609565b925061067b60208501610609565b929592945050506040919091013590565b60006020828403121561069e57600080fd5b6106a782610609565b9392505050565b600080604083850312156106c157600080fd5b6106ca83610609565b91506106d860208401610609565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610279576102796106e1565b80820180821115610279576102796106e156fea2646970667358221220c5032adfcb28512a690931c6771828368c972d96611fefc02b070598f9b8177164736f6c634300081e0033";

type ChadGPTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChadGPTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChadGPT__factory extends ContractFactory {
  constructor(...args: ChadGPTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ChadGPT> {
    return super.deploy(overrides || {}) as Promise<ChadGPT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ChadGPT {
    return super.attach(address) as ChadGPT;
  }
  override connect(signer: Signer): ChadGPT__factory {
    return super.connect(signer) as ChadGPT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChadGPTInterface {
    return new utils.Interface(_abi) as ChadGPTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChadGPT {
    return new Contract(address, _abi, signerOrProvider) as ChadGPT;
  }
}
