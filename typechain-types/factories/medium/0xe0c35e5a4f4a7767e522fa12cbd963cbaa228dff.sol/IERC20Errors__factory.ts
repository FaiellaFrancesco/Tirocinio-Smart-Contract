/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IERC20Errors,
  IERC20ErrorsInterface,
} from "../../../medium/0xe0c35e5a4f4a7767e522fa12cbd963cbaa228dff.sol/IERC20Errors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
] as const;

export class IERC20Errors__factory {
  static readonly abi = _abi;
  static createInterface(): IERC20ErrorsInterface {
    return new Interface(_abi) as IERC20ErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IERC20Errors {
    return new Contract(address, _abi, runner) as unknown as IERC20Errors;
  }
}
