/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Ec,
  EcInterface,
} from "../../../medium/0x95ec40c3f99e3182b520aa5b118c93ecb2c2118b.sol/Ec";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_maxTxAmount",
        type: "uint256",
      },
    ],
    name: "MaxTxAmountUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_maxTaxSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_maxTxAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_maxWalletSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_taxSwapThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "bots_",
        type: "address[]",
      },
    ],
    name: "addBots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "notbot",
        type: "address[]",
      },
    ],
    name: "delBots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "a",
        type: "address",
      },
    ],
    name: "isBot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "manualSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "openTrading",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newFee",
        type: "uint256",
      },
    ],
    name: "reduceFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260176006556017600755600060085560006009556014600a55601e600b556014600c556000600d556009600a61003a919061030b565b610049906401f5806640610321565b600e556100586009600a61030b565b610067906401f5806640610321565b600f556100766009600a61030b565b6100849063fac03320610321565b6010556100936009600a61030b565b6100a19063fac03320610321565b6011556013805461ffff60a81b1916905560006014819055601581905580546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b0319163317905561011b6009600a61030b565b61012a906461f313f880610321565b3360009081526001602081905260408220929092556003906101546000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff1996871617905530815260039093528183208054851660019081179091556005549091168352912080549092161790556101b23390565b6001600160a01b031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6101ea6009600a61030b565b6101f9906461f313f880610321565b60405190815260200160405180910390a3610338565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156102605781600019048211156102465761024661020f565b8085161561025357918102915b93841c939080029061022a565b509250929050565b60008261027757506001610305565b8161028457506000610305565b816001811461029a57600281146102a4576102c0565b6001915050610305565b60ff8411156102b5576102b561020f565b50506001821b610305565b5060208310610133831016604e8410600b84101617156102e3575081810a610305565b6102ed8383610225565b80600019048211156103015761030161020f565b0290505b92915050565b600061031a60ff841683610268565b9392505050565b80820281158282048414176103055761030561020f565b611bbe806103476000396000f3fe6080604052600436106101395760003560e01c8063751039fc116100ab578063a9059cbb1161006f578063a9059cbb14610381578063bf474bed146103a1578063c9567bf9146103b7578063d34628cc146103cc578063dd62ed3e146103ec578063ec1f3f631461043257600080fd5b8063751039fc146102ed5780637d1db4a5146103025780638da5cb5b146103185780638f9a55c01461034057806395d89b411461035657600080fd5b8063313ce567116100fd578063313ce5671461021657806331c2d847146102325780633bbac5791461025457806351bc3c851461028d57806370a08231146102a2578063715018a6146102d857600080fd5b806306fdde0314610145578063095ea7b31461018d5780630faee56f146101bd57806318160ddd146101e157806323b872dd146101f657600080fd5b3661014057005b600080fd5b34801561015157600080fd5b5060408051808201909152600d81526c657468657265756d206369747960981b60208201525b6040516101849190611686565b60405180910390f35b34801561019957600080fd5b506101ad6101a83660046116fd565b610452565b6040519015158152602001610184565b3480156101c957600080fd5b506101d360115481565b604051908152602001610184565b3480156101ed57600080fd5b506101d3610469565b34801561020257600080fd5b506101ad610211366004611729565b61048b565b34801561022257600080fd5b5060405160098152602001610184565b34801561023e57600080fd5b5061025261024d366004611780565b6104f4565b005b34801561026057600080fd5b506101ad61026f366004611845565b6001600160a01b031660009081526004602052604090205460ff1690565b34801561029957600080fd5b50610252610589565b3480156102ae57600080fd5b506101d36102bd366004611845565b6001600160a01b031660009081526001602052604090205490565b3480156102e457600080fd5b506102526105d8565b3480156102f957600080fd5b50610252610687565b34801561030e57600080fd5b506101d3600e5481565b34801561032457600080fd5b506000546040516001600160a01b039091168152602001610184565b34801561034c57600080fd5b506101d3600f5481565b34801561036257600080fd5b50604080518082019091526002815261454360f01b6020820152610177565b34801561038d57600080fd5b506101ad61039c3660046116fd565b61073c565b3480156103ad57600080fd5b506101d360105481565b3480156103c357600080fd5b50610252610749565b3480156103d857600080fd5b506102526103e7366004611780565b610b41565b3480156103f857600080fd5b506101d3610407366004611862565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561043e57600080fd5b5061025261044d36600461189b565b610bc9565b600061045f338484610c10565b5060015b92915050565b60006104776009600a6119ae565b610486906461f313f8806119bd565b905090565b6000610498848484610d34565b6104ea84336104e585604051806060016040528060288152602001611b61602891396001600160a01b038a16600090815260026020908152604080832033845290915290205491906112e9565b610c10565b5060019392505050565b6000546001600160a01b031633146105275760405162461bcd60e51b815260040161051e906119d4565b60405180910390fd5b60005b81518110156105855760006004600084848151811061054b5761054b611a09565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161052a565b5050565b6005546001600160a01b0316336001600160a01b0316146105a957600080fd5b3060009081526001602052604090205480156105c8576105c881611323565b478015610585576105858161149d565b6000546001600160a01b031633146106025760405162461bcd60e51b815260040161051e906119d4565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561063c573d6000803e3d6000fd5b50600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146106b15760405162461bcd60e51b815260040161051e906119d4565b6106bd6009600a6119ae565b6106cc906461f313f8806119bd565b600e556106db6009600a6119ae565b6106ea906461f313f8806119bd565b600f557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61071a6009600a6119ae565b610729906461f313f8806119bd565b60405190815260200160405180910390a1565b600061045f338484610d34565b6000546001600160a01b031633146107735760405162461bcd60e51b815260040161051e906119d4565b601354600160a01b900460ff16156107cd5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161051e565b601280546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d1790556108003033600019610c10565b6108393061039c6064610833605f61082d336001600160a01b031660009081526001602052604090205490565b906114d7565b90611560565b50601260009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190611a1f565b6001600160a01b031663c9c6539630601260009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190611a1f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a89190611a1f565b601380546001600160a01b0319166001600160a01b039283161790556012546109d691309116600019610c10565b6012546001600160a01b031663f305d7194730610a08816001600160a01b031660009081526001602052604090205490565b600080610a1d6000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a85573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610aaa9190611a3c565b505060135460125460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b279190611a6a565b506013805462ff00ff60a01b19166201000160a01b179055565b6000546001600160a01b03163314610b6b5760405162461bcd60e51b815260040161051e906119d4565b60005b815181101561058557600160046000848481518110610b8f57610b8f611a09565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610b6e565b6005546001600160a01b0316336001600160a01b031614610be957600080fd5b6008548111158015610bfd57506009548111155b610c0657600080fd5b6008819055600955565b6001600160a01b038316610c725760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161051e565b6001600160a01b038216610cd35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161051e565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d985760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161051e565b6001600160a01b038216610dfa5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161051e565b60008111610e5c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161051e565b600080546001600160a01b03858116911614801590610e8957506000546001600160a01b03848116911614155b156111a6576001600160a01b03841660009081526004602052604090205460ff16158015610ed057506001600160a01b03831660009081526004602052604090205460ff16155b610ed957600080fd5b610eff6064610833600a54600d5411610ef457600654610ef8565b6008545b85906114d7565b6013549091506001600160a01b038581169116148015610f2d57506012546001600160a01b03848116911614155b8015610f5257506001600160a01b03831660009081526003602052604090205460ff16155b1561103a57600e54821115610fa95760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161051e565b600f5482610fcc856001600160a01b031660009081526001602052604090205490565b610fd69190611a8c565b11156110245760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161051e565b600d805490600061103483611a9f565b91905055505b6013546001600160a01b03848116911614801561106057506001600160a01b0384163014155b1561108d5761108a6064610833600b54600d541161108057600754610ef8565b60095485906114d7565b90505b30600090815260016020526040902054601354600160a81b900460ff161580156110c457506013546001600160a01b038581169116145b80156110d95750601354600160b01b900460ff165b80156110e6575060105481115b80156110f55750600c54600d54115b156111a45760155443111561110a5760006014555b60036014541061115c5760405162461bcd60e51b815260206004820152601760248201527f4f6e6c7920332073656c6c732070657220626c6f636b21000000000000000000604482015260640161051e565b6111796111748461116f846011546115a2565b6115a2565b611323565b478015611189576111894761149d565b6014805490600061119983611a9f565b909155505043601555505b505b801561122057306000908152600160205260409020546111c690826115b7565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906112179085815260200190565b60405180910390a35b6001600160a01b0384166000908152600160205260409020546112439083611616565b6001600160a01b0385166000908152600160205260409020556112886112698383611616565b6001600160a01b038516600090815260016020526040902054906115b7565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112d28585611616565b60405190815260200160405180910390a350505050565b6000818484111561130d5760405162461bcd60e51b815260040161051e9190611686565b50600061131a8486611ab8565b95945050505050565b6013805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061136b5761136b611a09565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e89190611a1f565b816001815181106113fb576113fb611a09565b6001600160a01b0392831660209182029290920101526012546114219130911684610c10565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac9479061145a908590600090869030904290600401611acb565b600060405180830381600087803b15801561147457600080fd5b505af1158015611488573d6000803e3d6000fd5b50506013805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610585573d6000803e3d6000fd5b6000826000036114e957506000610463565b60006114f583856119bd565b9050826115028583611b3e565b146115595760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161051e565b9392505050565b600061155983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611658565b60008183116115b15782611559565b50919050565b6000806115c48385611a8c565b9050838110156115595760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161051e565b600061155983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112e9565b600081836116795760405162461bcd60e51b815260040161051e9190611686565b50600061131a8486611b3e565b60006020808352835180602085015260005b818110156116b457858101830151858201604001528201611698565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116ea57600080fd5b50565b80356116f8816116d5565b919050565b6000806040838503121561171057600080fd5b823561171b816116d5565b946020939093013593505050565b60008060006060848603121561173e57600080fd5b8335611749816116d5565b92506020840135611759816116d5565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561179357600080fd5b823567ffffffffffffffff808211156117ab57600080fd5b818501915085601f8301126117bf57600080fd5b8135818111156117d1576117d161176a565b8060051b604051601f19603f830116810181811085821117156117f6576117f661176a565b60405291825284820192508381018501918883111561181457600080fd5b938501935b828510156118395761182a856116ed565b84529385019392850192611819565b98975050505050505050565b60006020828403121561185757600080fd5b8135611559816116d5565b6000806040838503121561187557600080fd5b8235611880816116d5565b91506020830135611890816116d5565b809150509250929050565b6000602082840312156118ad57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156119055781600019048211156118eb576118eb6118b4565b808516156118f857918102915b93841c93908002906118cf565b509250929050565b60008261191c57506001610463565b8161192957506000610463565b816001811461193f576002811461194957611965565b6001915050610463565b60ff84111561195a5761195a6118b4565b50506001821b610463565b5060208310610133831016604e8410600b8410161715611988575081810a610463565b61199283836118ca565b80600019048211156119a6576119a66118b4565b029392505050565b600061155960ff84168361190d565b8082028115828204841417610463576104636118b4565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611a3157600080fd5b8151611559816116d5565b600080600060608486031215611a5157600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611a7c57600080fd5b8151801515811461155957600080fd5b80820180821115610463576104636118b4565b600060018201611ab157611ab16118b4565b5060010190565b81810381811115610463576104636118b4565b600060a08201878352602087602085015260a0604085015281875180845260c08601915060208901935060005b81811015611b1d5784516001600160a01b031683529383019391830191600101611af8565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611b5b57634e487b7160e01b600052601260045260246000fd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212208b7dde2b6aa0fc7830c80169dbf6a540fdb5a623f606c57f94d100933dfed1dc64736f6c63430008190033";

type EcConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EcConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ec__factory extends ContractFactory {
  constructor(...args: EcConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Ec> {
    return super.deploy(overrides || {}) as Promise<Ec>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Ec {
    return super.attach(address) as Ec;
  }
  override connect(signer: Signer): Ec__factory {
    return super.connect(signer) as Ec__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EcInterface {
    return new utils.Interface(_abi) as EcInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ec {
    return new Contract(address, _abi, signerOrProvider) as Ec;
  }
}
