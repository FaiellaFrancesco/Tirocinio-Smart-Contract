/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Ekphrasis,
  EkphrasisInterface,
} from "../../../medium/0xbb798bfc0f8b6d2e95d7a94451492ba244ef9c02.sol/Ekphrasis";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "taxWallet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TaxWalletPaymentRevert",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "Owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_maxWallet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_taxWallet",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "openTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rescueEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600a6004556006600555600360065560036007556014600855601a600955601a600a556000600b556000600c556000600d556009600a61004491906102d0565b610051906205f3706102e6565b600e55600f80546001600160a01b03191673e1d94f2f2630293fcdc4ccea0467c8455dc01b701790556011805460ff60a01b1916905534801561009357600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36100df6009600a6102d0565b6100ed90630112a8806102e6565b3360009081526001602081905260408220929092556003906101176000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff199687161790553081526003909352818320805485166001908117909155600f549091168352912080549092161790556101753390565b6001600160a01b031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6101ad6009600a6102d0565b6101bb90630112a8806102e6565b60405190815260200160405180910390a36102fd565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561022257808504811115610206576102066101d1565b600184161561021457908102905b60019390931c9280026101eb565b935093915050565b600082610239575060016102ca565b81610246575060006102ca565b816001811461025c576002811461026657610282565b60019150506102ca565b60ff841115610277576102776101d1565b50506001821b6102ca565b5060208310610133831016604e8410600b84101617156102a5575081810a6102ca565b6102b260001984846101e7565b80600019048211156102c6576102c66101d1565b0290505b92915050565b60006102df60ff84168361022a565b9392505050565b80820281158282048414176102ca576102ca6101d1565b6112c48061030c6000396000f3fe6080604052600436106100ec5760003560e01c8063715018a61161008a578063b4a99a4e11610059578063b4a99a4e146102b6578063ce31a06b146102d4578063dd62ed3e146102e9578063fb201b1d1461032f57600080fd5b8063715018a61461023857806382247ec01461024f57806395d89b4114610265578063a9059cbb1461029657600080fd5b806323b872dd116100c657806323b872dd1461018e578063313ce567146101ae5780636f268a99146101ca57806370a082311461020257600080fd5b806306fdde03146100f8578063095ea7b31461013b57806318160ddd1461016b57600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50604080518082019091526008815267456b70687261697360c01b60208201525b6040516101329190610f0a565b60405180910390f35b34801561014757600080fd5b5061015b610156366004610f6d565b610344565b6040519015158152602001610132565b34801561017757600080fd5b5061018061035b565b604051908152602001610132565b34801561019a57600080fd5b5061015b6101a9366004610f99565b61037c565b3480156101ba57600080fd5b5060405160098152602001610132565b3480156101d657600080fd5b50600f546101ea906001600160a01b031681565b6040516001600160a01b039091168152602001610132565b34801561020e57600080fd5b5061018061021d366004610fda565b6001600160a01b031660009081526001602052604090205490565b34801561024457600080fd5b5061024d610438565b005b34801561025b57600080fd5b50610180600e5481565b34801561027157600080fd5b50604080518082019091526008815267454b50485241495360c01b6020820152610125565b3480156102a257600080fd5b5061015b6102b1366004610f6d565b6104ac565b3480156102c257600080fd5b506000546001600160a01b03166101ea565b3480156102e057600080fd5b5061024d610502565b3480156102f557600080fd5b50610180610304366004610ff7565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561033b57600080fd5b5061024d610598565b6000610351338484610763565b5060015b92915050565b60006103696009600a61112d565b61037790630112a88061113c565b905090565b6001600160a01b03831660009081526002602090815260408083203384529091528120548211156103e85760405162461bcd60e51b81526020600482015260116024820152704578636565647320616c6c6f77616e636560781b60448201526064015b60405180910390fd5b6103f3848484610856565b6001600160a01b03841660009081526002602090815260408083203380855292529091205461042e918691610429908690611153565b610763565b5060019392505050565b6000546001600160a01b031633146104625760405162461bcd60e51b81526004016103df90611166565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006104b9338484610856565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6000546001600160a01b0316331461052c5760405162461bcd60e51b81526004016103df90611166565b47801561059557600f546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610580576040519150601f19603f3d011682016040523d82523d6000602084013e610585565b606091505b505090508061059357600080fd5b505b50565b6000546001600160a01b031633146105c25760405162461bcd60e51b81526004016103df90611166565b601080546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a919061119b565b6001600160a01b031663c9c6539630601060009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d0919061119b565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061119b565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166107ad5760405162461bcd60e51b815260206004820152601160248201527046726f6d207a65726f206164647265737360781b60448201526064016103df565b6001600160a01b0382166107f55760405162461bcd60e51b815260206004820152600f60248201526e546f207a65726f206164647265737360881b60448201526064016103df565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166108a05760405162461bcd60e51b815260206004820152601160248201527046726f6d207a65726f206164647265737360781b60448201526064016103df565b6001600160a01b0382166108e85760405162461bcd60e51b815260206004820152600f60248201526e546f207a65726f206164647265737360881b60448201526064016103df565b8060000361092e5760405162461bcd60e51b81526020600482015260136024820152724d757374206265203e207468616e207a65726f60681b60448201526064016103df565b6001600160a01b03831660009081526003602052604081205460ff1615801561097057506001600160a01b03831660009081526003602052604090205460ff16155b15610b8a576011546001600160a01b0385811691161480156109a057506010546001600160a01b03848116911614155b15610a5e57600e54826109c8856001600160a01b031660009081526001602052604090205490565b6109d291906111b8565b1115610a195760405162461bcd60e51b815260206004820152601660248201527545786365656473206d617877616c6c65742073697a6560501b60448201526064016103df565b6064600854600b5411610a2e57600454610a32565b6006545b610a3c908461113c565b610a4691906111cb565b600b80549192506000610a58836111ed565b91905055505b6011546001600160a01b0390811690841603610aa4576064600954600b5411610a8957600554610a8d565b6007545b610a97908461113c565b610aa191906111cb565b90505b30600090815260016020526040902054601154600160a01b900460ff16158015610adb57506011546001600160a01b038581169116145b8015610afd5750610aee6009600a61112d565b610afa90619c4061113c565b81115b8015610b0c5750600a54600b54115b15610b8857600d54431115610b21576000600c555b6003600c5410610b3057600080fd5b610b5d610b5884610b5384610b476009600a61112d565b610b539061fde861113c565b610cd0565b610ce8565b478015610b6d57610b6d47610e69565b600c8054906000610b7d836111ed565b909155505043600d55505b505b8015610c055730600090815260016020526040902054610bab9082906111b8565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610bfc9085815260200190565b60405180910390a35b6001600160a01b038416600090815260016020526040902054610c29908390611153565b6001600160a01b038516600090815260016020526040902055610c4c8183611153565b6001600160a01b038416600090815260016020526040902054610c6f91906111b8565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610cb98486611153565b60405190815260200160405180910390a350505050565b6000818311610cdf5782610ce1565b815b9392505050565b6011805460ff60a01b1916600160a01b1790558015610e59576040805160028082526060820183526000926020830190803683370190505090503081600081518110610d3657610d36611206565b6001600160a01b03928316602091820292909201810191909152601054604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db3919061119b565b81600181518110610dc657610dc6611206565b6001600160a01b039283166020918202929092010152601054610dec9130911684610763565b60105460405163791ac94760e01b81526001600160a01b039091169063791ac94790610e2590859060009086903090429060040161121c565b600060405180830381600087803b158015610e3f57600080fd5b505af1158015610e53573d6000803e3d6000fd5b50505050505b506011805460ff60a01b19169055565b600f546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610eb6576040519150601f19603f3d011682016040523d82523d6000602084013e610ebb565b606091505b505090508061059357600f546040518381526001600160a01b03909116907f0759dac7fa668d044a7de2b7fd31ccc6f577fdf83cd0441d6ebaba277754db579060200160405180910390a25050565b602081526000825180602084015260005b81811015610f385760208186018101516040868401015201610f1b565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461059557600080fd5b60008060408385031215610f8057600080fd5b8235610f8b81610f58565b946020939093013593505050565b600080600060608486031215610fae57600080fd5b8335610fb981610f58565b92506020840135610fc981610f58565b929592945050506040919091013590565b600060208284031215610fec57600080fd5b8135610ce181610f58565b6000806040838503121561100a57600080fd5b823561101581610f58565b9150602083013561102581610f58565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156110815780850481111561106557611065611030565b600184161561107357908102905b60019390931c92800261104a565b935093915050565b60008261109857506001610355565b816110a557506000610355565b81600181146110bb57600281146110c5576110e1565b6001915050610355565b60ff8411156110d6576110d6611030565b50506001821b610355565b5060208310610133831016604e8410600b8410161715611104575081810a610355565b6111116000198484611046565b806000190482111561112557611125611030565b029392505050565b6000610ce160ff841683611089565b808202811582820484141761035557610355611030565b8181038181111561035557610355611030565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156111ad57600080fd5b8151610ce181610f58565b8082018082111561035557610355611030565b6000826111e857634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016111ff576111ff611030565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060a0820187835286602084015260a0604084015280865180835260c08501915060208801925060005b8181101561126e5783516001600160a01b0316835260209384019390920191600101611247565b50506001600160a01b03959095166060840152505060800152939250505056fea2646970667358221220808c34ce354e619d18e232940e95c49448e903e43437f101dee36b4ebf8dfb3b64736f6c634300081e0033";

type EkphrasisConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EkphrasisConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ekphrasis__factory extends ContractFactory {
  constructor(...args: EkphrasisConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Ekphrasis> {
    return super.deploy(overrides || {}) as Promise<Ekphrasis>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Ekphrasis {
    return super.attach(address) as Ekphrasis;
  }
  override connect(signer: Signer): Ekphrasis__factory {
    return super.connect(signer) as Ekphrasis__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EkphrasisInterface {
    return new utils.Interface(_abi) as EkphrasisInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Ekphrasis {
    return new Contract(address, _abi, signerOrProvider) as Ekphrasis;
  }
}
