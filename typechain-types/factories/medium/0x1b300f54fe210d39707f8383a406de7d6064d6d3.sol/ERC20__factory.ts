/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC20,
  ERC20Interface,
} from "../../../medium/0x1b300f54fe210d39707f8383a406de7d6064d6d3.sol/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initialBalance_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "decimals_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d73380380610d7383398101604081905261002f9161017a565b600461003b86826102a3565b50600561004885826102a3565b5061005482600a610460565b61005e9084610473565b60028190556001600160a01b038216600081815260208181526040808320859055600387905551938452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050505061048a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126100e857600080fd5b81516001600160401b03811115610101576101016100c1565b604051601f8201601f19908116603f011681016001600160401b038111828210171561012f5761012f6100c1565b60405281815283820160200185101561014757600080fd5b60005b828110156101665760208186018101518383018201520161014a565b506000918101602001919091529392505050565b600080600080600060a0868803121561019257600080fd5b85516001600160401b038111156101a857600080fd5b6101b4888289016100d7565b602088015190965090506001600160401b038111156101d257600080fd5b6101de888289016100d7565b6040880151606089015160808a0151929750909550935090506001600160a01b038116811461020c57600080fd5b809150509295509295909350565b600181811c9082168061022e57607f821691505b60208210810361024e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561029e57806000526020600020601f840160051c8101602085101561027b5750805b601f840160051c820191505b8181101561029b5760008155600101610287565b50505b505050565b81516001600160401b038111156102bc576102bc6100c1565b6102d0816102ca845461021a565b84610254565b6020601f82116001811461030457600083156102ec5750848201515b600019600385901b1c1916600184901b17845561029b565b600084815260208120601f198516915b828110156103345787850151825560209485019460019092019101610314565b50848210156103525786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156103b25780850481111561039657610396610361565b60018416156103a457908102905b60019390931c92800261037b565b935093915050565b6000826103c95750600161045a565b816103d65750600061045a565b81600181146103ec57600281146103f657610412565b600191505061045a565b60ff84111561040757610407610361565b50506001821b61045a565b5060208310610133831016604e8410600b8410161715610435575081810a61045a565b6104426000198484610377565b806000190482111561045657610456610361565b0290505b92915050565b600061046c83836103ba565b9392505050565b808202811582820484141761045a5761045a610361565b6108da806104996000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461011c57806370a082311461012f57806395d89b4114610158578063a457c2d714610160578063a9059cbb14610173578063dd62ed3e1461018657600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101bf565b6040516100c39190610708565b60405180910390f35b6100df6100da366004610772565b610251565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461079c565b610268565b6003546100f3565b6100df61012a366004610772565b61031e565b6100f361013d3660046107d9565b6001600160a01b031660009081526020819052604090205490565b6100b6610355565b6100df61016e366004610772565b610364565b6100df610181366004610772565b6103ff565b6100f36101943660046107fb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600480546101ce9061082e565b80601f01602080910402602001604051908101604052809291908181526020018280546101fa9061082e565b80156102475780601f1061021c57610100808354040283529160200191610247565b820191906000526020600020905b81548152906001019060200180831161022a57829003601f168201915b5050505050905090565b600061025e33848461040c565b5060015b92915050565b6000610275848484610530565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156102ff5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610313853361030e868561087e565b61040c565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161025e91859061030e908690610891565b6060600580546101ce9061082e565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103e65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102f6565b6103f5338561030e868561087e565b5060019392505050565b600061025e338484610530565b6001600160a01b03831661046e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102f6565b6001600160a01b0382166104cf5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102f6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105945760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102f6565b6001600160a01b0382166105f65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102f6565b6001600160a01b0383166000908152602081905260409020548181101561066e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102f6565b610678828261087e565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906106ae908490610891565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fa91815260200190565b60405180910390a350505050565b602081526000825180602084015260005b818110156107365760208186018101516040868401015201610719565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461076d57600080fd5b919050565b6000806040838503121561078557600080fd5b61078e83610756565b946020939093013593505050565b6000806000606084860312156107b157600080fd5b6107ba84610756565b92506107c860208501610756565b929592945050506040919091013590565b6000602082840312156107eb57600080fd5b6107f482610756565b9392505050565b6000806040838503121561080e57600080fd5b61081783610756565b915061082560208401610756565b90509250929050565b600181811c9082168061084257607f821691505b60208210810361086257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561026257610262610868565b808201808211156102625761026261086856fea2646970667358221220fd241c5f80a3894a8c3a037c22b7d0447feb9feab12e066805d47849b48cb73464736f6c634300081e0033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    initialBalance_: BigNumberish,
    decimals_: BigNumberish,
    tokenOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name_,
      symbol_,
      initialBalance_,
      decimals_,
      tokenOwner,
      overrides || {}
    );
  }
  override deploy(
    name_: string,
    symbol_: string,
    initialBalance_: BigNumberish,
    decimals_: BigNumberish,
    tokenOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name_,
      symbol_,
      initialBalance_,
      decimals_,
      tokenOwner,
      overrides || {}
    ) as Promise<
      ERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20__factory {
    return super.connect(runner) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20 {
    return new Contract(address, _abi, runner) as unknown as ERC20;
  }
}
