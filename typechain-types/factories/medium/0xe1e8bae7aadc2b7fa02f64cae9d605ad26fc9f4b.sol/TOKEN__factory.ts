/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TOKEN,
  TOKENInterface,
} from "../../../medium/0xe1e8bae7aadc2b7fa02f64cae9d605ad26fc9f4b.sol/TOKEN";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_maxTaxSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_swapThres",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rescueETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "setTaxWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startEuphoria",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600060055560006006556000600755600060085560006009556009600a61002b919061031a565b61003990633b9aca00610330565b600a556000600b819055600d805461ffff60a81b19169055600e819055600f81905580546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b0319163317815530600090815260036020526040808220805460ff19908116600190811790925593546001600160a01b031683529120805490921617905560646100f16009600a61031a565b6100ff90633b9aca00610330565b61010a906002610330565b6101149190610347565b3360009081526001602052604090205560646101326009600a61031a565b61014090633b9aca00610330565b61014b906062610330565b6101559190610347565b30600090815260016020526040902055336001600160a01b031660006000805160206119e9833981519152606461018e6009600a61031a565b61019c90633b9aca00610330565b6101a7906002610330565b6101b19190610347565b60405190815260200160405180910390a33060006000805160206119e983398151915260646101e26009600a61031a565b6101f090633b9aca00610330565b6101fb906062610330565b6102059190610347565b60405190815260200160405180910390a3610369565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561026c578085048111156102505761025061021b565b600184161561025e57908102905b60019390931c928002610235565b935093915050565b60008261028357506001610314565b8161029057506000610314565b81600181146102a657600281146102b0576102cc565b6001915050610314565b60ff8411156102c1576102c161021b565b50506001821b610314565b5060208310610133831016604e8410600b84101617156102ef575081810a610314565b6102fc6000198484610231565b80600019048211156103105761031061021b565b0290505b92915050565b600061032960ff841683610274565b9392505050565b80820281158282048414176103145761031461021b565b60008261036457634e487b7160e01b600052601260045260246000fd5b500490565b611671806103786000396000f3fe6080604052600436106101025760003560e01c806370a08231116100955780638da5cb5b116100645780638da5cb5b1461029857806395d89b41146102c0578063a9059cbb146102ed578063dd62ed3e1461030d578063ea414b281461035357600080fd5b806370a0823114610223578063715018a614610259578063751039fc1461026e5780638c7003581461028357600080fd5b806320800a00116100d157806320800a00146101ba57806323b872dd146101d1578063313ce567146101f15780636482c89a1461020d57600080fd5b806306fdde031461010e578063095ea7b3146101515780630faee56f1461018157806318160ddd146101a557600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b50604080518082019091526008815267457570686f72696160c01b60208201525b604051610148919061123f565b60405180910390f35b34801561015d57600080fd5b5061017161016c3660046112a2565b610373565b6040519015158152602001610148565b34801561018d57600080fd5b50610197600a5481565b604051908152602001610148565b3480156101b157600080fd5b5061019761038a565b3480156101c657600080fd5b506101cf6103ab565b005b3480156101dd57600080fd5b506101716101ec3660046112ce565b61041a565b3480156101fd57600080fd5b5060405160098152602001610148565b34801561021957600080fd5b50610197600b5481565b34801561022f57600080fd5b5061019761023e36600461130f565b6001600160a01b031660009081526001602052604090205490565b34801561026557600080fd5b506101cf6104ca565b34801561027a57600080fd5b506101cf61053e565b34801561028f57600080fd5b506101cf61056a565b3480156102a457600080fd5b506000546040516001600160a01b039091168152602001610148565b3480156102cc57600080fd5b5060408051808201909152600481526308aaaa0960e31b602082015261013b565b3480156102f957600080fd5b506101716103083660046112a2565b610922565b34801561031957600080fd5b5061019761032836600461132c565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561035f57600080fd5b506101cf61036e36600461130f565b61092f565b600061038033848461096d565b5060015b92915050565b60006103986009600a611462565b6103a690633b9aca00611471565b905090565b6000546001600160a01b031633146103de5760405162461bcd60e51b81526004016103d590611488565b60405180910390fd5b600047116103eb57600080fd5b60405133904780156108fc02916000818181858888f19350505050158015610417573d6000803e3d6000fd5b50565b6000610427848484610a91565b3360009081526003602052604090205460ff161580156104695750600d546001600160a01b038581169116148061046957506001600160a01b03831661dead14155b156104c0576104c084336104bb85604051806060016040528060288152602001611614602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190610eb3565b61096d565b5060019392505050565b6000546001600160a01b031633146104f45760405162461bcd60e51b81526004016103d590611488565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146105685760405162461bcd60e51b81526004016103d590611488565b565b6000546001600160a01b031633146105945760405162461bcd60e51b81526004016103d590611488565b600d54600160a01b900460ff16156105ee5760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016103d5565b600c80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106379030906106296009600a611462565b6104bb90633b9aca00611471565b600c60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae91906114bd565b6001600160a01b031663c9c6539630600c60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073491906114bd565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a591906114bd565b600d80546001600160a01b039283166001600160a01b0319909116179055600c541663f305d71947306107ed816001600160a01b031660009081526001602052604090205490565b6000806108026000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561086a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061088f91906114da565b5050600d805462ff00ff60a01b1981166201000160a01b17909155600c5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af11580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190611508565b6000610380338484610a91565b3360009081526003602052604090205460ff1661094b57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166109cf5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d5565b6001600160a01b038216610a305760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d5565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610af55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d5565b6001600160a01b038216610b575760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d5565b60008111610bb95760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016103d5565b60006001600160a01b0384163014801590610bdd57506001600160a01b0383163014155b15610d5557600d54600160a81b900460ff16610c2257610c1f6064610c1960075460085411610c0e57600554610c12565b6006545b8590610eed565b90610f76565b90505b600d546001600160a01b038581169116148015610c4d5750600c546001600160a01b03848116911614155b8015610c7257506001600160a01b03831660009081526003602052604090205460ff16155b8015610c8c57506004546001600160a01b03848116911614155b15610ca75760088054906000610ca18361152a565b91905055505b30600090815260016020526040902054600d54600160a81b900460ff16158015610cde5750600d546001600160a01b038581169116145b8015610cf35750600d54600160b01b900460ff165b8015610d0d57506004546001600160a01b03868116911614155b15610d53578015610d47576000600a548211610d295781610d2d565b600a545b9050610d45818511610d3f5784610fb8565b81610fb8565b505b47610d5147611132565b505b505b6001600160a01b038416600090815260016020526040902054610d789083611170565b6001600160a01b038516600090815260016020526040902055610dbd610d9e8383611170565b6001600160a01b038516600090815260016020526040902054906111b2565b6001600160a01b0384166000908152600160205260409020558015610e505730600090815260016020526040902054610df690826111b2565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e479085815260200190565b60405180910390a35b6001600160a01b03831661dead14610ead576001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610e9b8585611170565b60405190815260200160405180910390a35b50505050565b60008184841115610ed75760405162461bcd60e51b81526004016103d5919061123f565b506000610ee48486611543565b95945050505050565b600082600003610eff57506000610384565b6000610f0b8385611471565b905082610f188583611556565b14610f6f5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016103d5565b9392505050565b6000610f6f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611211565b600d805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061100057611000611578565b6001600160a01b03928316602091820292909201810191909152600c54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107d91906114bd565b8160018151811061109057611090611578565b6001600160a01b039283166020918202929092010152600c546110b6913091168461096d565b600c5460405163791ac94760e01b81526001600160a01b039091169063791ac947906110ef90859060009086903090429060040161158e565b600060405180830381600087803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b5050600d805460ff60a81b1916905550505050565b6004546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561116c573d6000803e3d6000fd5b5050565b6000610f6f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610eb3565b6000806111bf8385611600565b905083811015610f6f5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016103d5565b600081836112325760405162461bcd60e51b81526004016103d5919061123f565b506000610ee48486611556565b602081526000825180602084015260005b8181101561126d5760208186018101516040868401015201611250565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461041757600080fd5b600080604083850312156112b557600080fd5b82356112c08161128d565b946020939093013593505050565b6000806000606084860312156112e357600080fd5b83356112ee8161128d565b925060208401356112fe8161128d565b929592945050506040919091013590565b60006020828403121561132157600080fd5b8135610f6f8161128d565b6000806040838503121561133f57600080fd5b823561134a8161128d565b9150602083013561135a8161128d565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156113b65780850481111561139a5761139a611365565b60018416156113a857908102905b60019390931c92800261137f565b935093915050565b6000826113cd57506001610384565b816113da57506000610384565b81600181146113f057600281146113fa57611416565b6001915050610384565b60ff84111561140b5761140b611365565b50506001821b610384565b5060208310610133831016604e8410600b8410161715611439575081810a610384565b611446600019848461137b565b806000190482111561145a5761145a611365565b029392505050565b6000610f6f60ff8416836113be565b808202811582820484141761038457610384611365565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156114cf57600080fd5b8151610f6f8161128d565b6000806000606084860312156114ef57600080fd5b5050815160208301516040909301519094929350919050565b60006020828403121561151a57600080fd5b81518015158114610f6f57600080fd5b60006001820161153c5761153c611365565b5060010190565b8181038181111561038457610384611365565b60008261157357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a0820187835286602084015260a0604084015280865180835260c08501915060208801925060005b818110156115e05783516001600160a01b03168352602093840193909201916001016115b9565b50506001600160a01b039590951660608401525050608001529392505050565b808201808211156103845761038461136556fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220a0ff0d4104a82ee8feb27abec0853d548b1d0b0997145964f01037229e20f8cd64736f6c634300081e0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type TOKENConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TOKENConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TOKEN__factory extends ContractFactory {
  constructor(...args: TOKENConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TOKEN> {
    return super.deploy(overrides || {}) as Promise<TOKEN>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TOKEN {
    return super.attach(address) as TOKEN;
  }
  override connect(signer: Signer): TOKEN__factory {
    return super.connect(signer) as TOKEN__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TOKENInterface {
    return new utils.Interface(_abi) as TOKENInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TOKEN {
    return new Contract(address, _abi, signerOrProvider) as TOKEN;
  }
}
