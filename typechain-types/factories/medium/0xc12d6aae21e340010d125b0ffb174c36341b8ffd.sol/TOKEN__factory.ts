/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TOKEN,
  TOKENInterface,
} from "../../../medium/0xc12d6aae21e340010d125b0ffb174c36341b8ffd.sol/TOKEN";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "TOKNThresAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_maxTaxSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "enableTradingTOKN",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rescueETHfromPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "setTaxWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526005805560006006556000600755600060085560006009556002600a556000600b556000600c556009600a610039919061031c565b61004790633b9aca00610332565b600d55600f805461ffff60a81b19168155601055600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b0319163317815530600090815260036020526040808220805460ff19908116600190811790925593546001600160a01b031683529120805490921617905560646100f36009600a61031c565b61010190633b9aca00610332565b61010c906002610332565b6101169190610349565b3360009081526001602052604090205560646101346009600a61031c565b61014290633b9aca00610332565b61014d906062610332565b6101579190610349565b30600090815260016020526040902055336001600160a01b031660006000805160206119ff83398151915260646101906009600a61031c565b61019e90633b9aca00610332565b6101a9906002610332565b6101b39190610349565b60405190815260200160405180910390a33060006000805160206119ff83398151915260646101e46009600a61031c565b6101f290633b9aca00610332565b6101fd906062610332565b6102079190610349565b60405190815260200160405180910390a361036b565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561026e578085048111156102525761025261021d565b600184161561026057908102905b60019390931c928002610237565b935093915050565b60008261028557506001610316565b8161029257506000610316565b81600181146102a857600281146102b2576102ce565b6001915050610316565b60ff8411156102c3576102c361021d565b50506001821b610316565b5060208310610133831016604e8410600b84101617156102f1575081810a610316565b6102fe6000198484610233565b80600019048211156103125761031261021d565b0290505b92915050565b600061032b60ff841683610276565b9392505050565b80820281158282048414176103165761031661021d565b60008261036657634e487b7160e01b600052601260045260246000fd5b500490565b6116858061037a6000396000f3fe6080604052600436106101025760003560e01c8063715018a6116100955780639639b01d116100645780639639b01d146102d6578063a9059cbb146102ec578063ba2b30da1461030c578063dd62ed3e14610321578063ea414b281461036757600080fd5b8063715018a614610258578063751039fc1461026d5780638da5cb5b1461028257806395d89b41146102aa57600080fd5b806323b872dd116100d157806323b872dd146101cf578063313ce567146101ef57806348fd35ae1461020b57806370a082311461022257600080fd5b806306fdde031461010e578063095ea7b3146101665780630faee56f1461019657806318160ddd146101ba57600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5060408051808201909152601b81527f31303020476f72696c6c617320567320426f6e6e696520426c7565000000000060208201525b60405161015d9190611253565b60405180910390f35b34801561017257600080fd5b506101866101813660046112b6565b610387565b604051901515815260200161015d565b3480156101a257600080fd5b506101ac600d5481565b60405190815260200161015d565b3480156101c657600080fd5b506101ac61039e565b3480156101db57600080fd5b506101866101ea3660046112e2565b6103bf565b3480156101fb57600080fd5b506040516009815260200161015d565b34801561021757600080fd5b5061022061046f565b005b34801561022e57600080fd5b506101ac61023d366004611323565b6001600160a01b031660009081526001602052604090205490565b34801561026457600080fd5b50610220610833565b34801561027957600080fd5b506102206108a7565b34801561028e57600080fd5b506000546040516001600160a01b03909116815260200161015d565b3480156102b657600080fd5b5060408051808201909152600381526223ab2160e91b6020820152610150565b3480156102e257600080fd5b506101ac60105481565b3480156102f857600080fd5b506101866103073660046112b6565b6108d3565b34801561031857600080fd5b506102206108e0565b34801561032d57600080fd5b506101ac61033c366004611340565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561037357600080fd5b50610220610382366004611323565b610943565b6000610394338484610981565b5060015b92915050565b60006103ac6009600a611476565b6103ba90633b9aca00611485565b905090565b60006103cc848484610aa5565b3360009081526003602052604090205460ff1615801561040e5750600f546001600160a01b038581169116148061040e57506001600160a01b03831661dead14155b1561046557610465843361046085604051806060016040528060288152602001611628602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190610ec7565b610981565b5060019392505050565b6000546001600160a01b031633146104a25760405162461bcd60e51b81526004016104999061149c565b60405180910390fd5b600f54600160a01b900460ff16156104fc5760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610499565b600e80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556105459030906105376009600a611476565b61046090633b9aca00611485565b600e60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc91906114d1565b6001600160a01b031663c9c6539630600e60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064291906114d1565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801561068f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b391906114d1565b600f80546001600160a01b039283166001600160a01b0319909116179055600e541663f305d71947306106fb816001600160a01b031660009081526001602052604090205490565b6000806107106000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610778573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061079d91906114ee565b5050600f805462ff00ff60a01b1981166201000160a01b17909155600e5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af115801561080c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610830919061151c565b50565b6000546001600160a01b0316331461085d5760405162461bcd60e51b81526004016104999061149c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108d15760405162461bcd60e51b81526004016104999061149c565b565b6000610394338484610aa5565b6000546001600160a01b0316331461090a5760405162461bcd60e51b81526004016104999061149c565b6000471161091757600080fd5b60405133904780156108fc02916000818181858888f19350505050158015610830573d6000803e3d6000fd5b3360009081526003602052604090205460ff1661095f57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166109e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610499565b6001600160a01b038216610a445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610499565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b095760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610499565b6001600160a01b038216610b6b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610499565b60008111610bcd5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610499565b60006001600160a01b0384163014801590610bf157506001600160a01b0383163014155b15610d6957600f54600160a81b900460ff16610c3657610c336064610c2d60075460085411610c2257600554610c26565b6006545b8590610f01565b90610f8a565b90505b600f546001600160a01b038581169116148015610c615750600e546001600160a01b03848116911614155b8015610c8657506001600160a01b03831660009081526003602052604090205460ff16155b8015610ca057506004546001600160a01b03848116911614155b15610cbb5760088054906000610cb58361153e565b91905055505b30600090815260016020526040902054600f54600160a81b900460ff16158015610cf25750600f546001600160a01b038581169116145b8015610d075750600f54600160b01b900460ff165b8015610d2157506004546001600160a01b03868116911614155b15610d67578015610d5b576000600d548211610d3d5781610d41565b600d545b9050610d59818511610d535784610fcc565b81610fcc565b505b47610d6547611146565b505b505b6001600160a01b038416600090815260016020526040902054610d8c9083611184565b6001600160a01b038516600090815260016020526040902055610dd1610db28383611184565b6001600160a01b038516600090815260016020526040902054906111c6565b6001600160a01b0384166000908152600160205260409020558015610e645730600090815260016020526040902054610e0a90826111c6565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5b9085815260200190565b60405180910390a35b6001600160a01b03831661dead14610ec1576001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610eaf8585611184565b60405190815260200160405180910390a35b50505050565b60008184841115610eeb5760405162461bcd60e51b81526004016104999190611253565b506000610ef88486611557565b95945050505050565b600082600003610f1357506000610398565b6000610f1f8385611485565b905082610f2c858361156a565b14610f835760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610499565b9392505050565b6000610f8383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611225565b600f805460ff60a81b1916600160a81b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106110145761101461158c565b6001600160a01b03928316602091820292909201810191909152600e54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109191906114d1565b816001815181106110a4576110a461158c565b6001600160a01b039283166020918202929092010152600e546110ca9130911684610981565b600e5460405163791ac94760e01b81526001600160a01b039091169063791ac947906111039085906000908690309042906004016115a2565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b5050600f805460ff60a81b1916905550505050565b6004546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611180573d6000803e3d6000fd5b5050565b6000610f8383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610ec7565b6000806111d38385611614565b905083811015610f835760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610499565b600081836112465760405162461bcd60e51b81526004016104999190611253565b506000610ef8848661156a565b602081526000825180602084015260005b818110156112815760208186018101516040868401015201611264565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461083057600080fd5b600080604083850312156112c957600080fd5b82356112d4816112a1565b946020939093013593505050565b6000806000606084860312156112f757600080fd5b8335611302816112a1565b92506020840135611312816112a1565b929592945050506040919091013590565b60006020828403121561133557600080fd5b8135610f83816112a1565b6000806040838503121561135357600080fd5b823561135e816112a1565b9150602083013561136e816112a1565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156113ca578085048111156113ae576113ae611379565b60018416156113bc57908102905b60019390931c928002611393565b935093915050565b6000826113e157506001610398565b816113ee57506000610398565b8160018114611404576002811461140e5761142a565b6001915050610398565b60ff84111561141f5761141f611379565b50506001821b610398565b5060208310610133831016604e8410600b841016171561144d575081810a610398565b61145a600019848461138f565b806000190482111561146e5761146e611379565b029392505050565b6000610f8360ff8416836113d2565b808202811582820484141761039857610398611379565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156114e357600080fd5b8151610f83816112a1565b60008060006060848603121561150357600080fd5b5050815160208301516040909301519094929350919050565b60006020828403121561152e57600080fd5b81518015158114610f8357600080fd5b60006001820161155057611550611379565b5060010190565b8181038181111561039857610398611379565b60008261158757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a0820187835286602084015260a0604084015280865180835260c08501915060208801925060005b818110156115f45783516001600160a01b03168352602093840193909201916001016115cd565b50506001600160a01b039590951660608401525050608001529392505050565b808201808211156103985761039861137956fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220ba540c5e1ac828e42f5da68f7b5b287a18b792abe87316fda87251cac70f10e764736f6c634300081e0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type TOKENConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TOKENConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TOKEN__factory extends ContractFactory {
  constructor(...args: TOKENConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TOKEN> {
    return super.deploy(overrides || {}) as Promise<TOKEN>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TOKEN {
    return super.attach(address) as TOKEN;
  }
  override connect(signer: Signer): TOKEN__factory {
    return super.connect(signer) as TOKEN__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TOKENInterface {
    return new utils.Interface(_abi) as TOKENInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TOKEN {
    return new Contract(address, _abi, signerOrProvider) as TOKEN;
  }
}
