/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ETHSplitter,
  ETHSplitterInterface,
} from "../../../medium/0x000002f4f8f4e4b84c58c9220266c60b0e500000.sol/ETHSplitter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ArrayMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ETHClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "splitETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060405173f0e5395708cf5e35c12cdcc89fdcabd4d47fa545906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361035e806100606000396000f3fe60806040526004361061002d5760003560e01c8063379607f5146100395780636f949ad01461004e57600080fd5b3661003457005b600080fd5b61004c61004736600461020c565b61006e565b005b34801561005a57600080fd5b5061004c610069366004610271565b6100c6565b80341461008e5760405163162908e360e11b815260040160405180910390fd5b60405181815233907f33f3a07d17ea3581c3647a566de28834fda4b148c01e213b5f980b4f54cafb5c9060200160405180910390a250565b3373f0e5395708cf5e35c12cdcc89fdcabd4d47fa545146100fa576040516330cd747160e01b815260040160405180910390fd5b82811461011a5760405163b7c1140d60e01b815260040160405180910390fd5b60005b8381101561020557828282818110610137576101376102e2565b9050602002013547101561015e57604051631e9acf1760e31b815260040160405180910390fd5b6000858583818110610172576101726102e2565b905060200201602081019061018791906102f8565b6001600160a01b03168484848181106101a2576101a26102e2565b9050602002013560405160006040518083038185875af1925050503d80600081146101e9576040519150601f19603f3d011682016040523d82523d6000602084013e6101ee565b606091505b50509050806101fc57600080fd5b5060010161011d565b5050505050565b60006020828403121561021e57600080fd5b5035919050565b60008083601f84011261023757600080fd5b50813567ffffffffffffffff81111561024f57600080fd5b6020830191508360208260051b850101111561026a57600080fd5b9250929050565b6000806000806040858703121561028757600080fd5b843567ffffffffffffffff81111561029e57600080fd5b6102aa87828801610225565b909550935050602085013567ffffffffffffffff8111156102ca57600080fd5b6102d687828801610225565b95989497509550505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561030a57600080fd5b81356001600160a01b038116811461032157600080fd5b939250505056fea26469706673582212204cf0335deac02c20055490fe3800d04cea6f28bfe5775da39ad2a31c9c42aa1964736f6c634300081e0033";

type ETHSplitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ETHSplitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ETHSplitter__factory extends ContractFactory {
  constructor(...args: ETHSplitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ETHSplitter> {
    return super.deploy(overrides || {}) as Promise<ETHSplitter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ETHSplitter {
    return super.attach(address) as ETHSplitter;
  }
  override connect(signer: Signer): ETHSplitter__factory {
    return super.connect(signer) as ETHSplitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ETHSplitterInterface {
    return new utils.Interface(_abi) as ETHSplitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ETHSplitter {
    return new Contract(address, _abi, signerOrProvider) as ETHSplitter;
  }
}
