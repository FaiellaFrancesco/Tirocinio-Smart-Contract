/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MCTRUMP,
  MCTRUMPInterface,
} from "../../../medium/0xbc1f01a2199e76f7b11c2077c7f2c1cb290e39c7.sol/MCTRUMP";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_maxTxAmount",
        type: "uint256",
      },
    ],
    name: "MaxTxAmountUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_tax",
        type: "uint256",
      },
    ],
    name: "TransferTaxUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "_buyCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_finalBuyTax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_finalSellTax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_maxTaxSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_maxTxAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_maxWalletSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_taxSwapThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_transferTax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "bots_",
        type: "address[]",
      },
    ],
    name: "addBots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "notbot",
        type: "address[]",
      },
    ],
    name: "delBots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "a",
        type: "address",
      },
    ],
    name: "isBot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "manualSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "openTrading",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newFee",
        type: "uint256",
      },
    ],
    name: "reduceFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeTransferTax",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260196006556019600755600060085560006009556005600a55600a600b55600a600c556000600d556000600e556009600a62000041919062000361565b62000051906301312d0062000379565b600f55620000626009600a62000361565b62000072906301312d0062000379565b601055620000836009600a62000361565b62000092906298968062000379565b601155620000a36009600a62000361565b620000b3906301312d0062000379565b6012556014805461ffff60a81b1916905560006015819055601655348015620000db57600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b03191673c2bef2aef4752766b7103a96860815dd2d200000179055620001516009600a62000361565b6200016190633b9aca0062000379565b3360009081526001602081905260408220929092556003906200018c6000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff199687161790553081526003909352818320805485166001908117909155600554909116835291208054909216179055620001eb3390565b6001600160a01b031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002256009600a62000361565b6200023590633b9aca0062000379565b60405190815260200160405180910390a362000393565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620002a35781600019048211156200028757620002876200024c565b808516156200029557918102915b93841c939080029062000267565b509250929050565b600082620002bc575060016200035b565b81620002cb575060006200035b565b8160018114620002e45760028114620002ef576200030f565b60019150506200035b565b60ff8411156200030357620003036200024c565b50506001821b6200035b565b5060208310610133831016604e8410600b841016171562000334575081810a6200035b565b62000340838362000262565b80600019048211156200035757620003576200024c565b0290505b92915050565b60006200037260ff841683620002ab565b9392505050565b80820281158282048414176200035b576200035b6200024c565b611cea80620003a36000396000f3fe6080604052600436106101a05760003560e01c806370a08231116100ec578063a9059cbb1161008a578063c9567bf911610064578063c9567bf914610490578063d34628cc146104a5578063dd62ed3e146104c5578063ec1f3f631461050b57600080fd5b8063a9059cbb14610444578063baeb7a7d14610464578063bf474bed1461047a57600080fd5b80637d1db4a5116100c65780637d1db4a5146103c05780638da5cb5b146103d65780638f9a55c0146103fe57806395d89b411461041457600080fd5b806370a0823114610360578063715018a614610396578063751039fc146103ab57600080fd5b806323b872dd1161015957806331c2d8471161013357806331c2d847146102dc5780633bbac579146102fc5780633ef947211461033557806351bc3c851461034b57600080fd5b806323b872dd1461028a57806327b1a8e9146102aa578063313ce567146102c057600080fd5b806306fdde03146101ac578063095ea7b3146101f45780630faee56f14610224578063109daa991461024857806317391e491461025f57806318160ddd1461027557600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b5060408051808201909152600d81526c04d43444f4e414c445452554d5609c1b60208201525b6040516101eb91906117b2565b60405180910390f35b34801561020057600080fd5b5061021461020f366004611829565b61052b565b60405190151581526020016101eb565b34801561023057600080fd5b5061023a60125481565b6040519081526020016101eb565b34801561025457600080fd5b5061025d610542565b005b34801561026b57600080fd5b5061023a600d5481565b34801561028157600080fd5b5061023a6105b2565b34801561029657600080fd5b506102146102a5366004611855565b6105d3565b3480156102b657600080fd5b5061023a600e5481565b3480156102cc57600080fd5b50604051600981526020016101eb565b3480156102e857600080fd5b5061025d6102f73660046118ac565b61063c565b34801561030857600080fd5b50610214610317366004611971565b6001600160a01b031660009081526004602052604090205460ff1690565b34801561034157600080fd5b5061023a60095481565b34801561035757600080fd5b5061025d6106c8565b34801561036c57600080fd5b5061023a61037b366004611971565b6001600160a01b031660009081526001602052604090205490565b3480156103a257600080fd5b5061025d610717565b3480156103b757600080fd5b5061025d61078b565b3480156103cc57600080fd5b5061023a600f5481565b3480156103e257600080fd5b506000546040516001600160a01b0390911681526020016101eb565b34801561040a57600080fd5b5061023a60105481565b34801561042057600080fd5b5060408051808201909152600781526604d435452554d560cc1b60208201526101de565b34801561045057600080fd5b5061021461045f366004611829565b610838565b34801561047057600080fd5b5061023a60085481565b34801561048657600080fd5b5061023a60115481565b34801561049c57600080fd5b5061025d610845565b3480156104b157600080fd5b5061025d6104c03660046118ac565b610c01565b3480156104d157600080fd5b5061023a6104e036600461198e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561051757600080fd5b5061025d6105263660046119c7565b610c89565b6000610538338484610cd0565b5060015b92915050565b6000546001600160a01b031633146105755760405162461bcd60e51b815260040161056c906119e0565b60405180910390fd5b6000600d8190556040519081527fe9b79e1a6c2dc43b4c0c6ff01ce9e3332d810e482270f464c0a21ad6c5fc6de3906020015b60405180910390a1565b60006105c06009600a611b0f565b6105ce90633b9aca00611b1e565b905090565b60006105e0848484610df4565b610632843361062d85604051806060016040528060288152602001611c8d602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190611415565b610cd0565b5060019392505050565b6000546001600160a01b031633146106665760405162461bcd60e51b815260040161056c906119e0565b60005b81518110156106c45760006004600084848151811061068a5761068a611b35565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610669565b5050565b6005546001600160a01b0316336001600160a01b0316146106e857600080fd5b306000908152600160205260409020548015610707576107078161144f565b4780156106c4576106c4816115c9565b6000546001600160a01b031633146107415760405162461bcd60e51b815260040161056c906119e0565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146107b55760405162461bcd60e51b815260040161056c906119e0565b6107c16009600a611b0f565b6107cf90633b9aca00611b1e565b600f556107de6009600a611b0f565b6107ec90633b9aca00611b1e565b6010557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61081c6009600a611b0f565b61082a90633b9aca00611b1e565b6040519081526020016105a8565b6000610538338484610df4565b6000546001600160a01b0316331461086f5760405162461bcd60e51b815260040161056c906119e0565b601454600160a01b900460ff16156108c95760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161056c565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556109129030906109046009600a611b0f565b61062d90633b9aca00611b1e565b601360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611b4b565b6001600160a01b031663c9c6539630601360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f9190611b4b565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a809190611b4b565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d7194730610ac8816001600160a01b031660009081526001602052604090205490565b600080610add6000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610b45573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b6a9190611b68565b505060145460135460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be79190611b96565b506014805462ff00ff60a01b19166201000160a01b179055565b6000546001600160a01b03163314610c2b5760405162461bcd60e51b815260040161056c906119e0565b60005b81518110156106c457600160046000848481518110610c4f57610c4f611b35565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610c2e565b6005546001600160a01b0316336001600160a01b031614610ca957600080fd5b6008548111158015610cbd57506009548111155b610cc657600080fd5b6008819055600955565b6001600160a01b038316610d325760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161056c565b6001600160a01b038216610d935760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161056c565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610e585760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161056c565b6001600160a01b038216610eba5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161056c565b60008111610f1c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161056c565b600080546001600160a01b03858116911614801590610f4957506000546001600160a01b03848116911614155b8015610f6357506005546001600160a01b03848116911614155b156112d2576001600160a01b03841660009081526004602052604090205460ff16158015610faa57506001600160a01b03831660009081526004602052604090205460ff16155b610fb357600080fd5b600e54600003610fec57610fe96064610fe3600a54600e5411610fd857600654610fdc565b6008545b8590611603565b9061168c565b90505b600e54156110115761100e6064610fe3600d548561160390919063ffffffff16565b90505b6014546001600160a01b03858116911614801561103c57506013546001600160a01b03848116911614155b801561106157506001600160a01b03831660009081526003602052604090205460ff16155b1561116657600f548211156110b85760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161056c565b601054826110db856001600160a01b031660009081526001602052604090205490565b6110e59190611bb8565b11156111335760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161056c565b61114e6064610fe3600a54600e5411610fd857600654610fdc565b600e8054919250600061116083611bcb565b91905055505b6014546001600160a01b03848116911614801561118c57506001600160a01b0384163014155b156111b9576111b66064610fe3600b54600e54116111ac57600754610fdc565b6009548590611603565b90505b30600090815260016020526040902054601454600160a81b900460ff161580156111f057506014546001600160a01b038581169116145b80156112055750601454600160b01b900460ff165b8015611212575060115481115b80156112215750600c54600e54115b156112d0576016544311156112365760006015555b6003601554106112885760405162461bcd60e51b815260206004820152601760248201527f4f6e6c7920332073656c6c732070657220626c6f636b21000000000000000000604482015260640161056c565b6112a56112a08461129b846012546116ce565b6116ce565b61144f565b4780156112b5576112b5476115c9565b601580549060006112c583611bcb565b909155505043601655505b505b801561134c57306000908152600160205260409020546112f290826116e3565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113439085815260200190565b60405180910390a35b6001600160a01b03841660009081526001602052604090205461136f9083611742565b6001600160a01b0385166000908152600160205260409020556113b46113958383611742565b6001600160a01b038516600090815260016020526040902054906116e3565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6113fe8585611742565b60405190815260200160405180910390a350505050565b600081848411156114395760405162461bcd60e51b815260040161056c91906117b2565b5060006114468486611be4565b95945050505050565b6014805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061149757611497611b35565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611b4b565b8160018151811061152757611527611b35565b6001600160a01b03928316602091820292909201015260135461154d9130911684610cd0565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac94790611586908590600090869030904290600401611bf7565b600060405180830381600087803b1580156115a057600080fd5b505af11580156115b4573d6000803e3d6000fd5b50506014805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156106c4573d6000803e3d6000fd5b6000826000036116155750600061053c565b60006116218385611b1e565b90508261162e8583611c6a565b146116855760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161056c565b9392505050565b600061168583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611784565b60008183116116dd5782611685565b50919050565b6000806116f08385611bb8565b9050838110156116855760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161056c565b600061168583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611415565b600081836117a55760405162461bcd60e51b815260040161056c91906117b2565b5060006114468486611c6a565b60006020808352835180602085015260005b818110156117e0578581018301518582016040015282016117c4565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461181657600080fd5b50565b803561182481611801565b919050565b6000806040838503121561183c57600080fd5b823561184781611801565b946020939093013593505050565b60008060006060848603121561186a57600080fd5b833561187581611801565b9250602084013561188581611801565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156118bf57600080fd5b823567ffffffffffffffff808211156118d757600080fd5b818501915085601f8301126118eb57600080fd5b8135818111156118fd576118fd611896565b8060051b604051601f19603f8301168101818110858211171561192257611922611896565b60405291825284820192508381018501918883111561194057600080fd5b938501935b828510156119655761195685611819565b84529385019392850192611945565b98975050505050505050565b60006020828403121561198357600080fd5b813561168581611801565b600080604083850312156119a157600080fd5b82356119ac81611801565b915060208301356119bc81611801565b809150509250929050565b6000602082840312156119d957600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611a66578160001904821115611a4c57611a4c611a15565b80851615611a5957918102915b93841c9390800290611a30565b509250929050565b600082611a7d5750600161053c565b81611a8a5750600061053c565b8160018114611aa05760028114611aaa57611ac6565b600191505061053c565b60ff841115611abb57611abb611a15565b50506001821b61053c565b5060208310610133831016604e8410600b8410161715611ae9575081810a61053c565b611af38383611a2b565b8060001904821115611b0757611b07611a15565b029392505050565b600061168560ff841683611a6e565b808202811582820484141761053c5761053c611a15565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b5d57600080fd5b815161168581611801565b600080600060608486031215611b7d57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611ba857600080fd5b8151801515811461168557600080fd5b8082018082111561053c5761053c611a15565b600060018201611bdd57611bdd611a15565b5060010190565b8181038181111561053c5761053c611a15565b600060a08201878352602087602085015260a0604085015281875180845260c08601915060208901935060005b81811015611c495784516001600160a01b031683529383019391830191600101611c24565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611c8757634e487b7160e01b600052601260045260246000fd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122031c7d0f07d3314264b552034789c9ee1e42a87b9ef791b1ed1b25bcd455e6a6664736f6c63430008170033";

type MCTRUMPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MCTRUMPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MCTRUMP__factory extends ContractFactory {
  constructor(...args: MCTRUMPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MCTRUMP> {
    return super.deploy(overrides || {}) as Promise<MCTRUMP>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MCTRUMP {
    return super.attach(address) as MCTRUMP;
  }
  override connect(signer: Signer): MCTRUMP__factory {
    return super.connect(signer) as MCTRUMP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MCTRUMPInterface {
    return new utils.Interface(_abi) as MCTRUMPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MCTRUMP {
    return new Contract(address, _abi, signerOrProvider) as MCTRUMP;
  }
}
