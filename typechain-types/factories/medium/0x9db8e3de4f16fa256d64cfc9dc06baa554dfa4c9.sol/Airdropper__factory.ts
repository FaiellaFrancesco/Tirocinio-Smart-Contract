/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Airdropper,
  AirdropperInterface,
} from "../../../medium/0x9db8e3de4f16fa256d64cfc9dc06baa554dfa4c9.sol/Airdropper";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "allow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600080546001600160a01b03191633179055610192806100316000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636c6f31f21461003b5780638da5cb5b14610050575b600080fd5b61004e6100493660046100fb565b61007f565b005b600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b60005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b3906044016020604051808303816000875af11580156100d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f69190610133565b505050565b6000806040838503121561010e57600080fd5b82356001600160a01b038116811461012557600080fd5b946020939093013593505050565b60006020828403121561014557600080fd5b8151801515811461015557600080fd5b939250505056fea2646970667358221220156e70bc6e28a3f8bacdb94a8b2fa114f2430513b404c1ac87e208cccef698eb64736f6c634300081a0033";

type AirdropperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AirdropperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Airdropper__factory extends ContractFactory {
  constructor(...args: AirdropperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Airdropper> {
    return super.deploy(overrides || {}) as Promise<Airdropper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Airdropper {
    return super.attach(address) as Airdropper;
  }
  override connect(signer: Signer): Airdropper__factory {
    return super.connect(signer) as Airdropper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AirdropperInterface {
    return new utils.Interface(_abi) as AirdropperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Airdropper {
    return new Contract(address, _abi, signerOrProvider) as Airdropper;
  }
}
