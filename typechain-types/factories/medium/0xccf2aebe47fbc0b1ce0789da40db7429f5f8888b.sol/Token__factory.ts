/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Token,
  TokenInterface,
} from "../../../medium/0xccf2aebe47fbc0b1ce0789da40db7429f5f8888b.sol/Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_assist_bnTOKN",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "_oijboijoiTOKN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "_setTax_lknblTOKN",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "_vnbbvlkTOKN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "enableTOKNTrading",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600a6001819055600281815560146003556000600481905560058290556006919091556007819055815461ffff60a81b19168255600b819055600c5560649061004f90600990610341565b61005d90633b9aca00610357565b610067919061036e565b60115567d02ab486cedc0000601255600a601355600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601080546001600160a01b0319163317905560646100dc6009600a610341565b6100ea90633b9aca00610357565b6100f5906002610357565b6100ff919061036e565b336000908152600d6020526040902055606461011d6009600a610341565b61012b90633b9aca00610357565b610136906062610357565b610140919061036e565b306000908152600d6020908152604080832093909355600f90528181208054600160ff1991821681179092556010546001600160a01b0316835292909120805490921617905561018d3390565b6001600160a01b03166000600080516020611d7c83398151915260646101b56009600a610341565b6101c390633b9aca00610357565b6101ce906002610357565b6101d8919061036e565b60405190815260200160405180910390a3306000600080516020611d7c83398151915260646102096009600a610341565b61021790633b9aca00610357565b610222906062610357565b61022c919061036e565b60405190815260200160405180910390a3610390565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156102935780850481111561027757610277610242565b600184161561028557908102905b60019390931c92800261025c565b935093915050565b6000826102aa5750600161033b565b816102b75750600061033b565b81600181146102cd57600281146102d7576102f3565b600191505061033b565b60ff8411156102e8576102e8610242565b50506001821b61033b565b5060208310610133831016604e8410600b8410161715610316575081810a61033b565b6103236000198484610258565b806000190482111561033757610337610242565b0290505b92915050565b600061035060ff84168361029b565b9392505050565b808202811582820484141761033b5761033b610242565b60008261038b57634e487b7160e01b600052601260045260246000fd5b500490565b6119dd8061039f6000396000f3fe6080604052600436106101025760003560e01c80638da5cb5b11610095578063c888c7c611610064578063c888c7c61461029b578063d02c9383146102b1578063d8fbd06f146102c6578063dd62ed3e146102dc578063f5f674311461032257600080fd5b80638da5cb5b1461023e57806395d89b411461010e578063a9059cbb14610266578063bd6c5bae1461028657600080fd5b8063313ce567116100d1578063313ce567146101c057806370a08231146101dc578063715018a614610212578063751039fc1461022957600080fd5b806306fdde031461010e578063095ea7b31461014d57806318160ddd1461017d57806323b872dd146101a057600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b506040805180820182526007815266444d612d78414960c81b602082015290516101449190611498565b60405180910390f35b34801561015957600080fd5b5061016d6101683660046114fb565b610342565b6040519015158152602001610144565b34801561018957600080fd5b50610192610359565b604051908152602001610144565b3480156101ac57600080fd5b5061016d6101bb366004611527565b61037a565b3480156101cc57600080fd5b5060405160098152602001610144565b3480156101e857600080fd5b506101926101f7366004611568565b6001600160a01b03166000908152600d602052604090205490565b34801561021e57600080fd5b506102276103f2565b005b34801561023557600080fd5b5061022761046f565b34801561024a57600080fd5b506000546040516001600160a01b039091168152602001610144565b34801561027257600080fd5b5061016d6102813660046114fb565b61049b565b34801561029257600080fd5b506102276104a8565b3480156102a757600080fd5b5061019260125481565b3480156102bd57600080fd5b5061022761050e565b3480156102d257600080fd5b5061019260115481565b3480156102e857600080fd5b506101926102f7366004611585565b6001600160a01b039182166000908152600e6020908152604080832093909416825291909152205490565b34801561032e57600080fd5b5061022761033d366004611568565b6108c6565b600061034f33848461091c565b5060015b92915050565b60006103676009600a6116bb565b61037590633b9aca006116ca565b905090565b6000610387848484610a40565b6103918484610f1d565b156103e8576103e884336103e385604051806060016040528060288152602001611980602891396001600160a01b038a166000908152600e602090815260408083203384529091529020549190610f82565b61091c565b5060019392505050565b6000546001600160a01b031633146104255760405162461bcd60e51b815260040161041c906116e1565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146104995760405162461bcd60e51b815260040161041c906116e1565b565b600061034f338484610a40565b6000546001600160a01b031633146104d25760405162461bcd60e51b815260040161041c906116e1565b600047116104df57600080fd5b60405133904780156108fc02916000818181858888f1935050505015801561050b573d6000803e3d6000fd5b50565b6000546001600160a01b031633146105385760405162461bcd60e51b815260040161041c906116e1565b600a54600160a01b900460ff16156105925760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161041c565b600880546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556105db9030906105cd6009600a6116bb565b6103e390633b9aca006116ca565b600860009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190611716565b6001600160a01b031663c9c6539630600860009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190611716565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190611716565b600a80546001600160a01b039283166001600160a01b03199091161790556008541663f305d7194730610791816001600160a01b03166000908152600d602052604090205490565b6000806107a66000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561080e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108339190611733565b5050600a805462ff00ff60a01b1981166201000160a01b1790915560085460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af11580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b9190611761565b336000908152600f602052604090205460ff166108e257600080fd5b601080546001600160a01b039092166001600160a01b0319909216821790556000908152600f60205260409020805460ff19166001179055565b6001600160a01b03831661097e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161041c565b6001600160a01b0382166109df5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161041c565b6001600160a01b038381166000818152600e602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610aa45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161041c565b6001600160a01b038216610b065760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161041c565b60008111610b685760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161041c565b600080546001600160a01b03858116911614801590610b9557506000546001600160a01b03848116911614155b8015610baa57506001600160a01b0384163014155b8015610bbf57506001600160a01b0383163014155b15610dbf57600a54600160a81b900460ff16610c0457610c016064610bfb60055460075411610bf057600354610bf4565b6004545b8590610fbc565b90611045565b90505b600a546001600160a01b038581169116148015610c2f57506008546001600160a01b03848116911614155b8015610c5457506001600160a01b0383166000908152600f602052604090205460ff16155b8015610c6e57506010546001600160a01b03848116911614155b15610c895760078054906000610c8383611783565b91905055505b306000908152600d602052604081205490546001600160a01b03868116911614801590610cc05750600a54600160a81b900460ff16155b8015610cd95750600a546001600160a01b038581169116145b8015610cf357506010546001600160a01b03868116911614155b8015610d085750600a54600160b01b900460ff165b8015610d175750600654600754115b15610dbd57600c54431115610d2c576000600b555b610d3583611087565b600b54610d42919061179c565b600b8190556012541015610d895760405162461bcd60e51b815260206004820152600e60248201526d13585e081cddd85c081b1a5b5a5d60921b604482015260640161041c565b601154811115610dad57610dad8360115411610da7576011546111ff565b836111ff565b47610db74761138b565b5043600c555b505b6001600160a01b0384166000908152600d6020526040902054610de290836113c9565b6001600160a01b0385166000908152600d6020526040902055610e27610e0883836113c9565b6001600160a01b0385166000908152600d60205260409020549061140b565b6001600160a01b0384166000908152600d60205260409020558015610eba57306000908152600d6020526040902054610e60908261140b565b306000818152600d6020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610eb19085815260200190565b60405180910390a35b6001600160a01b03831661dead14610f17576001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610f0585856113c9565b60405190815260200160405180910390a35b50505050565b336000908152600f602052604081205460ff1615610f4f5750336000908152600f602052604090205460ff1615610353565b600a546001600160a01b0384811691161480610f7657506001600160a01b03821661dead14155b61034f57506000610353565b60008184841115610fa65760405162461bcd60e51b815260040161041c9190611498565b506000610fb384866117af565b95945050505050565b600082600003610fce57506000610353565b6000610fda83856116ca565b905082610fe785836117c2565b1461103e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161041c565b9392505050565b600061103e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061146a565b6040805160028082526060820183526000928392919060208301908036833701905050905030816000815181106110c0576110c06117fa565b6001600160a01b03928316602091820292909201810191909152600854604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d9190611716565b81600181518110611150576111506117fa565b6001600160a01b03928316602091820292909201015260085460405163d06ca61f60e01b8152600092919091169063d06ca61f906111949087908690600401611855565b600060405180830381865afa1580156111b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d99190810190611876565b9050806001815181106111ee576111ee6117fa565b602002602001015192505050919050565b600a805460ff60a81b1916600160a81b1790556040805160028082526060820183526000926020830190803683370190505090503081600081518110611247576112476117fa565b6001600160a01b03928316602091820292909201810191909152600854604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c49190611716565b816001815181106112d7576112d76117fa565b6001600160a01b0392831660209182029290920101526008546112fd913091168461091c565b600854600980546001600160a01b0319166001600160a01b03909216918217905560405163791ac94760e01b815263791ac94790611348908590600090869030904290600401611943565b600060405180830381600087803b15801561136257600080fd5b505af1158015611376573d6000803e3d6000fd5b5050600a805460ff60a81b1916905550505050565b6010546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156113c5573d6000803e3d6000fd5b5050565b600061103e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f82565b600080611418838561179c565b90508381101561103e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161041c565b6000818361148b5760405162461bcd60e51b815260040161041c9190611498565b506000610fb384866117c2565b602081526000825180602084015260005b818110156114c657602081860181015160408684010152016114a9565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461050b57600080fd5b6000806040838503121561150e57600080fd5b8235611519816114e6565b946020939093013593505050565b60008060006060848603121561153c57600080fd5b8335611547816114e6565b92506020840135611557816114e6565b929592945050506040919091013590565b60006020828403121561157a57600080fd5b813561103e816114e6565b6000806040838503121561159857600080fd5b82356115a3816114e6565b915060208301356115b3816114e6565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561160f578085048111156115f3576115f36115be565b600184161561160157908102905b60019390931c9280026115d8565b935093915050565b60008261162657506001610353565b8161163357506000610353565b816001811461164957600281146116535761166f565b6001915050610353565b60ff841115611664576116646115be565b50506001821b610353565b5060208310610133831016604e8410600b8410161715611692575081810a610353565b61169f60001984846115d4565b80600019048211156116b3576116b36115be565b029392505050565b600061103e60ff841683611617565b8082028115828204841417610353576103536115be565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561172857600080fd5b815161103e816114e6565b60008060006060848603121561174857600080fd5b5050815160208301516040909301519094929350919050565b60006020828403121561177357600080fd5b8151801515811461103e57600080fd5b600060018201611795576117956115be565b5060010190565b80820180821115610353576103536115be565b81810381811115610353576103536115be565b6000826117df57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020840193506020830160005b8281101561184b5781516001600160a01b0316865260209586019590910190600101611824565b5093949350505050565b82815260406020820152600061186e6040830184611810565b949350505050565b60006020828403121561188857600080fd5b815167ffffffffffffffff81111561189f57600080fd5b8201601f810184136118b057600080fd5b805167ffffffffffffffff8111156118ca576118ca6117e4565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156118f7576118f76117e4565b60405291825260208184018101929081018784111561191557600080fd5b6020850194505b838510156119385784518082526020958601959093500161191c565b509695505050505050565b85815284602082015260a06040820152600061196260a0830186611810565b6001600160a01b039490941660608301525060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220c5c041691f74602f66b0f61069dd777d889002abf470dfd27fb9ecb343491b6e64736f6c634300081e0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Token> {
    return super.deploy(overrides || {}) as Promise<Token>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Token {
    return super.attach(address) as Token;
  }
  override connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
