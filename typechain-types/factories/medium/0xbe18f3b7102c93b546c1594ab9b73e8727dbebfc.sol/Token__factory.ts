/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Token,
  TokenInterface,
} from "../../../medium/0xbe18f3b7102c93b546c1594ab9b73e8727dbebfc.sol/Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_maxTaxSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "_setTax_lknblTOKN",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "_swapThres",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "enableTOKNTrading",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "removeLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rescueETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600a6005556000600655600060075560006008556000600a556000600b556009600a610030919061031f565b61003e90633b9aca00610335565b600c556000600d819055600f805461ffff60a81b191690556010819055601181905580546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b0319163317815530600090815260036020526040808220805460ff19908116600190811790925593546001600160a01b031683529120805490921617905560646100f66009600a61031f565b61010490633b9aca00610335565b61010f906002610335565b610119919061034c565b3360009081526001602052604090205560646101376009600a61031f565b61014590633b9aca00610335565b610150906062610335565b61015a919061034c565b30600090815260016020526040902055336001600160a01b03166000600080516020611d3d83398151915260646101936009600a61031f565b6101a190633b9aca00610335565b6101ac906002610335565b6101b6919061034c565b60405190815260200160405180910390a3306000600080516020611d3d83398151915260646101e76009600a61031f565b6101f590633b9aca00610335565b610200906062610335565b61020a919061034c565b60405190815260200160405180910390a361036e565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156102715780850481111561025557610255610220565b600184161561026357908102905b60019390931c92800261023a565b935093915050565b60008261028857506001610319565b8161029557506000610319565b81600181146102ab57600281146102b5576102d1565b6001915050610319565b60ff8411156102c6576102c6610220565b50506001821b610319565b5060208310610133831016604e8410600b84101617156102f4575081810a610319565b6103016000198484610236565b806000190482111561031557610315610220565b0290505b92915050565b600061032e60ff841683610279565b9392505050565b808202811582820484141761031957610319610220565b60008261036957634e487b7160e01b600052601260045260246000fd5b500490565b6119c08061037d6000396000f3fe6080604052600436106101025760003560e01c806370a082311161009557806395d89b411161006457806395d89b41146102af578063a9059cbb146102e0578063d02c938314610300578063dd62ed3e14610315578063f5f674311461035b57600080fd5b806370a0823114610227578063715018a61461025d578063751039fc146102725780638da5cb5b1461028757600080fd5b806320800a00116100d157806320800a00146101be57806323b872dd146101d5578063313ce567146101f55780636482c89a1461021157600080fd5b806306fdde031461010e578063095ea7b3146101555780630faee56f1461018557806318160ddd146101a957600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5060408051808201909152600c81526b4e455720555341204349545960a01b60208201525b60405161014c919061147b565b60405180910390f35b34801561016157600080fd5b506101756101703660046114de565b61037b565b604051901515815260200161014c565b34801561019157600080fd5b5061019b600c5481565b60405190815260200161014c565b3480156101b557600080fd5b5061019b610392565b3480156101ca57600080fd5b506101d36103b3565b005b3480156101e157600080fd5b506101756101f036600461150a565b610422565b34801561020157600080fd5b506040516009815260200161014c565b34801561021d57600080fd5b5061019b600d5481565b34801561023357600080fd5b5061019b61024236600461154b565b6001600160a01b031660009081526001602052604090205490565b34801561026957600080fd5b506101d36104cd565b34801561027e57600080fd5b506101d3610541565b34801561029357600080fd5b506000546040516001600160a01b03909116815260200161014c565b3480156102bb57600080fd5b50604080518082019091526008815267535441524241534560c01b602082015261013f565b3480156102ec57600080fd5b506101756102fb3660046114de565b61056d565b34801561030c57600080fd5b506101d361057a565b34801561032157600080fd5b5061019b610330366004611568565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561036757600080fd5b506101d361037636600461154b565b610932565b6000610388338484610970565b5060015b92915050565b60006103a06009600a61169e565b6103ae90633b9aca006116ad565b905090565b6000546001600160a01b031633146103e65760405162461bcd60e51b81526004016103dd906116c4565b60405180910390fd5b600047116103f357600080fd5b60405133904780156108fc02916000818181858888f1935050505015801561041f573d6000803e3d6000fd5b50565b600061042f848484610a94565b6004546001600160a01b0316331480159061046c5750600f546001600160a01b038581169116148061046c57506001600160a01b03831661dead14155b156104c3576104c384336104be85604051806060016040528060288152602001611963602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190610f61565b610970565b5060019392505050565b6000546001600160a01b031633146104f75760405162461bcd60e51b81526004016103dd906116c4565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461056b5760405162461bcd60e51b81526004016103dd906116c4565b565b6000610388338484610a94565b6000546001600160a01b031633146105a45760405162461bcd60e51b81526004016103dd906116c4565b600f54600160a01b900460ff16156105fe5760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016103dd565b600e80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106479030906106396009600a61169e565b6104be90633b9aca006116ad565b600e60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be91906116f9565b6001600160a01b031663c9c6539630600e60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906116f9565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906116f9565b600f80546001600160a01b039283166001600160a01b0319909116179055600e541663f305d71947306107fd816001600160a01b031660009081526001602052604090205490565b6000806108126000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561087a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061089f9190611716565b5050600f805462ff00ff60a01b1981166201000160a01b17909155600e5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af115801561090e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f9190611744565b3360009081526003602052604090205460ff1661094e57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166109d25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103dd565b6001600160a01b038216610a335760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103dd565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610af85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103dd565b6001600160a01b038216610b5a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103dd565b60008111610bbc5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016103dd565b60006001600160a01b0384163014801590610be057506001600160a01b0383163014155b15610e0357600f54600160a81b900460ff16610c2557610c226064610c1c60075460085411610c1157600554610c15565b6006545b8590610f9b565b90611024565b90505b600f546001600160a01b038581169116148015610c505750600e546001600160a01b03848116911614155b8015610c7557506001600160a01b03831660009081526003602052604090205460ff16155b8015610c8f57506004546001600160a01b03848116911614155b15610cd4574360095414610ca7576000600a55436009555b81600a6000828254610cb99190611766565b909155505060088054906000610cce83611779565b91905055505b600f546001600160a01b038481169116148015610cfa57506001600160a01b0384163014155b15610d5557610d07611066565b600a541080610d1857504360095414155b610d555760405162461bcd60e51b815260206004820152600e60248201526d13585e0814ddd85c08131a5b5a5d60921b60448201526064016103dd565b30600090815260016020526040902054600f54600160a81b900460ff16158015610d8c5750600f546001600160a01b038581169116145b8015610da15750600f54600160b01b900460ff165b8015610dbb57506004546001600160a01b03868116911614155b15610e01578015610df5576000600c548211610dd75781610ddb565b600c545b9050610df3818511610ded57846111f4565b816111f4565b505b47610dff4761136e565b505b505b6001600160a01b038416600090815260016020526040902054610e2690836113ac565b6001600160a01b038516600090815260016020526040902055610e6b610e4c83836113ac565b6001600160a01b038516600090815260016020526040902054906113ee565b6001600160a01b0384166000908152600160205260409020558015610efe5730600090815260016020526040902054610ea490826113ee565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ef59085815260200190565b60405180910390a35b6001600160a01b03831661dead14610f5b576001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610f4985856113ac565b60405190815260200160405180910390a35b50505050565b60008184841115610f855760405162461bcd60e51b81526004016103dd919061147b565b506000610f928486611792565b95945050505050565b600082600003610fad5750600061038c565b6000610fb983856116ad565b905082610fc685836117a5565b1461101d5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016103dd565b9392505050565b600061101d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061144d565b604080516002808252606082018352600092839291906020830190803683375050600e54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f891906116f9565b8160008151811061110b5761110b6117dd565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061113f5761113f6117dd565b6001600160a01b039283166020918202929092010152600e5460405163d06ca61f60e01b8152600092919091169063d06ca61f9061118b9067d02ab486cedc0000908690600401611838565b600060405180830381865afa1580156111a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d09190810190611859565b9050806001815181106111e5576111e56117dd565b60200260200101519250505090565b600f805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061123c5761123c6117dd565b6001600160a01b03928316602091820292909201810191909152600e54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b991906116f9565b816001815181106112cc576112cc6117dd565b6001600160a01b039283166020918202929092010152600e546112f29130911684610970565b600e5460405163791ac94760e01b81526001600160a01b039091169063791ac9479061132b908590600090869030904290600401611926565b600060405180830381600087803b15801561134557600080fd5b505af1158015611359573d6000803e3d6000fd5b5050600f805460ff60a81b1916905550505050565b6004546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156113a8573d6000803e3d6000fd5b5050565b600061101d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f61565b6000806113fb8385611766565b90508381101561101d5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016103dd565b6000818361146e5760405162461bcd60e51b81526004016103dd919061147b565b506000610f9284866117a5565b602081526000825180602084015260005b818110156114a9576020818601810151604086840101520161148c565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b038116811461041f57600080fd5b600080604083850312156114f157600080fd5b82356114fc816114c9565b946020939093013593505050565b60008060006060848603121561151f57600080fd5b833561152a816114c9565b9250602084013561153a816114c9565b929592945050506040919091013590565b60006020828403121561155d57600080fd5b813561101d816114c9565b6000806040838503121561157b57600080fd5b8235611586816114c9565b91506020830135611596816114c9565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156115f2578085048111156115d6576115d66115a1565b60018416156115e457908102905b60019390931c9280026115bb565b935093915050565b6000826116095750600161038c565b816116165750600061038c565b816001811461162c576002811461163657611652565b600191505061038c565b60ff841115611647576116476115a1565b50506001821b61038c565b5060208310610133831016604e8410600b8410161715611675575081810a61038c565b61168260001984846115b7565b8060001904821115611696576116966115a1565b029392505050565b600061101d60ff8416836115fa565b808202811582820484141761038c5761038c6115a1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561170b57600080fd5b815161101d816114c9565b60008060006060848603121561172b57600080fd5b5050815160208301516040909301519094929350919050565b60006020828403121561175657600080fd5b8151801515811461101d57600080fd5b8082018082111561038c5761038c6115a1565b60006001820161178b5761178b6115a1565b5060010190565b8181038181111561038c5761038c6115a1565b6000826117c257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020840193506020830160005b8281101561182e5781516001600160a01b0316865260209586019590910190600101611807565b5093949350505050565b82815260406020820152600061185160408301846117f3565b949350505050565b60006020828403121561186b57600080fd5b815167ffffffffffffffff81111561188257600080fd5b8201601f8101841361189357600080fd5b805167ffffffffffffffff8111156118ad576118ad6117c7565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156118da576118da6117c7565b6040529182526020818401810192908101878411156118f857600080fd5b6020850194505b8385101561191b578451808252602095860195909350016118ff565b509695505050505050565b85815284602082015260a06040820152600061194560a08301866117f3565b6001600160a01b039490941660608301525060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122093af6d69adf3412bdb728bcd6c45b05da7946b1d4db0a8c42eadfd2a997c57de64736f6c634300081e0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Token> {
    return super.deploy(overrides || {}) as Promise<Token>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Token {
    return super.attach(address) as Token;
  }
  override connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
