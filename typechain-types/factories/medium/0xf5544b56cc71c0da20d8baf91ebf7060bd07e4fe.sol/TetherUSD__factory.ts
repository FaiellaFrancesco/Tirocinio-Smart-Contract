/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TetherUSD,
  TetherUSDInterface,
} from "../../../medium/0xf5544b56cc71c0da20d8baf91ebf7060bd07e4fe.sol/TetherUSD";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600a60809081526915195d1a195c881554d160b21b60a0526000906100299082610165565b506040805180820190915260048152631554d11560e21b60208201526001906100529082610165565b506002805460ff1916600617905534801561006c57600080fd5b50655af3107a4000600381905533600081815260046020908152604080832085905551938452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610223565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100f057607f821691505b60208210810361011057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561016057806000526020600020601f840160051c8101602085101561013d5750805b601f840160051c820191505b8181101561015d5760008155600101610149565b50505b505050565b81516001600160401b0381111561017e5761017e6100c6565b6101928161018c84546100dc565b84610116565b6020601f8211600181146101c657600083156101ae5750848201515b600019600385901b1c1916600184901b17845561015d565b600084815260208120601f198516915b828110156101f657878501518255602094850194600190920191016101d6565b50848210156102145786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6106fd806102326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461010357806370a082311461012257806395d89b4114610142578063a9059cbb1461014a578063dd62ed3e1461015d57600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100f0575b600080fd5b6100a0610188565b6040516100ad919061052b565b60405180910390f35b6100c96100c4366004610595565b610216565b60405190151581526020016100ad565b6100e260035481565b6040519081526020016100ad565b6100c96100fe3660046105bf565b610283565b6002546101109060ff1681565b60405160ff90911681526020016100ad565b6100e26101303660046105fc565b60046020526000908152604090205481565b6100a061043a565b6100c9610158366004610595565b610447565b6100e261016b36600461061e565b600560209081526000928352604080842090915290825290205481565b6000805461019590610651565b80601f01602080910402602001604051908101604052809291908181526020018280546101c190610651565b801561020e5780601f106101e35761010080835404028352916020019161020e565b820191906000526020600020905b8154815290600101906020018083116101f157829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102719086815260200190565b60405180910390a35060015b92915050565b6001600160a01b0383166000908152600460205260408120548211156102e75760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064015b60405180910390fd5b6001600160a01b038416600090815260056020908152604080832033845290915290205482111561034f5760405162461bcd60e51b8152602060048201526012602482015271105b1b1bddd85b98d948195e18d95959195960721b60448201526064016102de565b6001600160a01b038416600090815260046020526040812080548492906103779084906106a1565b90915550506001600160a01b0384166000908152600560209081526040808320338452909152812080548492906103af9084906106a1565b90915550506001600160a01b038316600090815260046020526040812080548492906103dc9084906106b4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161042891815260200190565b60405180910390a35060019392505050565b6001805461019590610651565b3360009081526004602052604081205482111561049d5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016102de565b33600090815260046020526040812080548492906104bc9084906106a1565b90915550506001600160a01b038316600090815260046020526040812080548492906104e99084906106b4565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610271565b602081526000825180602084015260005b81811015610559576020818601810151604086840101520161053c565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461059057600080fd5b919050565b600080604083850312156105a857600080fd5b6105b183610579565b946020939093013593505050565b6000806000606084860312156105d457600080fd5b6105dd84610579565b92506105eb60208501610579565b929592945050506040919091013590565b60006020828403121561060e57600080fd5b61061782610579565b9392505050565b6000806040838503121561063157600080fd5b61063a83610579565b915061064860208401610579565b90509250929050565b600181811c9082168061066557607f821691505b60208210810361068557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561027d5761027d61068b565b8082018082111561027d5761027d61068b56fea26469706673582212206435e078792beb6dc70ae158169f0132a6094a28f493634ffc33068270bc57bb64736f6c634300081e0033";

type TetherUSDConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TetherUSDConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TetherUSD__factory extends ContractFactory {
  constructor(...args: TetherUSDConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TetherUSD> {
    return super.deploy(overrides || {}) as Promise<TetherUSD>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TetherUSD {
    return super.attach(address) as TetherUSD;
  }
  override connect(signer: Signer): TetherUSD__factory {
    return super.connect(signer) as TetherUSD__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TetherUSDInterface {
    return new utils.Interface(_abi) as TetherUSDInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TetherUSD {
    return new Contract(address, _abi, signerOrProvider) as TetherUSD;
  }
}
