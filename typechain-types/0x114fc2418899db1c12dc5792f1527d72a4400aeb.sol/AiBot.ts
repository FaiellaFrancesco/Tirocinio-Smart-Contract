/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AiBotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Claim"
      | "ClaimReward"
      | "ClaimRewards"
      | "Connect"
      | "Execute"
      | "Fee"
      | "Multicall"
      | "SecurityUpdate"
      | "Swap"
      | "allowance"
      | "approve"
      | "changePercentage"
      | "getBalance"
      | "getFee"
      | "getOwner"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Approval" | "Ownership" | "Percentage"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "Claim",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimReward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimRewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "Connect",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "Execute",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "Fee", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "Multicall",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SecurityUpdate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "Swap",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "Claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ClaimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Connect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SecurityUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipEvent {
  export type InputTuple = [
    previousOwner: AddressLike,
    currentOwner: AddressLike
  ];
  export type OutputTuple = [previousOwner: string, currentOwner: string];
  export interface OutputObject {
    previousOwner: string;
    currentOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PercentageEvent {
  export type InputTuple = [
    previousPercentage: BigNumberish,
    currentPercentage: BigNumberish
  ];
  export type OutputTuple = [
    previousPercentage: bigint,
    currentPercentage: bigint
  ];
  export interface OutputObject {
    previousPercentage: bigint;
    currentPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AiBot extends BaseContract {
  connect(runner?: ContractRunner | null): AiBot;
  waitForDeployment(): Promise<this>;

  interface: AiBotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Claim: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  ClaimReward: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  ClaimRewards: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  Connect: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  Execute: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  Fee: TypedContractMethod<[receiver: AddressLike], [void], "nonpayable">;

  Multicall: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  SecurityUpdate: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  Swap: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  changePercentage: TypedContractMethod<
    [newPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getFee: TypedContractMethod<[], [bigint], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Claim"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ClaimReward"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ClaimRewards"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Connect"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Execute"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Fee"
  ): TypedContractMethod<[receiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "Multicall"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "SecurityUpdate"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Swap"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePercentage"
  ): TypedContractMethod<[newPercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Ownership"
  ): TypedContractEvent<
    OwnershipEvent.InputTuple,
    OwnershipEvent.OutputTuple,
    OwnershipEvent.OutputObject
  >;
  getEvent(
    key: "Percentage"
  ): TypedContractEvent<
    PercentageEvent.InputTuple,
    PercentageEvent.OutputTuple,
    PercentageEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Ownership(address,address)": TypedContractEvent<
      OwnershipEvent.InputTuple,
      OwnershipEvent.OutputTuple,
      OwnershipEvent.OutputObject
    >;
    Ownership: TypedContractEvent<
      OwnershipEvent.InputTuple,
      OwnershipEvent.OutputTuple,
      OwnershipEvent.OutputObject
    >;

    "Percentage(uint8,uint8)": TypedContractEvent<
      PercentageEvent.InputTuple,
      PercentageEvent.OutputTuple,
      PercentageEvent.OutputObject
    >;
    Percentage: TypedContractEvent<
      PercentageEvent.InputTuple,
      PercentageEvent.OutputTuple,
      PercentageEvent.OutputObject
    >;
  };
}
