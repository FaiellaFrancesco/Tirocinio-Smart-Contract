/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BatchPresaleInterface extends utils.Interface {
  functions: {
    "addStage(uint256,uint256,uint256,uint256)": FunctionFragment;
    "buyToken(uint256)": FunctionFragment;
    "convertEthToUsd(uint256)": FunctionFragment;
    "flipPresaleActive()": FunctionFragment;
    "getCurrentStageIdActive()": FunctionFragment;
    "getEthToUsdPrice()": FunctionFragment;
    "maxStage()": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentAddress()": FunctionFragment;
    "presaleActive()": FunctionFragment;
    "presaleTokenAmount()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxStage(uint256)": FunctionFragment;
    "setPaymentAddress(address)": FunctionFragment;
    "setPresaleTokenAmount(uint256)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setStage(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "setTotalSold(uint256)": FunctionFragment;
    "stages(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenMetadata()": FunctionFragment;
    "totalSold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
    "withdrawTokens(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addStage"
      | "buyToken"
      | "convertEthToUsd"
      | "flipPresaleActive"
      | "getCurrentStageIdActive"
      | "getEthToUsdPrice"
      | "maxStage"
      | "owner"
      | "paymentAddress"
      | "presaleActive"
      | "presaleTokenAmount"
      | "priceFeed"
      | "renounceOwnership"
      | "setMaxStage"
      | "setPaymentAddress"
      | "setPresaleTokenAmount"
      | "setPriceFeed"
      | "setStage"
      | "setToken"
      | "setTotalSold"
      | "stages"
      | "token"
      | "tokenMetadata"
      | "totalSold"
      | "transferOwnership"
      | "withdrawFunds"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertEthToUsd",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "flipPresaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStageIdActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToUsdPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxStage", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresaleTokenAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertEthToUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flipPresaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStageIdActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToUsdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPresaleTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BatchPresale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchPresaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStage(
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertEthToUsd(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flipPresaleActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentStageIdActive(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEthToUsdPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxStage(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentAddress(overrides?: CallOverrides): Promise<[string]>;

    presaleActive(overrides?: CallOverrides): Promise<[boolean]>;

    presaleTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxStage(
      _maxStage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentAddress(
      _paymentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPresaleTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStage(
      _id: PromiseOrValue<BigNumberish>,
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotalSold(
      _totalSold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        bonus: BigNumber;
        price: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenMetadata(overrides?: CallOverrides): Promise<[string]>;

    totalSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addStage(
    _bonus: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyToken(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertEthToUsd(
    ethAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flipPresaleActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentStageIdActive(overrides?: CallOverrides): Promise<BigNumber>;

  getEthToUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

  maxStage(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentAddress(overrides?: CallOverrides): Promise<string>;

  presaleActive(overrides?: CallOverrides): Promise<boolean>;

  presaleTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxStage(
    _maxStage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentAddress(
    _paymentAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPresaleTokenAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStage(
    _id: PromiseOrValue<BigNumberish>,
    _bonus: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotalSold(
    _totalSold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stages(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      bonus: BigNumber;
      price: BigNumber;
      start: BigNumber;
      end: BigNumber;
    }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  tokenMetadata(overrides?: CallOverrides): Promise<string>;

  totalSold(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStage(
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    convertEthToUsd(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flipPresaleActive(overrides?: CallOverrides): Promise<void>;

    getCurrentStageIdActive(overrides?: CallOverrides): Promise<BigNumber>;

    getEthToUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxStage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentAddress(overrides?: CallOverrides): Promise<string>;

    presaleActive(overrides?: CallOverrides): Promise<boolean>;

    presaleTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxStage(
      _maxStage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentAddress(
      _paymentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPresaleTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStage(
      _id: PromiseOrValue<BigNumberish>,
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalSold(
      _totalSold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        bonus: BigNumber;
        price: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    tokenMetadata(overrides?: CallOverrides): Promise<string>;

    totalSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addStage(
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertEthToUsd(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flipPresaleActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentStageIdActive(overrides?: CallOverrides): Promise<BigNumber>;

    getEthToUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxStage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentAddress(overrides?: CallOverrides): Promise<BigNumber>;

    presaleActive(overrides?: CallOverrides): Promise<BigNumber>;

    presaleTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxStage(
      _maxStage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentAddress(
      _paymentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPresaleTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStage(
      _id: PromiseOrValue<BigNumberish>,
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotalSold(
      _totalSold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    totalSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStage(
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertEthToUsd(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flipPresaleActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentStageIdActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthToUsdPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleTokenAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStage(
      _maxStage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentAddress(
      _paymentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPresaleTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStage(
      _id: PromiseOrValue<BigNumberish>,
      _bonus: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotalSold(
      _totalSold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
