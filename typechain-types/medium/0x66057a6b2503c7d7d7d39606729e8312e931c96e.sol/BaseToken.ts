/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BaseTokenInterface extends utils.Interface {
  functions: {
    "A1(address,address)": FunctionFragment;
    "B1(address)": FunctionFragment;
    "D1()": FunctionFragment;
    "N1()": FunctionFragment;
    "S1()": FunctionFragment;
    "T1()": FunctionFragment;
    "T2(address,uint256)": FunctionFragment;
    "T3(address,uint256)": FunctionFragment;
    "T4(address,address,uint256)": FunctionFragment;
    "decreaseA(address,uint256)": FunctionFragment;
    "increaseA(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "A1"
      | "B1"
      | "D1"
      | "N1"
      | "S1"
      | "T1"
      | "T2"
      | "T3"
      | "T4"
      | "decreaseA"
      | "increaseA"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "A1",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "B1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "D1", values?: undefined): string;
  encodeFunctionData(functionFragment: "N1", values?: undefined): string;
  encodeFunctionData(functionFragment: "S1", values?: undefined): string;
  encodeFunctionData(functionFragment: "T1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "T2",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "T3",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "T4",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseA",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseA",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "A1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "B1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "D1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "N1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "S1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decreaseA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseA", data: BytesLike): Result;

  events: {
    "E1(address,address,uint256)": EventFragment;
    "E2(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "E1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "E2"): EventFragment;
}

export interface E1EventObject {
  A: string;
  B: string;
  C: BigNumber;
}
export type E1Event = TypedEvent<[string, string, BigNumber], E1EventObject>;

export type E1EventFilter = TypedEventFilter<E1Event>;

export interface E2EventObject {
  D: string;
  E: string;
  F: BigNumber;
}
export type E2Event = TypedEvent<[string, string, BigNumber], E2EventObject>;

export type E2EventFilter = TypedEventFilter<E2Event>;

export interface BaseToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    A1(
      ad: PromiseOrValue<string>,
      ae: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    B1(
      Z: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    D1(overrides?: CallOverrides): Promise<[number]>;

    N1(overrides?: CallOverrides): Promise<[string]>;

    S1(overrides?: CallOverrides): Promise<[string]>;

    T1(overrides?: CallOverrides): Promise<[BigNumber]>;

    T2(
      aa: PromiseOrValue<string>,
      ab: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    T3(
      af: PromiseOrValue<string>,
      ag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    T4(
      ai: PromiseOrValue<string>,
      aj: PromiseOrValue<string>,
      ak: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseA(
      ap: PromiseOrValue<string>,
      aq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseA(
      am: PromiseOrValue<string>,
      an: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  A1(
    ad: PromiseOrValue<string>,
    ae: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  B1(Z: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  D1(overrides?: CallOverrides): Promise<number>;

  N1(overrides?: CallOverrides): Promise<string>;

  S1(overrides?: CallOverrides): Promise<string>;

  T1(overrides?: CallOverrides): Promise<BigNumber>;

  T2(
    aa: PromiseOrValue<string>,
    ab: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  T3(
    af: PromiseOrValue<string>,
    ag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  T4(
    ai: PromiseOrValue<string>,
    aj: PromiseOrValue<string>,
    ak: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseA(
    ap: PromiseOrValue<string>,
    aq: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseA(
    am: PromiseOrValue<string>,
    an: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    A1(
      ad: PromiseOrValue<string>,
      ae: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    B1(
      Z: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    D1(overrides?: CallOverrides): Promise<number>;

    N1(overrides?: CallOverrides): Promise<string>;

    S1(overrides?: CallOverrides): Promise<string>;

    T1(overrides?: CallOverrides): Promise<BigNumber>;

    T2(
      aa: PromiseOrValue<string>,
      ab: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    T3(
      af: PromiseOrValue<string>,
      ag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    T4(
      ai: PromiseOrValue<string>,
      aj: PromiseOrValue<string>,
      ak: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseA(
      ap: PromiseOrValue<string>,
      aq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseA(
      am: PromiseOrValue<string>,
      an: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "E1(address,address,uint256)"(
      A?: PromiseOrValue<string> | null,
      B?: PromiseOrValue<string> | null,
      C?: null
    ): E1EventFilter;
    E1(
      A?: PromiseOrValue<string> | null,
      B?: PromiseOrValue<string> | null,
      C?: null
    ): E1EventFilter;

    "E2(address,address,uint256)"(
      D?: PromiseOrValue<string> | null,
      E?: PromiseOrValue<string> | null,
      F?: null
    ): E2EventFilter;
    E2(
      D?: PromiseOrValue<string> | null,
      E?: PromiseOrValue<string> | null,
      F?: null
    ): E2EventFilter;
  };

  estimateGas: {
    A1(
      ad: PromiseOrValue<string>,
      ae: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    B1(
      Z: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    D1(overrides?: CallOverrides): Promise<BigNumber>;

    N1(overrides?: CallOverrides): Promise<BigNumber>;

    S1(overrides?: CallOverrides): Promise<BigNumber>;

    T1(overrides?: CallOverrides): Promise<BigNumber>;

    T2(
      aa: PromiseOrValue<string>,
      ab: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    T3(
      af: PromiseOrValue<string>,
      ag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    T4(
      ai: PromiseOrValue<string>,
      aj: PromiseOrValue<string>,
      ak: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseA(
      ap: PromiseOrValue<string>,
      aq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseA(
      am: PromiseOrValue<string>,
      an: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    A1(
      ad: PromiseOrValue<string>,
      ae: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    B1(
      Z: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    D1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    N1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    S1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    T1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    T2(
      aa: PromiseOrValue<string>,
      ab: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    T3(
      af: PromiseOrValue<string>,
      ag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    T4(
      ai: PromiseOrValue<string>,
      aj: PromiseOrValue<string>,
      ak: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseA(
      ap: PromiseOrValue<string>,
      aq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseA(
      am: PromiseOrValue<string>,
      an: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
