/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CounterfeitPopStarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TOTAL_SUPPLY"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burnRate"
      | "cooldownTime"
      | "decimals"
      | "decreaseAllowance"
      | "devRate"
      | "devWallet"
      | "getSecondsUntilNextTransfer"
      | "increaseAllowance"
      | "marketingRate"
      | "marketingWallet"
      | "maxWalletPercent"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "setBurnRate"
      | "setCooldownTime"
      | "setDevRate"
      | "setDevWallet"
      | "setMarketingRate"
      | "setMarketingWallet"
      | "setMaxWalletPercent"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BurnRateUpdated"
      | "CooldownUpdated"
      | "DevRateUpdated"
      | "DevWalletUpdated"
      | "MarketingRateUpdated"
      | "MarketingWalletUpdated"
      | "MaxWalletUpdated"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burnRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cooldownTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "devRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSecondsUntilNextTransfer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cooldownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsUntilNextTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDevRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDevWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnRateUpdatedEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CooldownUpdatedEvent {
  export type InputTuple = [cooldownSeconds: BigNumberish];
  export type OutputTuple = [cooldownSeconds: bigint];
  export interface OutputObject {
    cooldownSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevRateUpdatedEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike];
  export type OutputTuple = [newWallet: string];
  export interface OutputObject {
    newWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketingRateUpdatedEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketingWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike];
  export type OutputTuple = [newWallet: string];
  export interface OutputObject {
    newWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletUpdatedEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CounterfeitPopStar extends BaseContract {
  connect(runner?: ContractRunner | null): CounterfeitPopStar;
  waitForDeployment(): Promise<this>;

  interface: CounterfeitPopStarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burnRate: TypedContractMethod<[], [bigint], "view">;

  cooldownTime: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  devRate: TypedContractMethod<[], [bigint], "view">;

  devWallet: TypedContractMethod<[], [string], "view">;

  getSecondsUntilNextTransfer: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  marketingRate: TypedContractMethod<[], [bigint], "view">;

  marketingWallet: TypedContractMethod<[], [string], "view">;

  maxWalletPercent: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBurnRate: TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;

  setCooldownTime: TypedContractMethod<
    [seconds_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDevRate: TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;

  setDevWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setMarketingRate: TypedContractMethod<
    [_rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketingWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxWalletPercent: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cooldownTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSecondsUntilNextTransfer"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketingWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxWalletPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBurnRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCooldownTime"
  ): TypedContractMethod<[seconds_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDevRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDevWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketingRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketingWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxWalletPercent"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BurnRateUpdated"
  ): TypedContractEvent<
    BurnRateUpdatedEvent.InputTuple,
    BurnRateUpdatedEvent.OutputTuple,
    BurnRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CooldownUpdated"
  ): TypedContractEvent<
    CooldownUpdatedEvent.InputTuple,
    CooldownUpdatedEvent.OutputTuple,
    CooldownUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DevRateUpdated"
  ): TypedContractEvent<
    DevRateUpdatedEvent.InputTuple,
    DevRateUpdatedEvent.OutputTuple,
    DevRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DevWalletUpdated"
  ): TypedContractEvent<
    DevWalletUpdatedEvent.InputTuple,
    DevWalletUpdatedEvent.OutputTuple,
    DevWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketingRateUpdated"
  ): TypedContractEvent<
    MarketingRateUpdatedEvent.InputTuple,
    MarketingRateUpdatedEvent.OutputTuple,
    MarketingRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketingWalletUpdated"
  ): TypedContractEvent<
    MarketingWalletUpdatedEvent.InputTuple,
    MarketingWalletUpdatedEvent.OutputTuple,
    MarketingWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletUpdated"
  ): TypedContractEvent<
    MaxWalletUpdatedEvent.InputTuple,
    MaxWalletUpdatedEvent.OutputTuple,
    MaxWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BurnRateUpdated(uint256)": TypedContractEvent<
      BurnRateUpdatedEvent.InputTuple,
      BurnRateUpdatedEvent.OutputTuple,
      BurnRateUpdatedEvent.OutputObject
    >;
    BurnRateUpdated: TypedContractEvent<
      BurnRateUpdatedEvent.InputTuple,
      BurnRateUpdatedEvent.OutputTuple,
      BurnRateUpdatedEvent.OutputObject
    >;

    "CooldownUpdated(uint256)": TypedContractEvent<
      CooldownUpdatedEvent.InputTuple,
      CooldownUpdatedEvent.OutputTuple,
      CooldownUpdatedEvent.OutputObject
    >;
    CooldownUpdated: TypedContractEvent<
      CooldownUpdatedEvent.InputTuple,
      CooldownUpdatedEvent.OutputTuple,
      CooldownUpdatedEvent.OutputObject
    >;

    "DevRateUpdated(uint256)": TypedContractEvent<
      DevRateUpdatedEvent.InputTuple,
      DevRateUpdatedEvent.OutputTuple,
      DevRateUpdatedEvent.OutputObject
    >;
    DevRateUpdated: TypedContractEvent<
      DevRateUpdatedEvent.InputTuple,
      DevRateUpdatedEvent.OutputTuple,
      DevRateUpdatedEvent.OutputObject
    >;

    "DevWalletUpdated(address)": TypedContractEvent<
      DevWalletUpdatedEvent.InputTuple,
      DevWalletUpdatedEvent.OutputTuple,
      DevWalletUpdatedEvent.OutputObject
    >;
    DevWalletUpdated: TypedContractEvent<
      DevWalletUpdatedEvent.InputTuple,
      DevWalletUpdatedEvent.OutputTuple,
      DevWalletUpdatedEvent.OutputObject
    >;

    "MarketingRateUpdated(uint256)": TypedContractEvent<
      MarketingRateUpdatedEvent.InputTuple,
      MarketingRateUpdatedEvent.OutputTuple,
      MarketingRateUpdatedEvent.OutputObject
    >;
    MarketingRateUpdated: TypedContractEvent<
      MarketingRateUpdatedEvent.InputTuple,
      MarketingRateUpdatedEvent.OutputTuple,
      MarketingRateUpdatedEvent.OutputObject
    >;

    "MarketingWalletUpdated(address)": TypedContractEvent<
      MarketingWalletUpdatedEvent.InputTuple,
      MarketingWalletUpdatedEvent.OutputTuple,
      MarketingWalletUpdatedEvent.OutputObject
    >;
    MarketingWalletUpdated: TypedContractEvent<
      MarketingWalletUpdatedEvent.InputTuple,
      MarketingWalletUpdatedEvent.OutputTuple,
      MarketingWalletUpdatedEvent.OutputObject
    >;

    "MaxWalletUpdated(uint256)": TypedContractEvent<
      MaxWalletUpdatedEvent.InputTuple,
      MaxWalletUpdatedEvent.OutputTuple,
      MaxWalletUpdatedEvent.OutputObject
    >;
    MaxWalletUpdated: TypedContractEvent<
      MaxWalletUpdatedEvent.InputTuple,
      MaxWalletUpdatedEvent.OutputTuple,
      MaxWalletUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
