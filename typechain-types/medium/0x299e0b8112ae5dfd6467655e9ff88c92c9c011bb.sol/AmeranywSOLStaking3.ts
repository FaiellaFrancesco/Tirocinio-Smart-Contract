/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AmeranywSOLStaking3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ERC"
      | "ERC20"
      | "ERC202"
      | "calculateInterest"
      | "claimInterestForDeposit"
      | "deposit"
      | "getDepositInfo"
      | "getReferral"
      | "isBlacklisted"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Blacklisted"
      | "Deposit"
      | "InterestClaimed"
      | "Unblacklisted"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ERC", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "ERC20", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "ERC202", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimInterestForDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ERC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ERC202", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimInterestForDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BlacklistedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    lockupPeriod: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    lockupPeriod: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    lockupPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnblacklistedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AmeranywSOLStaking3 extends BaseContract {
  connect(runner?: ContractRunner | null): AmeranywSOLStaking3;
  waitForDeployment(): Promise<this>;

  interface: AmeranywSOLStaking3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ERC: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  ERC20: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  ERC202: TypedContractMethod<[], [void], "nonpayable">;

  calculateInterest: TypedContractMethod<
    [user: AddressLike, depositIndex: BigNumberish],
    [bigint],
    "view"
  >;

  claimInterestForDeposit: TypedContractMethod<
    [lockupPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, lockupPeriod: BigNumberish, referral: AddressLike],
    [void],
    "nonpayable"
  >;

  getDepositInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], bigint[], bigint[], bigint[]] & {
        depositIndices: bigint[];
        unlockTimes: bigint[];
        stakedAmounts: bigint[];
        lockupPeriods: bigint[];
      }
    ],
    "view"
  >;

  getReferral: TypedContractMethod<[user: AddressLike], [string], "view">;

  isBlacklisted: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  withdraw: TypedContractMethod<
    [depositIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ERC"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ERC20"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ERC202"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateInterest"
  ): TypedContractMethod<
    [user: AddressLike, depositIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimInterestForDeposit"
  ): TypedContractMethod<[lockupPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [amount: BigNumberish, lockupPeriod: BigNumberish, referral: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDepositInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], bigint[], bigint[], bigint[]] & {
        depositIndices: bigint[];
        unlockTimes: bigint[];
        stakedAmounts: bigint[];
        lockupPeriods: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferral"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[depositIndex: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Blacklisted"
  ): TypedContractEvent<
    BlacklistedEvent.InputTuple,
    BlacklistedEvent.OutputTuple,
    BlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "InterestClaimed"
  ): TypedContractEvent<
    InterestClaimedEvent.InputTuple,
    InterestClaimedEvent.OutputTuple,
    InterestClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Unblacklisted"
  ): TypedContractEvent<
    UnblacklistedEvent.InputTuple,
    UnblacklistedEvent.OutputTuple,
    UnblacklistedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Blacklisted(address)": TypedContractEvent<
      BlacklistedEvent.InputTuple,
      BlacklistedEvent.OutputTuple,
      BlacklistedEvent.OutputObject
    >;
    Blacklisted: TypedContractEvent<
      BlacklistedEvent.InputTuple,
      BlacklistedEvent.OutputTuple,
      BlacklistedEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "InterestClaimed(address,uint256)": TypedContractEvent<
      InterestClaimedEvent.InputTuple,
      InterestClaimedEvent.OutputTuple,
      InterestClaimedEvent.OutputObject
    >;
    InterestClaimed: TypedContractEvent<
      InterestClaimedEvent.InputTuple,
      InterestClaimedEvent.OutputTuple,
      InterestClaimedEvent.OutputObject
    >;

    "Unblacklisted(address)": TypedContractEvent<
      UnblacklistedEvent.InputTuple,
      UnblacklistedEvent.OutputTuple,
      UnblacklistedEvent.OutputObject
    >;
    Unblacklisted: TypedContractEvent<
      UnblacklistedEvent.InputTuple,
      UnblacklistedEvent.OutputTuple,
      UnblacklistedEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
