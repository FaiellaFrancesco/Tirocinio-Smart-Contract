/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TicketFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "create"
      | "executeCall"
      | "getTicketBytecode"
      | "getTicketIdentifier"
      | "getUserData"
      | "owner"
      | "ticketsIndex"
      | "totalTickets"
      | "transferOwnership"
      | "userNonce"
      | "userTickets"
      | "viewCreateTicketContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "TicketCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "create", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeCall",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketIdentifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketsIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTickets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCreateTicketContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCreateTicketContract",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    ticket: AddressLike,
    nonce: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    ticket: string,
    nonce: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    ticket: string;
    nonce: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TicketFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TicketFactory;
  waitForDeployment(): Promise<this>;

  interface: TicketFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create: TypedContractMethod<[], [string], "nonpayable">;

  executeCall: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "payable"
  >;

  getTicketBytecode: TypedContractMethod<[], [string], "view">;

  getTicketIdentifier: TypedContractMethod<
    [index: BigNumberish],
    [bigint],
    "view"
  >;

  getUserData: TypedContractMethod<
    [user: AddressLike],
    [[bigint, string[]] & { nonce: bigint; tickets: string[] }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ticketsIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        user: string;
        ticketAddress: string;
        userTicketCount: bigint;
      }
    ],
    "view"
  >;

  totalTickets: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userNonce: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userTickets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  viewCreateTicketContract: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "executeCall"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTicketBytecode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTicketIdentifier"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserData"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, string[]] & { nonce: bigint; tickets: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ticketsIndex"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        user: string;
        ticketAddress: string;
        userTicketCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalTickets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userNonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userTickets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewCreateTicketContract"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TicketCreated"
  ): TypedContractEvent<
    TicketCreatedEvent.InputTuple,
    TicketCreatedEvent.OutputTuple,
    TicketCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TicketCreated(address,address,uint256,uint256)": TypedContractEvent<
      TicketCreatedEvent.InputTuple,
      TicketCreatedEvent.OutputTuple,
      TicketCreatedEvent.OutputObject
    >;
    TicketCreated: TypedContractEvent<
      TicketCreatedEvent.InputTuple,
      TicketCreatedEvent.OutputTuple,
      TicketCreatedEvent.OutputObject
    >;
  };
}
