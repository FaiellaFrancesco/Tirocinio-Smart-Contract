/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PoolKeyStruct = {
  id0: BigNumberish;
  id1: BigNumberish;
  token0: AddressLike;
  token1: AddressLike;
  swapFee: BigNumberish;
};

export type PoolKeyStructOutput = [
  id0: bigint,
  id1: bigint,
  token0: string,
  token1: string,
  swapFee: bigint
] & {
  id0: bigint;
  id1: bigint;
  token0: string;
  token1: string;
  swapFee: bigint;
};

export interface ZAMMSingleLiqETHInterface extends Interface {
  getFunction(nameOrSignature: "addSingleLiqETH"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSingleLiqETH",
    values: [
      PoolKeyStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSingleLiqETH",
    data: BytesLike
  ): Result;
}

export interface ZAMMSingleLiqETH extends BaseContract {
  connect(runner?: ContractRunner | null): ZAMMSingleLiqETH;
  waitForDeployment(): Promise<this>;

  interface: ZAMMSingleLiqETHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSingleLiqETH: TypedContractMethod<
    [
      poolKey: PoolKeyStruct,
      amountOutMin: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidity: bigint;
      }
    ],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSingleLiqETH"
  ): TypedContractMethod<
    [
      poolKey: PoolKeyStruct,
      amountOutMin: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidity: bigint;
      }
    ],
    "payable"
  >;

  filters: {};
}
