/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPermit2 {
  export type TokenPermissionsStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TokenPermissionsStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type PermitTransferFromStruct = {
    permitted: IPermit2.TokenPermissionsStruct[];
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type PermitTransferFromStructOutput = [
    IPermit2.TokenPermissionsStructOutput[],
    BigNumber,
    BigNumber
  ] & {
    permitted: IPermit2.TokenPermissionsStructOutput[];
    nonce: BigNumber;
    deadline: BigNumber;
  };

  export type SignatureTransferDetailsStruct = {
    to: PromiseOrValue<string>;
    requestedAmount: PromiseOrValue<BigNumberish>;
  };

  export type SignatureTransferDetailsStructOutput = [string, BigNumber] & {
    to: string;
    requestedAmount: BigNumber;
  };
}

export interface TokenDistributorInterface extends utils.Interface {
  functions: {
    "PERMIT2()": FunctionFragment;
    "distributeContractTokens(address[],address[],uint256[])": FunctionFragment;
    "distributeTokens(address[],address[],uint256[],address)": FunctionFragment;
    "owner()": FunctionFragment;
    "vanilla(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERMIT2"
      | "distributeContractTokens"
      | "distributeTokens"
      | "owner"
      | "vanilla"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PERMIT2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeContractTokens",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeTokens",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vanilla",
    values: [
      IPermit2.PermitTransferFromStruct,
      IPermit2.SignatureTransferDetailsStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "PERMIT2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeContractTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vanilla", data: BytesLike): Result;

  events: {};
}

export interface TokenDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERMIT2(overrides?: CallOverrides): Promise<[string]>;

    distributeContractTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    vanilla(
      permit: IPermit2.PermitTransferFromStruct,
      transferDetails: IPermit2.SignatureTransferDetailsStruct[],
      owner: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PERMIT2(overrides?: CallOverrides): Promise<string>;

  distributeContractTokens(
    tokens: PromiseOrValue<string>[],
    recipients: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeTokens(
    tokens: PromiseOrValue<string>[],
    recipients: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  vanilla(
    permit: IPermit2.PermitTransferFromStruct,
    transferDetails: IPermit2.SignatureTransferDetailsStruct[],
    owner: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PERMIT2(overrides?: CallOverrides): Promise<string>;

    distributeContractTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    distributeTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    vanilla(
      permit: IPermit2.PermitTransferFromStruct,
      transferDetails: IPermit2.SignatureTransferDetailsStruct[],
      owner: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    PERMIT2(overrides?: CallOverrides): Promise<BigNumber>;

    distributeContractTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    vanilla(
      permit: IPermit2.PermitTransferFromStruct,
      transferDetails: IPermit2.SignatureTransferDetailsStruct[],
      owner: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERMIT2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeContractTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeTokens(
      tokens: PromiseOrValue<string>[],
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vanilla(
      permit: IPermit2.PermitTransferFromStruct,
      transferDetails: IPermit2.SignatureTransferDetailsStruct[],
      owner: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
