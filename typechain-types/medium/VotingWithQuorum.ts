/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VotingWithQuorumInterface extends utils.Interface {
  functions: {
    "addProposal(string)": FunctionFragment;
    "getWinningProposal()": FunctionFragment;
    "hasVoted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "quorumPercent()": FunctionFragment;
    "registerVoter(address)": FunctionFragment;
    "registeredVoters(address)": FunctionFragment;
    "setQuorumPercent(uint256)": FunctionFragment;
    "startVoting()": FunctionFragment;
    "totalVoters()": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "votesCast()": FunctionFragment;
    "votingStarted()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addProposal"
      | "getWinningProposal"
      | "hasVoted"
      | "owner"
      | "proposals"
      | "quorumPercent"
      | "registerVoter"
      | "registeredVoters"
      | "setQuorumPercent"
      | "startVoting"
      | "totalVoters"
      | "vote"
      | "votesCast"
      | "votingStarted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredVoters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorumPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVoters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "votesCast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingStarted",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuorumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votesCast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingStarted",
    data: BytesLike
  ): Result;

  events: {
    "ProposalAccepted(string)": EventFragment;
    "ProposalAdded(string)": EventFragment;
    "QuorumChanged(uint256)": EventFragment;
    "VoteCast(address,uint256)": EventFragment;
    "VoterRegistered(address)": EventFragment;
    "VotingStarted()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingStarted"): EventFragment;
}

export interface ProposalAcceptedEventObject {
  description: string;
}
export type ProposalAcceptedEvent = TypedEvent<
  [string],
  ProposalAcceptedEventObject
>;

export type ProposalAcceptedEventFilter =
  TypedEventFilter<ProposalAcceptedEvent>;

export interface ProposalAddedEventObject {
  description: string;
}
export type ProposalAddedEvent = TypedEvent<[string], ProposalAddedEventObject>;

export type ProposalAddedEventFilter = TypedEventFilter<ProposalAddedEvent>;

export interface QuorumChangedEventObject {
  newQuorumPercent: BigNumber;
}
export type QuorumChangedEvent = TypedEvent<
  [BigNumber],
  QuorumChangedEventObject
>;

export type QuorumChangedEventFilter = TypedEventFilter<QuorumChangedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalIndex: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VoterRegisteredEventObject {
  voter: string;
}
export type VoterRegisteredEvent = TypedEvent<
  [string],
  VoterRegisteredEventObject
>;

export type VoterRegisteredEventFilter = TypedEventFilter<VoterRegisteredEvent>;

export interface VotingStartedEventObject {}
export type VotingStartedEvent = TypedEvent<[], VotingStartedEventObject>;

export type VotingStartedEventFilter = TypedEventFilter<VotingStartedEvent>;

export interface VotingWithQuorum extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingWithQuorumInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProposal(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWinningProposal(
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { description: string; accepted: boolean }>;

    hasVoted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { description: string; voteCount: BigNumber }
    >;

    quorumPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerVoter(
      voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setQuorumPercent(
      newQuorumPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startVoting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalVoters(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votesCast(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingStarted(overrides?: CallOverrides): Promise<[boolean]>;
  };

  addProposal(
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWinningProposal(
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { description: string; accepted: boolean }>;

  hasVoted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { description: string; voteCount: BigNumber }
  >;

  quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

  registerVoter(
    voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredVoters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setQuorumPercent(
    newQuorumPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startVoting(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalVoters(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votesCast(overrides?: CallOverrides): Promise<BigNumber>;

  votingStarted(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addProposal(
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getWinningProposal(
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { description: string; accepted: boolean }>;

    hasVoted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { description: string; voteCount: BigNumber }
    >;

    quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    registerVoter(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setQuorumPercent(
      newQuorumPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startVoting(overrides?: CallOverrides): Promise<void>;

    totalVoters(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    votesCast(overrides?: CallOverrides): Promise<BigNumber>;

    votingStarted(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ProposalAccepted(string)"(description?: null): ProposalAcceptedEventFilter;
    ProposalAccepted(description?: null): ProposalAcceptedEventFilter;

    "ProposalAdded(string)"(description?: null): ProposalAddedEventFilter;
    ProposalAdded(description?: null): ProposalAddedEventFilter;

    "QuorumChanged(uint256)"(newQuorumPercent?: null): QuorumChangedEventFilter;
    QuorumChanged(newQuorumPercent?: null): QuorumChangedEventFilter;

    "VoteCast(address,uint256)"(
      voter?: null,
      proposalIndex?: null
    ): VoteCastEventFilter;
    VoteCast(voter?: null, proposalIndex?: null): VoteCastEventFilter;

    "VoterRegistered(address)"(voter?: null): VoterRegisteredEventFilter;
    VoterRegistered(voter?: null): VoterRegisteredEventFilter;

    "VotingStarted()"(): VotingStartedEventFilter;
    VotingStarted(): VotingStartedEventFilter;
  };

  estimateGas: {
    addProposal(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWinningProposal(overrides?: CallOverrides): Promise<BigNumber>;

    hasVoted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    registerVoter(
      voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setQuorumPercent(
      newQuorumPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startVoting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalVoters(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votesCast(overrides?: CallOverrides): Promise<BigNumber>;

    votingStarted(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addProposal(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWinningProposal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerVoter(
      voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setQuorumPercent(
      newQuorumPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startVoting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votesCast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
