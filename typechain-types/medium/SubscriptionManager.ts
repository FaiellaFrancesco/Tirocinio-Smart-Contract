/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SubscriptionManagerInterface extends utils.Interface {
  functions: {
    "getExpiry(address)": FunctionFragment;
    "isSubscribed(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "subscribe()": FunctionFragment;
    "subscriptionDuration()": FunctionFragment;
    "subscriptionPrice()": FunctionFragment;
    "updateParameters(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getExpiry"
      | "isSubscribed"
      | "owner"
      | "subscribe"
      | "subscriptionDuration"
      | "subscriptionPrice"
      | "updateParameters"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscriptionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateParameters",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ParametersUpdated(uint256,uint256)": EventFragment;
    "Subscribed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParametersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
}

export interface ParametersUpdatedEventObject {
  newPrice: BigNumber;
  newDuration: BigNumber;
}
export type ParametersUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ParametersUpdatedEventObject
>;

export type ParametersUpdatedEventFilter =
  TypedEventFilter<ParametersUpdatedEvent>;

export interface SubscribedEventObject {
  user: string;
  expiresAt: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface SubscriptionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getExpiry(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    subscriptionPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateParameters(
      _price: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getExpiry(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isSubscribed(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  subscribe(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  subscriptionPrice(overrides?: CallOverrides): Promise<BigNumber>;

  updateParameters(
    _price: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getExpiry(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    subscribe(overrides?: CallOverrides): Promise<void>;

    subscriptionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    updateParameters(
      _price: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ParametersUpdated(uint256,uint256)"(
      newPrice?: null,
      newDuration?: null
    ): ParametersUpdatedEventFilter;
    ParametersUpdated(
      newPrice?: null,
      newDuration?: null
    ): ParametersUpdatedEventFilter;

    "Subscribed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      expiresAt?: null
    ): SubscribedEventFilter;
    Subscribed(
      user?: PromiseOrValue<string> | null,
      expiresAt?: null
    ): SubscribedEventFilter;
  };

  estimateGas: {
    getExpiry(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    updateParameters(
      _price: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExpiry(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateParameters(
      _price: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
