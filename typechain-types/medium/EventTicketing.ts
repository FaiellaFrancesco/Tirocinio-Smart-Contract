/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EventTicketingInterface extends utils.Interface {
  functions: {
    "buyTicket()": FunctionFragment;
    "markTicketUsed(address)": FunctionFragment;
    "maxCapacity()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownsTicket(address)": FunctionFragment;
    "refundTicket(address)": FunctionFragment;
    "refundTicketsBulk(address[])": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "ticketsSold()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTicket"
      | "markTicketUsed"
      | "maxCapacity"
      | "owner"
      | "ownsTicket"
      | "refundTicket"
      | "refundTicketsBulk"
      | "ticketPrice"
      | "ticketsSold"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "buyTicket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "markTicketUsed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownsTicket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "refundTicket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "refundTicketsBulk",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsSold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markTicketUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownsTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundTicketsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "TicketPurchased(address)": EventFragment;
    "TicketRefunded(address)": EventFragment;
    "TicketUsed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TicketPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketUsed"): EventFragment;
}

export interface TicketPurchasedEventObject {
  buyer: string;
}
export type TicketPurchasedEvent = TypedEvent<
  [string],
  TicketPurchasedEventObject
>;

export type TicketPurchasedEventFilter = TypedEventFilter<TicketPurchasedEvent>;

export interface TicketRefundedEventObject {
  buyer: string;
}
export type TicketRefundedEvent = TypedEvent<
  [string],
  TicketRefundedEventObject
>;

export type TicketRefundedEventFilter = TypedEventFilter<TicketRefundedEvent>;

export interface TicketUsedEventObject {
  buyer: string;
}
export type TicketUsedEvent = TypedEvent<[string], TicketUsedEventObject>;

export type TicketUsedEventFilter = TypedEventFilter<TicketUsedEvent>;

export interface EventTicketing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventTicketingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTicket(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    markTicketUsed(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxCapacity(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownsTicket(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    refundTicket(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundTicketsBulk(
      buyers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketsSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyTicket(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  markTicketUsed(
    buyer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownsTicket(
    buyer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  refundTicket(
    buyer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundTicketsBulk(
    buyers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  ticketsSold(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTicket(overrides?: CallOverrides): Promise<void>;

    markTicketUsed(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownsTicket(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    refundTicket(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    refundTicketsBulk(
      buyers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsSold(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "TicketPurchased(address)"(
      buyer?: PromiseOrValue<string> | null
    ): TicketPurchasedEventFilter;
    TicketPurchased(
      buyer?: PromiseOrValue<string> | null
    ): TicketPurchasedEventFilter;

    "TicketRefunded(address)"(
      buyer?: PromiseOrValue<string> | null
    ): TicketRefundedEventFilter;
    TicketRefunded(
      buyer?: PromiseOrValue<string> | null
    ): TicketRefundedEventFilter;

    "TicketUsed(address)"(
      buyer?: PromiseOrValue<string> | null
    ): TicketUsedEventFilter;
    TicketUsed(buyer?: PromiseOrValue<string> | null): TicketUsedEventFilter;
  };

  estimateGas: {
    buyTicket(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    markTicketUsed(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownsTicket(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundTicket(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundTicketsBulk(
      buyers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsSold(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTicket(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    markTicketUsed(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxCapacity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownsTicket(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundTicket(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundTicketsBulk(
      buyers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketsSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
