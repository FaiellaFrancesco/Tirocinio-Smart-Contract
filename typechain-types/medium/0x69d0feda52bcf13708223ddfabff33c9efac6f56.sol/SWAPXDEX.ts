/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SWAPXDEXInterface extends utils.Interface {
  functions: {
    "ETHBuyHelper(uint256)": FunctionFragment;
    "MaxUSDTRaised()": FunctionFragment;
    "PresaleRate()": FunctionFragment;
    "USDTRaised()": FunctionFragment;
    "aggregatorInterface()": FunctionFragment;
    "buyWithETH()": FunctionFragment;
    "buyWithUSDT(uint256)": FunctionFragment;
    "changeMaxTokensToBuy(uint256)": FunctionFragment;
    "changeSaleEndTime(uint256)": FunctionFragment;
    "changeSaleStartTime(uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "endTime()": FunctionFragment;
    "getETHBalance()": FunctionFragment;
    "getLatestPrice()": FunctionFragment;
    "getTokenBalance()": FunctionFragment;
    "getUsdtBalance()": FunctionFragment;
    "maxTokensToBuy()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setMaxUSDTRaised(uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "token()": FunctionFragment;
    "totalTokensSold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePresaleRate(uint256)": FunctionFragment;
    "usdt()": FunctionFragment;
    "usdtBuyHelper(uint256)": FunctionFragment;
    "userDeposits(address)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
    "withdrawTokens(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ETHBuyHelper"
      | "MaxUSDTRaised"
      | "PresaleRate"
      | "USDTRaised"
      | "aggregatorInterface"
      | "buyWithETH"
      | "buyWithUSDT"
      | "changeMaxTokensToBuy"
      | "changeSaleEndTime"
      | "changeSaleStartTime"
      | "claim"
      | "endTime"
      | "getETHBalance"
      | "getLatestPrice"
      | "getTokenBalance"
      | "getUsdtBalance"
      | "maxTokensToBuy"
      | "owner"
      | "pause"
      | "paused"
      | "setMaxUSDTRaised"
      | "startTime"
      | "token"
      | "totalTokensSold"
      | "transferOwnership"
      | "unpause"
      | "updatePresaleRate"
      | "usdt"
      | "usdtBuyHelper"
      | "userDeposits"
      | "withdrawETH"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ETHBuyHelper",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "MaxUSDTRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PresaleRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDTRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorInterface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithUSDT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxTokensToBuy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSaleEndTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSaleStartTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getETHBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdtBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokensToBuy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMaxUSDTRaised",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalTokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePresaleRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdtBuyHelper",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETHBuyHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MaxUSDTRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PresaleRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDTRaised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyWithETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxTokensToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSaleEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSaleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getETHBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdtBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokensToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxUSDTRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePresaleRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdtBuyHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "MaxTokensUpdated(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TokensBought(address,uint256,address,uint256,uint256)": EventFragment;
    "TokensClaimed(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MaxTokensUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface MaxTokensUpdatedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
  timestamp: BigNumber;
}
export type MaxTokensUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  MaxTokensUpdatedEventObject
>;

export type MaxTokensUpdatedEventFilter =
  TypedEventFilter<MaxTokensUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TokensBoughtEventObject {
  user: string;
  tokensBought: BigNumber;
  purchaseToken: string;
  amountPaid: BigNumber;
  timestamp: BigNumber;
}
export type TokensBoughtEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  TokensBoughtEventObject
>;

export type TokensBoughtEventFilter = TypedEventFilter<TokensBoughtEvent>;

export interface TokensClaimedEventObject {
  user: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface SWAPXDEX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SWAPXDEXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETHBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numOfTokens: BigNumber }>;

    MaxUSDTRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    PresaleRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDTRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    aggregatorInterface(overrides?: CallOverrides): Promise<[string]>;

    buyWithETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMaxTokensToBuy(
      _maxTokensToBuy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSaleEndTime(
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSaleStartTime(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getETHBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatestPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenBalance: BigNumber }>;

    getUsdtBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdtBalance: BigNumber }>;

    maxTokensToBuy(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setMaxUSDTRaised(
      _newUsdtRaised: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalTokensSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePresaleRate(
      _newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdt(overrides?: CallOverrides): Promise<[string]>;

    usdtBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numOfTokens: BigNumber }>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ETHBuyHelper(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MaxUSDTRaised(overrides?: CallOverrides): Promise<BigNumber>;

  PresaleRate(overrides?: CallOverrides): Promise<BigNumber>;

  USDTRaised(overrides?: CallOverrides): Promise<BigNumber>;

  aggregatorInterface(overrides?: CallOverrides): Promise<string>;

  buyWithETH(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyWithUSDT(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMaxTokensToBuy(
    _maxTokensToBuy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSaleEndTime(
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSaleStartTime(
    _startTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  getETHBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getUsdtBalance(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokensToBuy(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setMaxUSDTRaised(
    _newUsdtRaised: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePresaleRate(
    _newRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  usdtBuyHelper(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userDeposits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawETH(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETHBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MaxUSDTRaised(overrides?: CallOverrides): Promise<BigNumber>;

    PresaleRate(overrides?: CallOverrides): Promise<BigNumber>;

    USDTRaised(overrides?: CallOverrides): Promise<BigNumber>;

    aggregatorInterface(overrides?: CallOverrides): Promise<string>;

    buyWithETH(overrides?: CallOverrides): Promise<void>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaxTokensToBuy(
      _maxTokensToBuy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSaleEndTime(
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSaleStartTime(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<boolean>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getETHBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdtBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokensToBuy(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setMaxUSDTRaised(
      _newUsdtRaised: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    updatePresaleRate(
      _newRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdt(overrides?: CallOverrides): Promise<string>;

    usdtBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MaxTokensUpdated(uint256,uint256,uint256)"(
      prevValue?: null,
      newValue?: null,
      timestamp?: null
    ): MaxTokensUpdatedEventFilter;
    MaxTokensUpdated(
      prevValue?: null,
      newValue?: null,
      timestamp?: null
    ): MaxTokensUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TokensBought(address,uint256,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokensBought?: PromiseOrValue<BigNumberish> | null,
      purchaseToken?: PromiseOrValue<string> | null,
      amountPaid?: null,
      timestamp?: null
    ): TokensBoughtEventFilter;
    TokensBought(
      user?: PromiseOrValue<string> | null,
      tokensBought?: PromiseOrValue<BigNumberish> | null,
      purchaseToken?: PromiseOrValue<string> | null,
      amountPaid?: null,
      timestamp?: null
    ): TokensBoughtEventFilter;

    "TokensClaimed(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): TokensClaimedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ETHBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MaxUSDTRaised(overrides?: CallOverrides): Promise<BigNumber>;

    PresaleRate(overrides?: CallOverrides): Promise<BigNumber>;

    USDTRaised(overrides?: CallOverrides): Promise<BigNumber>;

    aggregatorInterface(overrides?: CallOverrides): Promise<BigNumber>;

    buyWithETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMaxTokensToBuy(
      _maxTokensToBuy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSaleEndTime(
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSaleStartTime(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getETHBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdtBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokensToBuy(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxUSDTRaised(
      _newUsdtRaised: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePresaleRate(
      _newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    usdtBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MaxUSDTRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PresaleRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDTRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aggregatorInterface(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyWithETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMaxTokensToBuy(
      _maxTokensToBuy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSaleEndTime(
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSaleStartTime(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETHBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsdtBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTokensToBuy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxUSDTRaised(
      _newUsdtRaised: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokensSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePresaleRate(
      _newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdtBuyHelper(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
