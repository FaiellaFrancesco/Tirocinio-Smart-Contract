/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SWAPXDEXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETHBuyHelper"
      | "MaxUSDTRaised"
      | "PresaleRate"
      | "USDTRaised"
      | "aggregatorInterface"
      | "buyWithETH"
      | "buyWithUSDT"
      | "changeMaxTokensToBuy"
      | "changeSaleEndTime"
      | "changeSaleStartTime"
      | "claim"
      | "endTime"
      | "getETHBalance"
      | "getLatestPrice"
      | "getTokenBalance"
      | "getUsdtBalance"
      | "maxTokensToBuy"
      | "owner"
      | "pause"
      | "paused"
      | "setMaxUSDTRaised"
      | "startTime"
      | "token"
      | "totalTokensSold"
      | "transferOwnership"
      | "unpause"
      | "updatePresaleRate"
      | "usdt"
      | "usdtBuyHelper"
      | "userDeposits"
      | "withdrawETH"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MaxTokensUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "TokensBought"
      | "TokensClaimed"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ETHBuyHelper",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MaxUSDTRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PresaleRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDTRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorInterface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxTokensToBuy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSaleEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSaleStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getETHBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdtBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokensToBuy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMaxUSDTRaised",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalTokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePresaleRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdtBuyHelper",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETHBuyHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MaxUSDTRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PresaleRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDTRaised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyWithETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxTokensToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSaleEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSaleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getETHBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdtBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokensToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxUSDTRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePresaleRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdtBuyHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace MaxTokensUpdatedEvent {
  export type InputTuple = [
    prevValue: BigNumberish,
    newValue: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    prevValue: bigint,
    newValue: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    prevValue: bigint;
    newValue: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBoughtEvent {
  export type InputTuple = [
    user: AddressLike,
    tokensBought: BigNumberish,
    purchaseToken: AddressLike,
    amountPaid: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokensBought: bigint,
    purchaseToken: string,
    amountPaid: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    tokensBought: bigint;
    purchaseToken: string;
    amountPaid: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SWAPXDEX extends BaseContract {
  connect(runner?: ContractRunner | null): SWAPXDEX;
  waitForDeployment(): Promise<this>;

  interface: SWAPXDEXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETHBuyHelper: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  MaxUSDTRaised: TypedContractMethod<[], [bigint], "view">;

  PresaleRate: TypedContractMethod<[], [bigint], "view">;

  USDTRaised: TypedContractMethod<[], [bigint], "view">;

  aggregatorInterface: TypedContractMethod<[], [string], "view">;

  buyWithETH: TypedContractMethod<[], [void], "payable">;

  buyWithUSDT: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeMaxTokensToBuy: TypedContractMethod<
    [_maxTokensToBuy: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeSaleEndTime: TypedContractMethod<
    [_endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeSaleStartTime: TypedContractMethod<
    [_startTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[], [boolean], "nonpayable">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  getETHBalance: TypedContractMethod<[], [bigint], "view">;

  getLatestPrice: TypedContractMethod<[], [bigint], "view">;

  getTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getUsdtBalance: TypedContractMethod<[], [bigint], "view">;

  maxTokensToBuy: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [boolean], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  setMaxUSDTRaised: TypedContractMethod<
    [_newUsdtRaised: BigNumberish],
    [void],
    "nonpayable"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalTokensSold: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [boolean], "nonpayable">;

  updatePresaleRate: TypedContractMethod<
    [_newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdt: TypedContractMethod<[], [string], "view">;

  usdtBuyHelper: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  userDeposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawETH: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [_token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETHBuyHelper"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "MaxUSDTRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PresaleRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDTRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "aggregatorInterface"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyWithETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "buyWithUSDT"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMaxTokensToBuy"
  ): TypedContractMethod<[_maxTokensToBuy: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeSaleEndTime"
  ): TypedContractMethod<[_endTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeSaleStartTime"
  ): TypedContractMethod<[_startTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getETHBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUsdtBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTokensToBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setMaxUSDTRaised"
  ): TypedContractMethod<[_newUsdtRaised: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalTokensSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePresaleRate"
  ): TypedContractMethod<[_newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdtBuyHelper"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "userDeposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [_token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MaxTokensUpdated"
  ): TypedContractEvent<
    MaxTokensUpdatedEvent.InputTuple,
    MaxTokensUpdatedEvent.OutputTuple,
    MaxTokensUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBought"
  ): TypedContractEvent<
    TokensBoughtEvent.InputTuple,
    TokensBoughtEvent.OutputTuple,
    TokensBoughtEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "MaxTokensUpdated(uint256,uint256,uint256)": TypedContractEvent<
      MaxTokensUpdatedEvent.InputTuple,
      MaxTokensUpdatedEvent.OutputTuple,
      MaxTokensUpdatedEvent.OutputObject
    >;
    MaxTokensUpdated: TypedContractEvent<
      MaxTokensUpdatedEvent.InputTuple,
      MaxTokensUpdatedEvent.OutputTuple,
      MaxTokensUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TokensBought(address,uint256,address,uint256,uint256)": TypedContractEvent<
      TokensBoughtEvent.InputTuple,
      TokensBoughtEvent.OutputTuple,
      TokensBoughtEvent.OutputObject
    >;
    TokensBought: TypedContractEvent<
      TokensBoughtEvent.InputTuple,
      TokensBoughtEvent.OutputTuple,
      TokensBoughtEvent.OutputObject
    >;

    "TokensClaimed(address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
