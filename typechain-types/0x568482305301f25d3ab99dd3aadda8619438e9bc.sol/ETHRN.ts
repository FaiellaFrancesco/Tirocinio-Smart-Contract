/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ETHRNInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETHRN"
      | "ETHRNWallet"
      | "_isExcludedMaxTransactionAmount"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "blacklistAccounts"
      | "buyETHRNTax"
      | "buyLiqTax"
      | "buyMarketingTax"
      | "buyTotalTaxs"
      | "decimals"
      | "decreaseAllowance"
      | "disableTransferDelay"
      | "earlySellLiqTax"
      | "earlySellMarketingTax"
      | "enableEarlySellTax"
      | "enableTrading"
      | "excludeFromMaxTransaction"
      | "excludeFromTaxs"
      | "increaseAllowance"
      | "isBlacklisted"
      | "isExcludedFromTaxs"
      | "limitsInEffect"
      | "marketingWallet"
      | "maxTransactionAmount"
      | "maxWallet"
      | "name"
      | "owner"
      | "removeLimits"
      | "renounceOwnership"
      | "sellETHRNTax"
      | "sellLiqTax"
      | "sellMarketingTax"
      | "sellTotalTaxs"
      | "setAutomatedMarketMakerPair"
      | "setEarlySellTax"
      | "set_ETHRN"
      | "swapEnabled"
      | "swapTokensAtAmount"
      | "symbol"
      | "tokensForDev"
      | "tokensForLiquidity"
      | "tokensForMarketing"
      | "totalSupply"
      | "tradingActive"
      | "transfer"
      | "transferDelayEnabled"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "updateBuyTaxs"
      | "updateETHRNWallet"
      | "updateMarketingWallet"
      | "updateMaxTxnAmount"
      | "updateMaxWalletAmount"
      | "updateSellTaxs"
      | "updateSwapEnabled"
      | "updateSwapTokensAtAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "AutoNukeLP"
      | "BoughtEarly"
      | "ETHRNWalletUpdated"
      | "ExcludeFromTaxs"
      | "ManualNukeLP"
      | "OwnershipTransferred"
      | "SetAutomatedMarketMakerPair"
      | "SwapAndLiquify"
      | "Transfer"
      | "UpdateUniswapV2Router"
      | "marketingWalletUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ETHRN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ETHRNWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistAccounts",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "buyETHRNTax",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyLiqTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyMarketingTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTotalTaxs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableTransferDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlySellLiqTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlySellMarketingTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableEarlySellTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromTaxs",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromTaxs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInEffect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellETHRNTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiqTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMarketingTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTotalTaxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlySellTax",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "set_ETHRN",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForDev",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForMarketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDelayEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyTaxs",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateETHRNWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketingWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTxnAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWalletAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellTaxs",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapTokensAtAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ETHRN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ETHRNWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyETHRNTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyLiqTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketingTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTotalTaxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTransferDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlySellLiqTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlySellMarketingTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableEarlySellTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromTaxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromTaxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellETHRNTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellLiqTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellMarketingTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTotalTaxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlySellTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_ETHRN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyTaxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateETHRNWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTxnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellTaxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapTokensAtAmount",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutoNukeLPEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoughtEarlyEvent {
  export type InputTuple = [sniper: AddressLike];
  export type OutputTuple = [sniper: string];
  export interface OutputObject {
    sniper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ETHRNWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromTaxsEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManualNukeLPEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAutomatedMarketMakerPairEvent {
  export type InputTuple = [pair: AddressLike, value: boolean];
  export type OutputTuple = [pair: string, value: boolean];
  export interface OutputObject {
    pair: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEvent {
  export type InputTuple = [
    tokensSwapped: BigNumberish,
    ethReceived: BigNumberish,
    tokensIntoLiquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokensSwapped: bigint,
    ethReceived: bigint,
    tokensIntoLiquidity: bigint
  ];
  export interface OutputObject {
    tokensSwapped: bigint;
    ethReceived: bigint;
    tokensIntoLiquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateUniswapV2RouterEvent {
  export type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
  export type OutputTuple = [newAddress: string, oldAddress: string];
  export interface OutputObject {
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace marketingWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ETHRN extends BaseContract {
  connect(runner?: ContractRunner | null): ETHRN;
  waitForDeployment(): Promise<this>;

  interface: ETHRNInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETHRN: TypedContractMethod<[], [string], "view">;

  ETHRNWallet: TypedContractMethod<[], [string], "view">;

  _isExcludedMaxTransactionAmount: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  automatedMarketMakerPairs: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  blacklistAccounts: TypedContractMethod<
    [accounts: AddressLike[], isBlacklisted: boolean],
    [void],
    "nonpayable"
  >;

  buyETHRNTax: TypedContractMethod<[], [bigint], "view">;

  buyLiqTax: TypedContractMethod<[], [bigint], "view">;

  buyMarketingTax: TypedContractMethod<[], [bigint], "view">;

  buyTotalTaxs: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  disableTransferDelay: TypedContractMethod<[], [boolean], "nonpayable">;

  earlySellLiqTax: TypedContractMethod<[], [bigint], "view">;

  earlySellMarketingTax: TypedContractMethod<[], [bigint], "view">;

  enableEarlySellTax: TypedContractMethod<[], [boolean], "view">;

  enableTrading: TypedContractMethod<[], [void], "nonpayable">;

  excludeFromMaxTransaction: TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromTaxs: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isBlacklisted: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isExcludedFromTaxs: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  limitsInEffect: TypedContractMethod<[], [boolean], "view">;

  marketingWallet: TypedContractMethod<[], [string], "view">;

  maxTransactionAmount: TypedContractMethod<[], [bigint], "view">;

  maxWallet: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeLimits: TypedContractMethod<[], [boolean], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellETHRNTax: TypedContractMethod<[], [bigint], "view">;

  sellLiqTax: TypedContractMethod<[], [bigint], "view">;

  sellMarketingTax: TypedContractMethod<[], [bigint], "view">;

  sellTotalTaxs: TypedContractMethod<[], [bigint], "view">;

  setAutomatedMarketMakerPair: TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  setEarlySellTax: TypedContractMethod<[onoff: boolean], [void], "nonpayable">;

  set_ETHRN: TypedContractMethod<
    [new_ETHRN_address: AddressLike],
    [void],
    "nonpayable"
  >;

  swapEnabled: TypedContractMethod<[], [boolean], "view">;

  swapTokensAtAmount: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokensForDev: TypedContractMethod<[], [bigint], "view">;

  tokensForLiquidity: TypedContractMethod<[], [bigint], "view">;

  tokensForMarketing: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingActive: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferDelayEnabled: TypedContractMethod<[], [boolean], "view">;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  updateBuyTaxs: TypedContractMethod<
    [
      _marketingTax: BigNumberish,
      _LiqTax: BigNumberish,
      _ETHRNTax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateETHRNWallet: TypedContractMethod<
    [newWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMarketingWallet: TypedContractMethod<
    [newMarketingWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMaxTxnAmount: TypedContractMethod<
    [newNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxWalletAmount: TypedContractMethod<
    [newNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSellTaxs: TypedContractMethod<
    [
      _marketingTax: BigNumberish,
      _LiqTax: BigNumberish,
      _ETHRNTax: BigNumberish,
      _earlySellLiqTax: BigNumberish,
      _earlySellMarketingTax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateSwapEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  updateSwapTokensAtAmount: TypedContractMethod<
    [newAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETHRN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ETHRNWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_isExcludedMaxTransactionAmount"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "automatedMarketMakerPairs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklistAccounts"
  ): TypedContractMethod<
    [accounts: AddressLike[], isBlacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyETHRNTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyLiqTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyMarketingTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTotalTaxs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableTransferDelay"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "earlySellLiqTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "earlySellMarketingTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enableEarlySellTax"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "enableTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromMaxTransaction"
  ): TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeFromTaxs"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromTaxs"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "limitsInEffect"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketingWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxTransactionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWallet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLimits"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellETHRNTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellLiqTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellMarketingTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellTotalTaxs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAutomatedMarketMakerPair"
  ): TypedContractMethod<
    [pair: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEarlySellTax"
  ): TypedContractMethod<[onoff: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_ETHRN"
  ): TypedContractMethod<
    [new_ETHRN_address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapTokensAtAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensForDev"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensForLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensForMarketing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferDelayEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateBuyTaxs"
  ): TypedContractMethod<
    [
      _marketingTax: BigNumberish,
      _LiqTax: BigNumberish,
      _ETHRNTax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateETHRNWallet"
  ): TypedContractMethod<[newWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMarketingWallet"
  ): TypedContractMethod<
    [newMarketingWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMaxTxnAmount"
  ): TypedContractMethod<[newNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxWalletAmount"
  ): TypedContractMethod<[newNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSellTaxs"
  ): TypedContractMethod<
    [
      _marketingTax: BigNumberish,
      _LiqTax: BigNumberish,
      _ETHRNTax: BigNumberish,
      _earlySellLiqTax: BigNumberish,
      _earlySellMarketingTax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSwapEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSwapTokensAtAmount"
  ): TypedContractMethod<[newAmount: BigNumberish], [boolean], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AutoNukeLP"
  ): TypedContractEvent<
    AutoNukeLPEvent.InputTuple,
    AutoNukeLPEvent.OutputTuple,
    AutoNukeLPEvent.OutputObject
  >;
  getEvent(
    key: "BoughtEarly"
  ): TypedContractEvent<
    BoughtEarlyEvent.InputTuple,
    BoughtEarlyEvent.OutputTuple,
    BoughtEarlyEvent.OutputObject
  >;
  getEvent(
    key: "ETHRNWalletUpdated"
  ): TypedContractEvent<
    ETHRNWalletUpdatedEvent.InputTuple,
    ETHRNWalletUpdatedEvent.OutputTuple,
    ETHRNWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromTaxs"
  ): TypedContractEvent<
    ExcludeFromTaxsEvent.InputTuple,
    ExcludeFromTaxsEvent.OutputTuple,
    ExcludeFromTaxsEvent.OutputObject
  >;
  getEvent(
    key: "ManualNukeLP"
  ): TypedContractEvent<
    ManualNukeLPEvent.InputTuple,
    ManualNukeLPEvent.OutputTuple,
    ManualNukeLPEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetAutomatedMarketMakerPair"
  ): TypedContractEvent<
    SetAutomatedMarketMakerPairEvent.InputTuple,
    SetAutomatedMarketMakerPairEvent.OutputTuple,
    SetAutomatedMarketMakerPairEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquify"
  ): TypedContractEvent<
    SwapAndLiquifyEvent.InputTuple,
    SwapAndLiquifyEvent.OutputTuple,
    SwapAndLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateUniswapV2Router"
  ): TypedContractEvent<
    UpdateUniswapV2RouterEvent.InputTuple,
    UpdateUniswapV2RouterEvent.OutputTuple,
    UpdateUniswapV2RouterEvent.OutputObject
  >;
  getEvent(
    key: "marketingWalletUpdated"
  ): TypedContractEvent<
    marketingWalletUpdatedEvent.InputTuple,
    marketingWalletUpdatedEvent.OutputTuple,
    marketingWalletUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AutoNukeLP()": TypedContractEvent<
      AutoNukeLPEvent.InputTuple,
      AutoNukeLPEvent.OutputTuple,
      AutoNukeLPEvent.OutputObject
    >;
    AutoNukeLP: TypedContractEvent<
      AutoNukeLPEvent.InputTuple,
      AutoNukeLPEvent.OutputTuple,
      AutoNukeLPEvent.OutputObject
    >;

    "BoughtEarly(address)": TypedContractEvent<
      BoughtEarlyEvent.InputTuple,
      BoughtEarlyEvent.OutputTuple,
      BoughtEarlyEvent.OutputObject
    >;
    BoughtEarly: TypedContractEvent<
      BoughtEarlyEvent.InputTuple,
      BoughtEarlyEvent.OutputTuple,
      BoughtEarlyEvent.OutputObject
    >;

    "ETHRNWalletUpdated(address,address)": TypedContractEvent<
      ETHRNWalletUpdatedEvent.InputTuple,
      ETHRNWalletUpdatedEvent.OutputTuple,
      ETHRNWalletUpdatedEvent.OutputObject
    >;
    ETHRNWalletUpdated: TypedContractEvent<
      ETHRNWalletUpdatedEvent.InputTuple,
      ETHRNWalletUpdatedEvent.OutputTuple,
      ETHRNWalletUpdatedEvent.OutputObject
    >;

    "ExcludeFromTaxs(address,bool)": TypedContractEvent<
      ExcludeFromTaxsEvent.InputTuple,
      ExcludeFromTaxsEvent.OutputTuple,
      ExcludeFromTaxsEvent.OutputObject
    >;
    ExcludeFromTaxs: TypedContractEvent<
      ExcludeFromTaxsEvent.InputTuple,
      ExcludeFromTaxsEvent.OutputTuple,
      ExcludeFromTaxsEvent.OutputObject
    >;

    "ManualNukeLP()": TypedContractEvent<
      ManualNukeLPEvent.InputTuple,
      ManualNukeLPEvent.OutputTuple,
      ManualNukeLPEvent.OutputObject
    >;
    ManualNukeLP: TypedContractEvent<
      ManualNukeLPEvent.InputTuple,
      ManualNukeLPEvent.OutputTuple,
      ManualNukeLPEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetAutomatedMarketMakerPair(address,bool)": TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;
    SetAutomatedMarketMakerPair: TypedContractEvent<
      SetAutomatedMarketMakerPairEvent.InputTuple,
      SetAutomatedMarketMakerPairEvent.OutputTuple,
      SetAutomatedMarketMakerPairEvent.OutputObject
    >;

    "SwapAndLiquify(uint256,uint256,uint256)": TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;
    SwapAndLiquify: TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateUniswapV2Router(address,address)": TypedContractEvent<
      UpdateUniswapV2RouterEvent.InputTuple,
      UpdateUniswapV2RouterEvent.OutputTuple,
      UpdateUniswapV2RouterEvent.OutputObject
    >;
    UpdateUniswapV2Router: TypedContractEvent<
      UpdateUniswapV2RouterEvent.InputTuple,
      UpdateUniswapV2RouterEvent.OutputTuple,
      UpdateUniswapV2RouterEvent.OutputObject
    >;

    "marketingWalletUpdated(address,address)": TypedContractEvent<
      marketingWalletUpdatedEvent.InputTuple,
      marketingWalletUpdatedEvent.OutputTuple,
      marketingWalletUpdatedEvent.OutputObject
    >;
    marketingWalletUpdated: TypedContractEvent<
      marketingWalletUpdatedEvent.InputTuple,
      marketingWalletUpdatedEvent.OutputTuple,
      marketingWalletUpdatedEvent.OutputObject
    >;
  };
}
