/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CyberQuoreCoinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURN_ADDRESS"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklist"
      | "burnCounter"
      | "charityWallet"
      | "cyberWallet"
      | "decimals"
      | "holders"
      | "isBlacklisted"
      | "isExcludedFromFees"
      | "isExcludedFromLimits"
      | "liquidityWallet"
      | "mainTokenWallet"
      | "marketingWallet"
      | "maxWalletLimit"
      | "mint"
      | "name"
      | "openTrading"
      | "owner"
      | "symbol"
      | "taxBurn"
      | "taxCharity"
      | "taxCyber"
      | "taxLiquidity"
      | "taxReflection"
      | "teamWallet"
      | "totalBurned"
      | "totalSupply"
      | "tradingOpen"
      | "transfer"
      | "transferFrom"
      | "unlockTime"
      | "updateFees"
      | "withdrawETH"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;

  encodeFunctionData(
    functionFragment: "BURN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "burnCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "charityWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cyberWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "holders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainTokenWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxBurn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxCharity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "taxCyber", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxReflection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "charityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cyberWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainTokenWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxCharity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxCyber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CyberQuoreCoin extends BaseContract {
  connect(runner?: ContractRunner | null): CyberQuoreCoin;
  waitForDeployment(): Promise<this>;

  interface: CyberQuoreCoinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURN_ADDRESS: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  blacklist: TypedContractMethod<
    [account: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  burnCounter: TypedContractMethod<[], [bigint], "view">;

  charityWallet: TypedContractMethod<[], [string], "view">;

  cyberWallet: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  holders: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  isBlacklisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isExcludedFromFees: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedFromLimits: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  liquidityWallet: TypedContractMethod<[], [string], "view">;

  mainTokenWallet: TypedContractMethod<[], [string], "view">;

  marketingWallet: TypedContractMethod<[], [string], "view">;

  maxWalletLimit: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  openTrading: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  taxBurn: TypedContractMethod<[], [bigint], "view">;

  taxCharity: TypedContractMethod<[], [bigint], "view">;

  taxCyber: TypedContractMethod<[], [bigint], "view">;

  taxLiquidity: TypedContractMethod<[], [bigint], "view">;

  taxReflection: TypedContractMethod<[], [bigint], "view">;

  teamWallet: TypedContractMethod<[], [string], "view">;

  totalBurned: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingOpen: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unlockTime: TypedContractMethod<[], [bigint], "view">;

  updateFees: TypedContractMethod<
    [
      _reflection: BigNumberish,
      _charity: BigNumberish,
      _cyber: BigNumberish,
      _liquidity: BigNumberish,
      _burn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURN_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklist"
  ): TypedContractMethod<
    [account: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "charityWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cyberWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "holders"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromFees"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromLimits"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mainTokenWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketingWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxWalletLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxBurn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taxCharity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taxCyber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taxLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taxReflection"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBurned"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [
      _reflection: BigNumberish,
      _charity: BigNumberish,
      _cyber: BigNumberish,
      _liquidity: BigNumberish,
      _burn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
