/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SubscriptionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getExpiry"
      | "isSubscribed"
      | "owner"
      | "subscribe"
      | "subscriptionDuration"
      | "subscriptionPrice"
      | "updateParameters"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ParametersUpdated" | "Subscribed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscriptionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateParameters",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ParametersUpdatedEvent {
  export type InputTuple = [newPrice: BigNumberish, newDuration: BigNumberish];
  export type OutputTuple = [newPrice: bigint, newDuration: bigint];
  export interface OutputObject {
    newPrice: bigint;
    newDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [user: AddressLike, expiresAt: BigNumberish];
  export type OutputTuple = [user: string, expiresAt: bigint];
  export interface OutputObject {
    user: string;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionManager extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionManager;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getExpiry: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isSubscribed: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  subscribe: TypedContractMethod<[], [void], "payable">;

  subscriptionDuration: TypedContractMethod<[], [bigint], "view">;

  subscriptionPrice: TypedContractMethod<[], [bigint], "view">;

  updateParameters: TypedContractMethod<
    [_price: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getExpiry"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isSubscribed"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "subscriptionDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "subscriptionPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateParameters"
  ): TypedContractMethod<
    [_price: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ParametersUpdated"
  ): TypedContractEvent<
    ParametersUpdatedEvent.InputTuple,
    ParametersUpdatedEvent.OutputTuple,
    ParametersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;

  filters: {
    "ParametersUpdated(uint256,uint256)": TypedContractEvent<
      ParametersUpdatedEvent.InputTuple,
      ParametersUpdatedEvent.OutputTuple,
      ParametersUpdatedEvent.OutputObject
    >;
    ParametersUpdated: TypedContractEvent<
      ParametersUpdatedEvent.InputTuple,
      ParametersUpdatedEvent.OutputTuple,
      ParametersUpdatedEvent.OutputObject
    >;

    "Subscribed(address,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
  };
}
