/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface I2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "A1"
      | "B1"
      | "D1"
      | "N1"
      | "S1"
      | "T1"
      | "T2"
      | "T3"
      | "T4"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "E1" | "E2"): EventFragment;

  encodeFunctionData(
    functionFragment: "A1",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "B1", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "D1", values?: undefined): string;
  encodeFunctionData(functionFragment: "N1", values?: undefined): string;
  encodeFunctionData(functionFragment: "S1", values?: undefined): string;
  encodeFunctionData(functionFragment: "T1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "T2",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "T3",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "T4",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "A1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "B1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "D1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "N1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "S1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T4", data: BytesLike): Result;
}

export namespace E1Event {
  export type InputTuple = [A: AddressLike, B: AddressLike, C: BigNumberish];
  export type OutputTuple = [A: string, B: string, C: bigint];
  export interface OutputObject {
    A: string;
    B: string;
    C: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace E2Event {
  export type InputTuple = [D: AddressLike, E: AddressLike, F: BigNumberish];
  export type OutputTuple = [D: string, E: string, F: bigint];
  export interface OutputObject {
    D: string;
    E: string;
    F: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface I2 extends BaseContract {
  connect(runner?: ContractRunner | null): I2;
  waitForDeployment(): Promise<this>;

  interface: I2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  A1: TypedContractMethod<[J: AddressLike, K: AddressLike], [bigint], "view">;

  B1: TypedContractMethod<[G: AddressLike], [bigint], "view">;

  D1: TypedContractMethod<[], [bigint], "view">;

  N1: TypedContractMethod<[], [string], "view">;

  S1: TypedContractMethod<[], [string], "view">;

  T1: TypedContractMethod<[], [bigint], "view">;

  T2: TypedContractMethod<
    [H: AddressLike, I: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  T3: TypedContractMethod<
    [L: AddressLike, M: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  T4: TypedContractMethod<
    [N: AddressLike, O: AddressLike, P: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "A1"
  ): TypedContractMethod<[J: AddressLike, K: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "B1"
  ): TypedContractMethod<[G: AddressLike], [bigint], "view">;
  getFunction(nameOrSignature: "D1"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "N1"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "S1"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "T1"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "T2"
  ): TypedContractMethod<
    [H: AddressLike, I: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "T3"
  ): TypedContractMethod<
    [L: AddressLike, M: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "T4"
  ): TypedContractMethod<
    [N: AddressLike, O: AddressLike, P: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "E1"
  ): TypedContractEvent<
    E1Event.InputTuple,
    E1Event.OutputTuple,
    E1Event.OutputObject
  >;
  getEvent(
    key: "E2"
  ): TypedContractEvent<
    E2Event.InputTuple,
    E2Event.OutputTuple,
    E2Event.OutputObject
  >;

  filters: {
    "E1(address,address,uint256)": TypedContractEvent<
      E1Event.InputTuple,
      E1Event.OutputTuple,
      E1Event.OutputObject
    >;
    E1: TypedContractEvent<
      E1Event.InputTuple,
      E1Event.OutputTuple,
      E1Event.OutputObject
    >;

    "E2(address,address,uint256)": TypedContractEvent<
      E2Event.InputTuple,
      E2Event.OutputTuple,
      E2Event.OutputObject
    >;
    E2: TypedContractEvent<
      E2Event.InputTuple,
      E2Event.OutputTuple,
      E2Event.OutputObject
    >;
  };
}
