/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StructsLibrary {
  export type TokenInfoStruct = {
    _name: string;
    _symbol: string;
    _supply: BigNumberish;
    _teamTokenPercent: BigNumberish;
    _teamTokensWallet: AddressLike;
    _maxWallets: BigNumberish[];
    _buyTaxes: BigNumberish[];
    _sellTaxes: BigNumberish[];
    _incubatorWallet: AddressLike;
    _taxWallet1: AddressLike;
    _taxWallet1Split: BigNumberish;
    _taxWallet2: AddressLike;
    _isWhitelistLaunch: boolean;
    lpLockDurationInMonths: BigNumberish;
    _vestTeamTokens: boolean;
  };

  export type TokenInfoStructOutput = [
    _name: string,
    _symbol: string,
    _supply: bigint,
    _teamTokenPercent: bigint,
    _teamTokensWallet: string,
    _maxWallets: bigint[],
    _buyTaxes: bigint[],
    _sellTaxes: bigint[],
    _incubatorWallet: string,
    _taxWallet1: string,
    _taxWallet1Split: bigint,
    _taxWallet2: string,
    _isWhitelistLaunch: boolean,
    lpLockDurationInMonths: bigint,
    _vestTeamTokens: boolean
  ] & {
    _name: string;
    _symbol: string;
    _supply: bigint;
    _teamTokenPercent: bigint;
    _teamTokensWallet: string;
    _maxWallets: bigint[];
    _buyTaxes: bigint[];
    _sellTaxes: bigint[];
    _incubatorWallet: string;
    _taxWallet1: string;
    _taxWallet1Split: bigint;
    _taxWallet2: string;
    _isWhitelistLaunch: boolean;
    lpLockDurationInMonths: bigint;
    _vestTeamTokens: boolean;
  };
}

export interface SparkStarterTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DIVISOR"
      | "WETH"
      | "addLp"
      | "allowance"
      | "approve"
      | "athMcap"
      | "balanceOf"
      | "buyBackAndBurn"
      | "buyTax"
      | "computeMcap"
      | "decimals"
      | "decreaseAllowance"
      | "dexRouter"
      | "dynamicTaxOn"
      | "enableTrading"
      | "exemptFromFees"
      | "exemptFromLimits"
      | "increaseAllowance"
      | "incubatorAddress"
      | "isAMMPair"
      | "lastSwapBackBlock"
      | "launchTimestamp"
      | "limited"
      | "lpPair"
      | "maxWallet"
      | "name"
      | "owner"
      | "platformAddress"
      | "priceFeed"
      | "renounceOwnership"
      | "sellTax"
      | "startingMcap"
      | "swapTokensAtAmt"
      | "symbol"
      | "taxAddress1"
      | "taxAddress1Split"
      | "taxAddress2"
      | "teamTokenAddress"
      | "tokenInfo"
      | "tokenLocker"
      | "totalSupply"
      | "tradingAllowed"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "vaultAddress"
      | "vaultUnlocked"
      | "whitelistActive"
      | "whitelistStartTime"
      | "whitelistWallets"
      | "whitelistedAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Approval" | "OwnershipTransferred" | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "addLp", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "athMcap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackAndBurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeMcap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dynamicTaxOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exemptFromFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exemptFromLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAMMPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSwapBackBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "limited", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startingMcap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxAddress1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxAddress1Split",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxAddress2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenLocker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistWallets",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addLp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "athMcap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBackAndBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeMcap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynamicTaxOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptFromLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAMMPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSwapBackBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limited", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingMcap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxAddress1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxAddress1Split",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxAddress2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAddress",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SparkStarterToken extends BaseContract {
  connect(runner?: ContractRunner | null): SparkStarterToken;
  waitForDeployment(): Promise<this>;

  interface: SparkStarterTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  addLp: TypedContractMethod<[to: AddressLike], [void], "payable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  athMcap: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  buyBackAndBurn: TypedContractMethod<
    [minOutput: BigNumberish],
    [void],
    "payable"
  >;

  buyTax: TypedContractMethod<[], [bigint], "view">;

  computeMcap: TypedContractMethod<
    [],
    [[bigint, bigint] & { mcapInUSD: bigint; mcapInEth: bigint }],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  dexRouter: TypedContractMethod<[], [string], "view">;

  dynamicTaxOn: TypedContractMethod<[], [boolean], "view">;

  enableTrading: TypedContractMethod<[], [void], "nonpayable">;

  exemptFromFees: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  exemptFromLimits: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  incubatorAddress: TypedContractMethod<[], [string], "view">;

  isAMMPair: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastSwapBackBlock: TypedContractMethod<[], [bigint], "view">;

  launchTimestamp: TypedContractMethod<[], [bigint], "view">;

  limited: TypedContractMethod<[], [boolean], "view">;

  lpPair: TypedContractMethod<[], [string], "view">;

  maxWallet: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformAddress: TypedContractMethod<[], [string], "view">;

  priceFeed: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellTax: TypedContractMethod<[], [bigint], "view">;

  startingMcap: TypedContractMethod<[], [bigint], "view">;

  swapTokensAtAmt: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  taxAddress1: TypedContractMethod<[], [string], "view">;

  taxAddress1Split: TypedContractMethod<[], [bigint], "view">;

  taxAddress2: TypedContractMethod<[], [string], "view">;

  teamTokenAddress: TypedContractMethod<[], [string], "view">;

  tokenInfo: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        boolean
      ] & {
        _name: string;
        _symbol: string;
        _supply: bigint;
        _teamTokenPercent: bigint;
        _teamTokensWallet: string;
        _incubatorWallet: string;
        _taxWallet1: string;
        _taxWallet1Split: bigint;
        _taxWallet2: string;
        _isWhitelistLaunch: boolean;
        lpLockDurationInMonths: bigint;
        _vestTeamTokens: boolean;
      }
    ],
    "view"
  >;

  tokenLocker: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingAllowed: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vaultAddress: TypedContractMethod<[], [string], "view">;

  vaultUnlocked: TypedContractMethod<[], [boolean], "view">;

  whitelistActive: TypedContractMethod<[], [boolean], "view">;

  whitelistStartTime: TypedContractMethod<[], [bigint], "view">;

  whitelistWallets: TypedContractMethod<
    [wallets: AddressLike[], _whitelist: boolean],
    [void],
    "nonpayable"
  >;

  whitelistedAddress: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addLp"
  ): TypedContractMethod<[to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "athMcap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyBackAndBurn"
  ): TypedContractMethod<[minOutput: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "buyTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeMcap"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { mcapInUSD: bigint; mcapInEth: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dexRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dynamicTaxOn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "enableTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exemptFromFees"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "exemptFromLimits"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "incubatorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAMMPair"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastSwapBackBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "launchTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "limited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lpPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxWallet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startingMcap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapTokensAtAmt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxAddress1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxAddress1Split"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taxAddress2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenInfo"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        boolean
      ] & {
        _name: string;
        _symbol: string;
        _supply: bigint;
        _teamTokenPercent: bigint;
        _teamTokensWallet: string;
        _incubatorWallet: string;
        _taxWallet1: string;
        _taxWallet1Split: bigint;
        _taxWallet2: string;
        _isWhitelistLaunch: boolean;
        lpLockDurationInMonths: bigint;
        _vestTeamTokens: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenLocker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingAllowed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vaultAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultUnlocked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistWallets"
  ): TypedContractMethod<
    [wallets: AddressLike[], _whitelist: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistedAddress"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
