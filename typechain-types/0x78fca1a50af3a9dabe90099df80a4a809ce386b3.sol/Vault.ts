/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DIVISOR"
      | "approveTaxesFullyForTeam"
      | "ethDispersed"
      | "ethReceived"
      | "ethRelease"
      | "forceBuyBack"
      | "incubatorAddress"
      | "incubatorFullApproved"
      | "incubatorRejected"
      | "overrideAddress"
      | "parentToken"
      | "tokenRelease"
      | "tokensDispersed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveTaxesFullyForTeam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethDispersed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceBuyBack",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorFullApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incubatorRejected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overrideAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensDispersed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTaxesFullyForTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethDispersed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceBuyBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorFullApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incubatorRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensDispersed",
    data: BytesLike
  ): Result;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  approveTaxesFullyForTeam: TypedContractMethod<[], [void], "nonpayable">;

  ethDispersed: TypedContractMethod<[], [bigint], "view">;

  ethReceived: TypedContractMethod<[], [bigint], "view">;

  ethRelease: TypedContractMethod<
    [ethAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  forceBuyBack: TypedContractMethod<
    [ethAmount: BigNumberish, minOutput: BigNumberish],
    [void],
    "nonpayable"
  >;

  incubatorAddress: TypedContractMethod<[], [string], "view">;

  incubatorFullApproved: TypedContractMethod<[], [boolean], "view">;

  incubatorRejected: TypedContractMethod<[], [boolean], "view">;

  overrideAddress: TypedContractMethod<[], [string], "view">;

  parentToken: TypedContractMethod<[], [string], "view">;

  tokenRelease: TypedContractMethod<
    [tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokensDispersed: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveTaxesFullyForTeam"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ethDispersed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ethReceived"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ethRelease"
  ): TypedContractMethod<[ethAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceBuyBack"
  ): TypedContractMethod<
    [ethAmount: BigNumberish, minOutput: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "incubatorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "incubatorFullApproved"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "incubatorRejected"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "overrideAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenRelease"
  ): TypedContractMethod<[tokenAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokensDispersed"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
