/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addressInfo"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "dexPair"
      | "dhAdd"
      | "dhPerm"
      | "dhSetMlt"
      | "dhToggle"
      | "exemptFees"
      | "exemptLimit"
      | "feeWalletDevChange"
      | "feeWalletMktChange"
      | "feesBuyChange"
      | "feesSellChange"
      | "feesTransferChange"
      | "increaseAllowance"
      | "limitsInfo"
      | "maxTxLimitChange"
      | "maxWalletLimitChange"
      | "name"
      | "newAnti"
      | "openTrading"
      | "owner"
      | "receiversInfo"
      | "removeLimits"
      | "renounceOwnership"
      | "swapbackChange"
      | "swapbackInfo"
      | "symbol"
      | "taxeInfo"
      | "totalSupply"
      | "tradingEnabled"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferTaxInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BuyFeeUpdated"
      | "DisabledTransferDelay"
      | "ExcludeFromFees"
      | "ExcludeFromLimits"
      | "LimitsRemoved"
      | "MarketingWalletUpdated"
      | "MaxTxUpdated"
      | "MaxWalletUpdated"
      | "OwnershipTransferred"
      | "ProjectWalletUpdated"
      | "SellFeeUpdated"
      | "SetDexPair"
      | "SwapbackSettingsUpdated"
      | "TradingEnabled"
      | "Transfer"
      | "UpdateUniswapV2Router"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addressInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dexPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dhAdd",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "dhPerm", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "dhSetMlt",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "dhToggle", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "exemptFees",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exemptLimit",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "feeWalletDevChange",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeWalletMktChange",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feesBuyChange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feesSellChange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feesTransferChange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxLimitChange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletLimitChange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "newAnti", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "openTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiversInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapbackChange",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapbackInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxeInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTaxInfo",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addressInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dhAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dhPerm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dhSetMlt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dhToggle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exemptFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exemptLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeWalletDevChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeWalletMktChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesBuyChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesSellChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesTransferChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limitsInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTxLimitChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletLimitChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAnti", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiversInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapbackChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapbackInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxeInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTaxInfo",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyFeeUpdatedEvent {
  export type InputTuple = [
    buyTaxTotal: BigNumberish,
    buyMarketingTax: BigNumberish,
    buyProjectTax: BigNumberish
  ];
  export type OutputTuple = [
    buyTaxTotal: bigint,
    buyMarketingTax: bigint,
    buyProjectTax: bigint
  ];
  export interface OutputObject {
    buyTaxTotal: bigint;
    buyMarketingTax: bigint;
    buyProjectTax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisabledTransferDelayEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromFeesEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromLimitsEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitsRemovedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketingWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTxUpdatedEvent {
  export type InputTuple = [maxTx: BigNumberish];
  export type OutputTuple = [maxTx: bigint];
  export interface OutputObject {
    maxTx: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletUpdatedEvent {
  export type InputTuple = [maxWallet: BigNumberish];
  export type OutputTuple = [maxWallet: bigint];
  export interface OutputObject {
    maxWallet: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike, oldWallet: AddressLike];
  export type OutputTuple = [newWallet: string, oldWallet: string];
  export interface OutputObject {
    newWallet: string;
    oldWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellFeeUpdatedEvent {
  export type InputTuple = [
    sellTaxTotal: BigNumberish,
    sellMarketingTax: BigNumberish,
    sellProjectTax: BigNumberish
  ];
  export type OutputTuple = [
    sellTaxTotal: bigint,
    sellMarketingTax: bigint,
    sellProjectTax: bigint
  ];
  export interface OutputObject {
    sellTaxTotal: bigint;
    sellMarketingTax: bigint;
    sellProjectTax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDexPairEvent {
  export type InputTuple = [pair: AddressLike, value: boolean];
  export type OutputTuple = [pair: string, value: boolean];
  export interface OutputObject {
    pair: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapbackSettingsUpdatedEvent {
  export type InputTuple = [
    enabled: boolean,
    swapBackValueMin: BigNumberish,
    swapBackValueMax: BigNumberish
  ];
  export type OutputTuple = [
    enabled: boolean,
    swapBackValueMin: bigint,
    swapBackValueMax: bigint
  ];
  export interface OutputObject {
    enabled: boolean;
    swapBackValueMin: bigint;
    swapBackValueMax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingEnabledEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateUniswapV2RouterEvent {
  export type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
  export type OutputTuple = [newAddress: string, oldAddress: string];
  export interface OutputObject {
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Cony extends BaseContract {
  connect(runner?: ContractRunner | null): Cony;
  waitForDeployment(): Promise<this>;

  interface: ConyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addressInfo: TypedContractMethod<
    [_target: AddressLike],
    [
      [boolean, boolean, boolean] & {
        _transferTaxExempt: boolean;
        _transferLimitExempt: boolean;
        _automatedMarketMakerPairs: boolean;
      }
    ],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  dexPair: TypedContractMethod<[], [string], "view">;

  dhAdd: TypedContractMethod<
    [adr: AddressLike, _isFh: boolean],
    [void],
    "nonpayable"
  >;

  dhPerm: TypedContractMethod<[_canChange: boolean], [void], "nonpayable">;

  dhSetMlt: TypedContractMethod<
    [addresses: AddressLike[], _isFh: boolean],
    [void],
    "nonpayable"
  >;

  dhToggle: TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;

  exemptFees: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  exemptLimit: TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;

  feeWalletDevChange: TypedContractMethod<
    [newDevWal: AddressLike],
    [void],
    "nonpayable"
  >;

  feeWalletMktChange: TypedContractMethod<
    [newMktWal: AddressLike],
    [void],
    "nonpayable"
  >;

  feesBuyChange: TypedContractMethod<
    [_marketingFee: BigNumberish, _devFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  feesSellChange: TypedContractMethod<
    [_marketingFee: BigNumberish, _devFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  feesTransferChange: TypedContractMethod<
    [_marketingFee: BigNumberish, _devFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  limitsInfo: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        _limitsEnabled: boolean;
        _maxWallet: bigint;
        _maxTx: bigint;
      }
    ],
    "view"
  >;

  maxTxLimitChange: TypedContractMethod<
    [newMaxTxLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  maxWalletLimitChange: TypedContractMethod<
    [newMaxWalletLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  newAnti: TypedContractMethod<[_anti: boolean], [void], "nonpayable">;

  openTrading: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  receiversInfo: TypedContractMethod<
    [],
    [[string, string] & { _marketingWallet: string; _projectWallet: string }],
    "view"
  >;

  removeLimits: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  swapbackChange: TypedContractMethod<
    [_enable: boolean, _min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapbackInfo: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        _swapbackEnabled: boolean;
        _swapBackValueMin: bigint;
        _swapBackValueMax: bigint;
      }
    ],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  taxeInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        _buyTaxTotal: bigint;
        _buyMarketingTax: bigint;
        _buyProjectTax: bigint;
        _sellTaxTotal: bigint;
        _sellMarketingTax: bigint;
        _sellProjectTax: bigint;
      }
    ],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingEnabled: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferTaxInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _transferTaxTotal: bigint;
        _transferMarketingTax: bigint;
        _transferProjectTax: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addressInfo"
  ): TypedContractMethod<
    [_target: AddressLike],
    [
      [boolean, boolean, boolean] & {
        _transferTaxExempt: boolean;
        _transferLimitExempt: boolean;
        _automatedMarketMakerPairs: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dexPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dhAdd"
  ): TypedContractMethod<
    [adr: AddressLike, _isFh: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dhPerm"
  ): TypedContractMethod<[_canChange: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dhSetMlt"
  ): TypedContractMethod<
    [addresses: AddressLike[], _isFh: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dhToggle"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exemptFees"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exemptLimit"
  ): TypedContractMethod<
    [updAds: AddressLike, isEx: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeWalletDevChange"
  ): TypedContractMethod<[newDevWal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeWalletMktChange"
  ): TypedContractMethod<[newMktWal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feesBuyChange"
  ): TypedContractMethod<
    [_marketingFee: BigNumberish, _devFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feesSellChange"
  ): TypedContractMethod<
    [_marketingFee: BigNumberish, _devFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feesTransferChange"
  ): TypedContractMethod<
    [_marketingFee: BigNumberish, _devFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "limitsInfo"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        _limitsEnabled: boolean;
        _maxWallet: bigint;
        _maxTx: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxTxLimitChange"
  ): TypedContractMethod<[newMaxTxLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxWalletLimitChange"
  ): TypedContractMethod<
    [newMaxWalletLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newAnti"
  ): TypedContractMethod<[_anti: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiversInfo"
  ): TypedContractMethod<
    [],
    [[string, string] & { _marketingWallet: string; _projectWallet: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLimits"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapbackChange"
  ): TypedContractMethod<
    [_enable: boolean, _min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapbackInfo"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        _swapbackEnabled: boolean;
        _swapBackValueMin: bigint;
        _swapBackValueMax: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxeInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        _buyTaxTotal: bigint;
        _buyMarketingTax: bigint;
        _buyProjectTax: bigint;
        _sellTaxTotal: bigint;
        _sellMarketingTax: bigint;
        _sellProjectTax: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferTaxInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _transferTaxTotal: bigint;
        _transferMarketingTax: bigint;
        _transferProjectTax: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BuyFeeUpdated"
  ): TypedContractEvent<
    BuyFeeUpdatedEvent.InputTuple,
    BuyFeeUpdatedEvent.OutputTuple,
    BuyFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DisabledTransferDelay"
  ): TypedContractEvent<
    DisabledTransferDelayEvent.InputTuple,
    DisabledTransferDelayEvent.OutputTuple,
    DisabledTransferDelayEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromFees"
  ): TypedContractEvent<
    ExcludeFromFeesEvent.InputTuple,
    ExcludeFromFeesEvent.OutputTuple,
    ExcludeFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromLimits"
  ): TypedContractEvent<
    ExcludeFromLimitsEvent.InputTuple,
    ExcludeFromLimitsEvent.OutputTuple,
    ExcludeFromLimitsEvent.OutputObject
  >;
  getEvent(
    key: "LimitsRemoved"
  ): TypedContractEvent<
    LimitsRemovedEvent.InputTuple,
    LimitsRemovedEvent.OutputTuple,
    LimitsRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MarketingWalletUpdated"
  ): TypedContractEvent<
    MarketingWalletUpdatedEvent.InputTuple,
    MarketingWalletUpdatedEvent.OutputTuple,
    MarketingWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTxUpdated"
  ): TypedContractEvent<
    MaxTxUpdatedEvent.InputTuple,
    MaxTxUpdatedEvent.OutputTuple,
    MaxTxUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletUpdated"
  ): TypedContractEvent<
    MaxWalletUpdatedEvent.InputTuple,
    MaxWalletUpdatedEvent.OutputTuple,
    MaxWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectWalletUpdated"
  ): TypedContractEvent<
    ProjectWalletUpdatedEvent.InputTuple,
    ProjectWalletUpdatedEvent.OutputTuple,
    ProjectWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SellFeeUpdated"
  ): TypedContractEvent<
    SellFeeUpdatedEvent.InputTuple,
    SellFeeUpdatedEvent.OutputTuple,
    SellFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SetDexPair"
  ): TypedContractEvent<
    SetDexPairEvent.InputTuple,
    SetDexPairEvent.OutputTuple,
    SetDexPairEvent.OutputObject
  >;
  getEvent(
    key: "SwapbackSettingsUpdated"
  ): TypedContractEvent<
    SwapbackSettingsUpdatedEvent.InputTuple,
    SwapbackSettingsUpdatedEvent.OutputTuple,
    SwapbackSettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TradingEnabled"
  ): TypedContractEvent<
    TradingEnabledEvent.InputTuple,
    TradingEnabledEvent.OutputTuple,
    TradingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateUniswapV2Router"
  ): TypedContractEvent<
    UpdateUniswapV2RouterEvent.InputTuple,
    UpdateUniswapV2RouterEvent.OutputTuple,
    UpdateUniswapV2RouterEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BuyFeeUpdated(uint256,uint256,uint256)": TypedContractEvent<
      BuyFeeUpdatedEvent.InputTuple,
      BuyFeeUpdatedEvent.OutputTuple,
      BuyFeeUpdatedEvent.OutputObject
    >;
    BuyFeeUpdated: TypedContractEvent<
      BuyFeeUpdatedEvent.InputTuple,
      BuyFeeUpdatedEvent.OutputTuple,
      BuyFeeUpdatedEvent.OutputObject
    >;

    "DisabledTransferDelay(uint256)": TypedContractEvent<
      DisabledTransferDelayEvent.InputTuple,
      DisabledTransferDelayEvent.OutputTuple,
      DisabledTransferDelayEvent.OutputObject
    >;
    DisabledTransferDelay: TypedContractEvent<
      DisabledTransferDelayEvent.InputTuple,
      DisabledTransferDelayEvent.OutputTuple,
      DisabledTransferDelayEvent.OutputObject
    >;

    "ExcludeFromFees(address,bool)": TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;
    ExcludeFromFees: TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;

    "ExcludeFromLimits(address,bool)": TypedContractEvent<
      ExcludeFromLimitsEvent.InputTuple,
      ExcludeFromLimitsEvent.OutputTuple,
      ExcludeFromLimitsEvent.OutputObject
    >;
    ExcludeFromLimits: TypedContractEvent<
      ExcludeFromLimitsEvent.InputTuple,
      ExcludeFromLimitsEvent.OutputTuple,
      ExcludeFromLimitsEvent.OutputObject
    >;

    "LimitsRemoved(uint256)": TypedContractEvent<
      LimitsRemovedEvent.InputTuple,
      LimitsRemovedEvent.OutputTuple,
      LimitsRemovedEvent.OutputObject
    >;
    LimitsRemoved: TypedContractEvent<
      LimitsRemovedEvent.InputTuple,
      LimitsRemovedEvent.OutputTuple,
      LimitsRemovedEvent.OutputObject
    >;

    "MarketingWalletUpdated(address,address)": TypedContractEvent<
      MarketingWalletUpdatedEvent.InputTuple,
      MarketingWalletUpdatedEvent.OutputTuple,
      MarketingWalletUpdatedEvent.OutputObject
    >;
    MarketingWalletUpdated: TypedContractEvent<
      MarketingWalletUpdatedEvent.InputTuple,
      MarketingWalletUpdatedEvent.OutputTuple,
      MarketingWalletUpdatedEvent.OutputObject
    >;

    "MaxTxUpdated(uint256)": TypedContractEvent<
      MaxTxUpdatedEvent.InputTuple,
      MaxTxUpdatedEvent.OutputTuple,
      MaxTxUpdatedEvent.OutputObject
    >;
    MaxTxUpdated: TypedContractEvent<
      MaxTxUpdatedEvent.InputTuple,
      MaxTxUpdatedEvent.OutputTuple,
      MaxTxUpdatedEvent.OutputObject
    >;

    "MaxWalletUpdated(uint256)": TypedContractEvent<
      MaxWalletUpdatedEvent.InputTuple,
      MaxWalletUpdatedEvent.OutputTuple,
      MaxWalletUpdatedEvent.OutputObject
    >;
    MaxWalletUpdated: TypedContractEvent<
      MaxWalletUpdatedEvent.InputTuple,
      MaxWalletUpdatedEvent.OutputTuple,
      MaxWalletUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectWalletUpdated(address,address)": TypedContractEvent<
      ProjectWalletUpdatedEvent.InputTuple,
      ProjectWalletUpdatedEvent.OutputTuple,
      ProjectWalletUpdatedEvent.OutputObject
    >;
    ProjectWalletUpdated: TypedContractEvent<
      ProjectWalletUpdatedEvent.InputTuple,
      ProjectWalletUpdatedEvent.OutputTuple,
      ProjectWalletUpdatedEvent.OutputObject
    >;

    "SellFeeUpdated(uint256,uint256,uint256)": TypedContractEvent<
      SellFeeUpdatedEvent.InputTuple,
      SellFeeUpdatedEvent.OutputTuple,
      SellFeeUpdatedEvent.OutputObject
    >;
    SellFeeUpdated: TypedContractEvent<
      SellFeeUpdatedEvent.InputTuple,
      SellFeeUpdatedEvent.OutputTuple,
      SellFeeUpdatedEvent.OutputObject
    >;

    "SetDexPair(address,bool)": TypedContractEvent<
      SetDexPairEvent.InputTuple,
      SetDexPairEvent.OutputTuple,
      SetDexPairEvent.OutputObject
    >;
    SetDexPair: TypedContractEvent<
      SetDexPairEvent.InputTuple,
      SetDexPairEvent.OutputTuple,
      SetDexPairEvent.OutputObject
    >;

    "SwapbackSettingsUpdated(bool,uint256,uint256)": TypedContractEvent<
      SwapbackSettingsUpdatedEvent.InputTuple,
      SwapbackSettingsUpdatedEvent.OutputTuple,
      SwapbackSettingsUpdatedEvent.OutputObject
    >;
    SwapbackSettingsUpdated: TypedContractEvent<
      SwapbackSettingsUpdatedEvent.InputTuple,
      SwapbackSettingsUpdatedEvent.OutputTuple,
      SwapbackSettingsUpdatedEvent.OutputObject
    >;

    "TradingEnabled(uint256)": TypedContractEvent<
      TradingEnabledEvent.InputTuple,
      TradingEnabledEvent.OutputTuple,
      TradingEnabledEvent.OutputObject
    >;
    TradingEnabled: TypedContractEvent<
      TradingEnabledEvent.InputTuple,
      TradingEnabledEvent.OutputTuple,
      TradingEnabledEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateUniswapV2Router(address,address)": TypedContractEvent<
      UpdateUniswapV2RouterEvent.InputTuple,
      UpdateUniswapV2RouterEvent.OutputTuple,
      UpdateUniswapV2RouterEvent.OutputObject
    >;
    UpdateUniswapV2Router: TypedContractEvent<
      UpdateUniswapV2RouterEvent.InputTuple,
      UpdateUniswapV2RouterEvent.OutputTuple,
      UpdateUniswapV2RouterEvent.OutputObject
    >;
  };
}
