/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface NeuroXOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "autoBurnAmount"
      | "canMint"
      | "getAutoBurnAmount"
      | "getDailyMintLimit"
      | "getFounderAllocation"
      | "getMiningReward"
      | "getNodeReward"
      | "getReferralReward"
      | "getStakingReward"
      | "getTransferFee"
      | "getWalletScore"
      | "isWhale"
      | "logTransfer"
      | "miningRewards"
      | "nodeRewards"
      | "owner"
      | "referralRewards"
      | "setAutoBurnAmount"
      | "setMiningReward"
      | "setNodeReward"
      | "setReferralReward"
      | "setStakingReward"
      | "setTransferFeeBase"
      | "setWalletScore"
      | "stakingRewards"
      | "transferFeeBase"
      | "transferOwnership"
      | "walletScores"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "autoBurnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAutoBurnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDailyMintLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFounderAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhale",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "miningRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoBurnAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMiningReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferFeeBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeeBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "walletScores",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "autoBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAutoBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailyMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFounderAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWhale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "logTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "miningRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiningReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferFeeBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFeeBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletScores",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NeuroXOracle extends BaseContract {
  connect(runner?: ContractRunner | null): NeuroXOracle;
  waitForDeployment(): Promise<this>;

  interface: NeuroXOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  autoBurnAmount: TypedContractMethod<[], [bigint], "view">;

  canMint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  getAutoBurnAmount: TypedContractMethod<[], [bigint], "view">;

  getDailyMintLimit: TypedContractMethod<[], [bigint], "view">;

  getFounderAllocation: TypedContractMethod<[], [bigint], "view">;

  getMiningReward: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getNodeReward: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getReferralReward: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getStakingReward: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getTransferFee: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getWalletScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isWhale: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  logTransfer: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "view"
  >;

  miningRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  nodeRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  referralRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setAutoBurnAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMiningReward: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNodeReward: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReferralReward: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakingReward: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransferFeeBase: TypedContractMethod<
    [fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWalletScore: TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakingRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferFeeBase: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  walletScores: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "autoBurnAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canMint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAutoBurnAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDailyMintLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFounderAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMiningReward"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNodeReward"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReferralReward"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakingReward"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransferFee"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWalletScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isWhale"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "logTransfer"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "miningRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nodeRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAutoBurnAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMiningReward"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNodeReward"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferralReward"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStakingReward"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferFeeBase"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWalletScore"
  ): TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakingRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFeeBase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "walletScores"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
