/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AbstractETHRegController_intInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "available"
      | "commitments"
      | "maxCommitmentAge"
      | "minCommitmentAge"
      | "nameWrapper"
      | "rentPrice"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "available", values: [string]): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCommitmentAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCommitmentAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nameWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentPrice",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCommitmentAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCommitmentAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentPrice", data: BytesLike): Result;
}

export interface AbstractETHRegController_int extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractETHRegController_int;
  waitForDeployment(): Promise<this>;

  interface: AbstractETHRegController_intInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  available: TypedContractMethod<[name: string], [boolean], "view">;

  commitments: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  maxCommitmentAge: TypedContractMethod<[], [bigint], "view">;

  minCommitmentAge: TypedContractMethod<[], [bigint], "view">;

  nameWrapper: TypedContractMethod<[], [string], "view">;

  rentPrice: TypedContractMethod<
    [name: string, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "available"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCommitmentAge"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCommitmentAge"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nameWrapper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rentPrice"
  ): TypedContractMethod<
    [name: string, duration: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
