/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AbstractBaseR_intInterface extends Interface {
  getFunction(nameOrSignature: "baseNode"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NameMigrated" | "NameRegistered" | "NameRenewed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "baseNode", values?: undefined): string;

  decodeFunctionResult(functionFragment: "baseNode", data: BytesLike): Result;
}

export namespace NameMigratedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    expires: BigNumberish
  ];
  export type OutputTuple = [id: bigint, owner: string, expires: bigint];
  export interface OutputObject {
    id: bigint;
    owner: string;
    expires: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameRegisteredEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    expires: BigNumberish
  ];
  export type OutputTuple = [id: bigint, owner: string, expires: bigint];
  export interface OutputObject {
    id: bigint;
    owner: string;
    expires: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameRenewedEvent {
  export type InputTuple = [id: BigNumberish, expires: BigNumberish];
  export type OutputTuple = [id: bigint, expires: bigint];
  export interface OutputObject {
    id: bigint;
    expires: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AbstractBaseR_int extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractBaseR_int;
  waitForDeployment(): Promise<this>;

  interface: AbstractBaseR_intInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseNode: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseNode"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NameMigrated"
  ): TypedContractEvent<
    NameMigratedEvent.InputTuple,
    NameMigratedEvent.OutputTuple,
    NameMigratedEvent.OutputObject
  >;
  getEvent(
    key: "NameRegistered"
  ): TypedContractEvent<
    NameRegisteredEvent.InputTuple,
    NameRegisteredEvent.OutputTuple,
    NameRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NameRenewed"
  ): TypedContractEvent<
    NameRenewedEvent.InputTuple,
    NameRenewedEvent.OutputTuple,
    NameRenewedEvent.OutputObject
  >;

  filters: {
    "NameMigrated(uint256,address,uint256)": TypedContractEvent<
      NameMigratedEvent.InputTuple,
      NameMigratedEvent.OutputTuple,
      NameMigratedEvent.OutputObject
    >;
    NameMigrated: TypedContractEvent<
      NameMigratedEvent.InputTuple,
      NameMigratedEvent.OutputTuple,
      NameMigratedEvent.OutputObject
    >;

    "NameRegistered(uint256,address,uint256)": TypedContractEvent<
      NameRegisteredEvent.InputTuple,
      NameRegisteredEvent.OutputTuple,
      NameRegisteredEvent.OutputObject
    >;
    NameRegistered: TypedContractEvent<
      NameRegisteredEvent.InputTuple,
      NameRegisteredEvent.OutputTuple,
      NameRegisteredEvent.OutputObject
    >;

    "NameRenewed(uint256,uint256)": TypedContractEvent<
      NameRenewedEvent.InputTuple,
      NameRenewedEvent.OutputTuple,
      NameRenewedEvent.OutputObject
    >;
    NameRenewed: TypedContractEvent<
      NameRenewedEvent.InputTuple,
      NameRenewedEvent.OutputTuple,
      NameRenewedEvent.OutputObject
    >;
  };
}
