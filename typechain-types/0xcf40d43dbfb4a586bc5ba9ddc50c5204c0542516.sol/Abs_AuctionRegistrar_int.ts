/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface Abs_AuctionRegistrar_intInterface extends Interface {
  getFunction(
    nameOrSignature: "entries" | "startAuction_ge0" | "state_pln"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "entries", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "startAuction_ge0",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "state_pln",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startAuction_ge0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state_pln", data: BytesLike): Result;
}

export interface Abs_AuctionRegistrar_int extends BaseContract {
  connect(runner?: ContractRunner | null): Abs_AuctionRegistrar_int;
  waitForDeployment(): Promise<this>;

  interface: Abs_AuctionRegistrar_intInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  entries: TypedContractMethod<
    [_hash: BytesLike],
    [[bigint, string, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  startAuction_ge0: TypedContractMethod<
    [_hash: BytesLike, revealP: BigNumberish],
    [void],
    "payable"
  >;

  state_pln: TypedContractMethod<[_hash: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "entries"
  ): TypedContractMethod<
    [_hash: BytesLike],
    [[bigint, string, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "startAuction_ge0"
  ): TypedContractMethod<
    [_hash: BytesLike, revealP: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "state_pln"
  ): TypedContractMethod<[_hash: BytesLike], [bigint], "view">;

  filters: {};
}
