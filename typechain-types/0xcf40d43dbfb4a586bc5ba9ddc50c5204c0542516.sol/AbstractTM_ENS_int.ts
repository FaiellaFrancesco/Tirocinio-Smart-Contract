/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AbstractTM_ENS_intInterface extends Interface {
  getFunction(
    nameOrSignature: "owner" | "recordExists" | "setOwner" | "setSubnodeRecord"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "NewOwner"
      | "NewResolver"
      | "NewTTL"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "recordExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnodeRecord",
    values: [BytesLike, BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeRecord",
    data: BytesLike
  ): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewOwnerEvent {
  export type InputTuple = [
    node: BytesLike,
    label: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [node: string, label: string, owner: string];
  export interface OutputObject {
    node: string;
    label: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewResolverEvent {
  export type InputTuple = [node: BytesLike, resolver: AddressLike];
  export type OutputTuple = [node: string, resolver: string];
  export interface OutputObject {
    node: string;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTTLEvent {
  export type InputTuple = [node: BytesLike, ttl: BigNumberish];
  export type OutputTuple = [node: string, ttl: bigint];
  export interface OutputObject {
    node: string;
    ttl: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [node: BytesLike, owner: AddressLike];
  export type OutputTuple = [node: string, owner: string];
  export interface OutputObject {
    node: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AbstractTM_ENS_int extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractTM_ENS_int;
  waitForDeployment(): Promise<this>;

  interface: AbstractTM_ENS_intInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[node: BytesLike], [string], "view">;

  recordExists: TypedContractMethod<[node: BytesLike], [boolean], "view">;

  setOwner: TypedContractMethod<
    [node: BytesLike, set_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  setSubnodeRecord: TypedContractMethod<
    [
      node: BytesLike,
      label: BytesLike,
      sub_owner: AddressLike,
      sub_resolver: AddressLike,
      sub_ttl: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "recordExists"
  ): TypedContractMethod<[node: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<
    [node: BytesLike, set_owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubnodeRecord"
  ): TypedContractMethod<
    [
      node: BytesLike,
      label: BytesLike,
      sub_owner: AddressLike,
      sub_resolver: AddressLike,
      sub_ttl: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "NewOwner"
  ): TypedContractEvent<
    NewOwnerEvent.InputTuple,
    NewOwnerEvent.OutputTuple,
    NewOwnerEvent.OutputObject
  >;
  getEvent(
    key: "NewResolver"
  ): TypedContractEvent<
    NewResolverEvent.InputTuple,
    NewResolverEvent.OutputTuple,
    NewResolverEvent.OutputObject
  >;
  getEvent(
    key: "NewTTL"
  ): TypedContractEvent<
    NewTTLEvent.InputTuple,
    NewTTLEvent.OutputTuple,
    NewTTLEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "NewOwner(bytes32,bytes32,address)": TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;
    NewOwner: TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;

    "NewResolver(bytes32,address)": TypedContractEvent<
      NewResolverEvent.InputTuple,
      NewResolverEvent.OutputTuple,
      NewResolverEvent.OutputObject
    >;
    NewResolver: TypedContractEvent<
      NewResolverEvent.InputTuple,
      NewResolverEvent.OutputTuple,
      NewResolverEvent.OutputObject
    >;

    "NewTTL(bytes32,uint64)": TypedContractEvent<
      NewTTLEvent.InputTuple,
      NewTTLEvent.OutputTuple,
      NewTTLEvent.OutputObject
    >;
    NewTTL: TypedContractEvent<
      NewTTLEvent.InputTuple,
      NewTTLEvent.OutputTuple,
      NewTTLEvent.OutputObject
    >;

    "Transfer(bytes32,address)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
