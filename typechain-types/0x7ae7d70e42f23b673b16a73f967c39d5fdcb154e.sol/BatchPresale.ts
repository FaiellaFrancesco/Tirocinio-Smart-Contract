/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BatchPresaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStage"
      | "buyToken"
      | "convertEthToUsd"
      | "flipPresaleActive"
      | "getCurrentStageIdActive"
      | "getEthToUsdPrice"
      | "maxStage"
      | "owner"
      | "paymentAddress"
      | "presaleActive"
      | "presaleTokenAmount"
      | "priceFeed"
      | "renounceOwnership"
      | "setMaxStage"
      | "setPaymentAddress"
      | "setPresaleTokenAmount"
      | "setPriceFeed"
      | "setStage"
      | "setToken"
      | "setTotalSold"
      | "stages"
      | "token"
      | "tokenMetadata"
      | "totalSold"
      | "transferOwnership"
      | "withdrawFunds"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "addStage",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertEthToUsd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flipPresaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStageIdActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToUsdPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxStage", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresaleTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStage",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertEthToUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flipPresaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStageIdActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToUsdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPresaleTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchPresale extends BaseContract {
  connect(runner?: ContractRunner | null): BatchPresale;
  waitForDeployment(): Promise<this>;

  interface: BatchPresaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStage: TypedContractMethod<
    [
      _bonus: BigNumberish,
      _price: BigNumberish,
      _start: BigNumberish,
      _end: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  buyToken: TypedContractMethod<[_amount: BigNumberish], [void], "payable">;

  convertEthToUsd: TypedContractMethod<
    [ethAmount: BigNumberish],
    [bigint],
    "view"
  >;

  flipPresaleActive: TypedContractMethod<[], [void], "nonpayable">;

  getCurrentStageIdActive: TypedContractMethod<[], [bigint], "view">;

  getEthToUsdPrice: TypedContractMethod<[], [bigint], "view">;

  maxStage: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentAddress: TypedContractMethod<[], [string], "view">;

  presaleActive: TypedContractMethod<[], [boolean], "view">;

  presaleTokenAmount: TypedContractMethod<[], [bigint], "view">;

  priceFeed: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMaxStage: TypedContractMethod<
    [_maxStage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPaymentAddress: TypedContractMethod<
    [_paymentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setPresaleTokenAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [_priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setStage: TypedContractMethod<
    [
      _id: BigNumberish,
      _bonus: BigNumberish,
      _price: BigNumberish,
      _start: BigNumberish,
      _end: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  setTotalSold: TypedContractMethod<
    [_totalSold: BigNumberish],
    [void],
    "nonpayable"
  >;

  stages: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        bonus: bigint;
        price: bigint;
        start: bigint;
        end: bigint;
      }
    ],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokenMetadata: TypedContractMethod<[], [string], "view">;

  totalSold: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  withdrawTokens: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStage"
  ): TypedContractMethod<
    [
      _bonus: BigNumberish,
      _price: BigNumberish,
      _start: BigNumberish,
      _end: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyToken"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "convertEthToUsd"
  ): TypedContractMethod<[ethAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "flipPresaleActive"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentStageIdActive"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthToUsdPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxStage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "presaleActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "presaleTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxStage"
  ): TypedContractMethod<[_maxStage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaymentAddress"
  ): TypedContractMethod<[_paymentAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPresaleTokenAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStage"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _bonus: BigNumberish,
      _price: BigNumberish,
      _start: BigNumberish,
      _end: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalSold"
  ): TypedContractMethod<[_totalSold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stages"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        bonus: bigint;
        price: bigint;
        start: bigint;
        end: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenMetadata"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
