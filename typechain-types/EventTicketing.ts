/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EventTicketingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTicket"
      | "markTicketUsed"
      | "maxCapacity"
      | "owner"
      | "ownsTicket"
      | "refundTicket"
      | "refundTicketsBulk"
      | "ticketPrice"
      | "ticketsSold"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TicketPurchased" | "TicketRefunded" | "TicketUsed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "buyTicket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "markTicketUsed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownsTicket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundTicket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundTicketsBulk",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsSold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markTicketUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownsTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundTicketsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [buyer: AddressLike];
  export type OutputTuple = [buyer: string];
  export interface OutputObject {
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketRefundedEvent {
  export type InputTuple = [buyer: AddressLike];
  export type OutputTuple = [buyer: string];
  export interface OutputObject {
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketUsedEvent {
  export type InputTuple = [buyer: AddressLike];
  export type OutputTuple = [buyer: string];
  export interface OutputObject {
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventTicketing extends BaseContract {
  connect(runner?: ContractRunner | null): EventTicketing;
  waitForDeployment(): Promise<this>;

  interface: EventTicketingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTicket: TypedContractMethod<[], [void], "payable">;

  markTicketUsed: TypedContractMethod<
    [buyer: AddressLike],
    [void],
    "nonpayable"
  >;

  maxCapacity: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownsTicket: TypedContractMethod<[buyer: AddressLike], [boolean], "view">;

  refundTicket: TypedContractMethod<[buyer: AddressLike], [void], "nonpayable">;

  refundTicketsBulk: TypedContractMethod<
    [buyers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  ticketsSold: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "markTicketUsed"
  ): TypedContractMethod<[buyer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxCapacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownsTicket"
  ): TypedContractMethod<[buyer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "refundTicket"
  ): TypedContractMethod<[buyer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundTicketsBulk"
  ): TypedContractMethod<[buyers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticketsSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "TicketRefunded"
  ): TypedContractEvent<
    TicketRefundedEvent.InputTuple,
    TicketRefundedEvent.OutputTuple,
    TicketRefundedEvent.OutputObject
  >;
  getEvent(
    key: "TicketUsed"
  ): TypedContractEvent<
    TicketUsedEvent.InputTuple,
    TicketUsedEvent.OutputTuple,
    TicketUsedEvent.OutputObject
  >;

  filters: {
    "TicketPurchased(address)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;

    "TicketRefunded(address)": TypedContractEvent<
      TicketRefundedEvent.InputTuple,
      TicketRefundedEvent.OutputTuple,
      TicketRefundedEvent.OutputObject
    >;
    TicketRefunded: TypedContractEvent<
      TicketRefundedEvent.InputTuple,
      TicketRefundedEvent.OutputTuple,
      TicketRefundedEvent.OutputObject
    >;

    "TicketUsed(address)": TypedContractEvent<
      TicketUsedEvent.InputTuple,
      TicketUsedEvent.OutputTuple,
      TicketUsedEvent.OutputObject
    >;
    TicketUsed: TypedContractEvent<
      TicketUsedEvent.InputTuple,
      TicketUsedEvent.OutputTuple,
      TicketUsedEvent.OutputObject
    >;
  };
}
