/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TardoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "increaseAllowance"
      | "manualSwap"
      | "maxTxSet"
      | "maxWalletSet"
      | "name"
      | "openTrading"
      | "owner"
      | "readView"
      | "removeLimitsNow"
      | "removeStuckBalance"
      | "renounceOwnership"
      | "setFeeAddress"
      | "setFeeExempt"
      | "setSBValues"
      | "symbol"
      | "taxesSet"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ExcludedFromFee"
      | "FeeReceiverUpdated"
      | "FeesUpdated"
      | "LimitsRemoved"
      | "MaxTxAmountUpdated"
      | "MaxWalletAmountUpdated"
      | "OwnershipTransferred"
      | "SwapbackUpdated"
      | "TradingOpened"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "manualSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "readView", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLimitsNow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStuckBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExempt",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSBValues",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxesSet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manualSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxTxSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readView", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimitsNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStuckBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSBValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxesSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludedFromFeeEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceiverUpdatedEvent {
  export type InputTuple = [_taxWallet: AddressLike];
  export type OutputTuple = [_taxWallet: string];
  export interface OutputObject {
    _taxWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [buyFee: BigNumberish, sellFee: BigNumberish];
  export type OutputTuple = [buyFee: bigint, sellFee: bigint];
  export interface OutputObject {
    buyFee: bigint;
    sellFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitsRemovedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTxAmountUpdatedEvent {
  export type InputTuple = [_txAmountLimit: BigNumberish];
  export type OutputTuple = [_txAmountLimit: bigint];
  export interface OutputObject {
    _txAmountLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletAmountUpdatedEvent {
  export type InputTuple = [_walletAmountLimit: BigNumberish];
  export type OutputTuple = [_walletAmountLimit: bigint];
  export interface OutputObject {
    _walletAmountLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapbackUpdatedEvent {
  export type InputTuple = [
    _swapbackMin: BigNumberish,
    _swapbackMax: BigNumberish
  ];
  export type OutputTuple = [_swapbackMin: bigint, _swapbackMax: bigint];
  export interface OutputObject {
    _swapbackMin: bigint;
    _swapbackMax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingOpenedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tardo extends BaseContract {
  connect(runner?: ContractRunner | null): Tardo;
  waitForDeployment(): Promise<this>;

  interface: TardoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  manualSwap: TypedContractMethod<[], [void], "nonpayable">;

  maxTxSet: TypedContractMethod<[newTxMax: BigNumberish], [void], "nonpayable">;

  maxWalletSet: TypedContractMethod<
    [newWalletMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  openTrading: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  readView: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        _buyFee: bigint;
        _sellFee: bigint;
        maxTxAmount: bigint;
        maxWalletSize: bigint;
        taxSwapThreshold: bigint;
        maxTaxSwap: bigint;
      }
    ],
    "view"
  >;

  removeLimitsNow: TypedContractMethod<[], [void], "nonpayable">;

  removeStuckBalance: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeAddress: TypedContractMethod<
    [newRcv: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeExempt: TypedContractMethod<
    [target: AddressLike, exempt: boolean],
    [void],
    "nonpayable"
  >;

  setSBValues: TypedContractMethod<
    [taxSwapThreshold: BigNumberish, maxTaxSwap: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  taxesSet: TypedContractMethod<
    [feeBuy: BigNumberish, feeSell: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manualSwap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxTxSet"
  ): TypedContractMethod<[newTxMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxWalletSet"
  ): TypedContractMethod<[newWalletMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readView"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        _buyFee: bigint;
        _sellFee: bigint;
        maxTxAmount: bigint;
        maxWalletSize: bigint;
        taxSwapThreshold: bigint;
        maxTaxSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLimitsNow"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeStuckBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeAddress"
  ): TypedContractMethod<[newRcv: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeExempt"
  ): TypedContractMethod<
    [target: AddressLike, exempt: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSBValues"
  ): TypedContractMethod<
    [taxSwapThreshold: BigNumberish, maxTaxSwap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxesSet"
  ): TypedContractMethod<
    [feeBuy: BigNumberish, feeSell: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ExcludedFromFee"
  ): TypedContractEvent<
    ExcludedFromFeeEvent.InputTuple,
    ExcludedFromFeeEvent.OutputTuple,
    ExcludedFromFeeEvent.OutputObject
  >;
  getEvent(
    key: "FeeReceiverUpdated"
  ): TypedContractEvent<
    FeeReceiverUpdatedEvent.InputTuple,
    FeeReceiverUpdatedEvent.OutputTuple,
    FeeReceiverUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LimitsRemoved"
  ): TypedContractEvent<
    LimitsRemovedEvent.InputTuple,
    LimitsRemovedEvent.OutputTuple,
    LimitsRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTxAmountUpdated"
  ): TypedContractEvent<
    MaxTxAmountUpdatedEvent.InputTuple,
    MaxTxAmountUpdatedEvent.OutputTuple,
    MaxTxAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletAmountUpdated"
  ): TypedContractEvent<
    MaxWalletAmountUpdatedEvent.InputTuple,
    MaxWalletAmountUpdatedEvent.OutputTuple,
    MaxWalletAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapbackUpdated"
  ): TypedContractEvent<
    SwapbackUpdatedEvent.InputTuple,
    SwapbackUpdatedEvent.OutputTuple,
    SwapbackUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TradingOpened"
  ): TypedContractEvent<
    TradingOpenedEvent.InputTuple,
    TradingOpenedEvent.OutputTuple,
    TradingOpenedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ExcludedFromFee(address,bool)": TypedContractEvent<
      ExcludedFromFeeEvent.InputTuple,
      ExcludedFromFeeEvent.OutputTuple,
      ExcludedFromFeeEvent.OutputObject
    >;
    ExcludedFromFee: TypedContractEvent<
      ExcludedFromFeeEvent.InputTuple,
      ExcludedFromFeeEvent.OutputTuple,
      ExcludedFromFeeEvent.OutputObject
    >;

    "FeeReceiverUpdated(address)": TypedContractEvent<
      FeeReceiverUpdatedEvent.InputTuple,
      FeeReceiverUpdatedEvent.OutputTuple,
      FeeReceiverUpdatedEvent.OutputObject
    >;
    FeeReceiverUpdated: TypedContractEvent<
      FeeReceiverUpdatedEvent.InputTuple,
      FeeReceiverUpdatedEvent.OutputTuple,
      FeeReceiverUpdatedEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "LimitsRemoved()": TypedContractEvent<
      LimitsRemovedEvent.InputTuple,
      LimitsRemovedEvent.OutputTuple,
      LimitsRemovedEvent.OutputObject
    >;
    LimitsRemoved: TypedContractEvent<
      LimitsRemovedEvent.InputTuple,
      LimitsRemovedEvent.OutputTuple,
      LimitsRemovedEvent.OutputObject
    >;

    "MaxTxAmountUpdated(uint256)": TypedContractEvent<
      MaxTxAmountUpdatedEvent.InputTuple,
      MaxTxAmountUpdatedEvent.OutputTuple,
      MaxTxAmountUpdatedEvent.OutputObject
    >;
    MaxTxAmountUpdated: TypedContractEvent<
      MaxTxAmountUpdatedEvent.InputTuple,
      MaxTxAmountUpdatedEvent.OutputTuple,
      MaxTxAmountUpdatedEvent.OutputObject
    >;

    "MaxWalletAmountUpdated(uint256)": TypedContractEvent<
      MaxWalletAmountUpdatedEvent.InputTuple,
      MaxWalletAmountUpdatedEvent.OutputTuple,
      MaxWalletAmountUpdatedEvent.OutputObject
    >;
    MaxWalletAmountUpdated: TypedContractEvent<
      MaxWalletAmountUpdatedEvent.InputTuple,
      MaxWalletAmountUpdatedEvent.OutputTuple,
      MaxWalletAmountUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SwapbackUpdated(uint256,uint256)": TypedContractEvent<
      SwapbackUpdatedEvent.InputTuple,
      SwapbackUpdatedEvent.OutputTuple,
      SwapbackUpdatedEvent.OutputObject
    >;
    SwapbackUpdated: TypedContractEvent<
      SwapbackUpdatedEvent.InputTuple,
      SwapbackUpdatedEvent.OutputTuple,
      SwapbackUpdatedEvent.OutputObject
    >;

    "TradingOpened()": TypedContractEvent<
      TradingOpenedEvent.InputTuple,
      TradingOpenedEvent.OutputTuple,
      TradingOpenedEvent.OutputObject
    >;
    TradingOpened: TypedContractEvent<
      TradingOpenedEvent.InputTuple,
      TradingOpenedEvent.OutputTuple,
      TradingOpenedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
