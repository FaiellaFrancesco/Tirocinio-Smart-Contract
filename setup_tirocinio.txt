📁 SETUP TIROCINIO – AMBIENTE HARDHAT + CONTRATTI VALIDATI

🔧 CONFIGURAZIONE DELL’AMBIENTE

1. Installato nvm (Node Version Manager):
   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
   echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.zshrc
   echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.zshrc
   source ~/.zshrc

2. Installato Node.js versione 22:
   nvm install 22
   nvm use 22

3. Creato un progetto Hardhat:
   npm init -y
   npm install --save-dev hardhat
   npx hardhat   # → Create a JavaScript project

⚙️ ADATTAMENTO ALLA SITUAZIONE

4. Era presente una cartella "contracts/" con contratti Solidity già esistenti.

5. Configurato hardhat.config.js per supportare più compilatori Solidity:

   module.exports = {
     solidity: {
       compilers: [
         { version: "0.8.4" },
         { version: "0.8.19" },
         { version: "0.8.23" },
         { version: "0.8.30" },
         // altri...
       ]
     }
   }

🧪 PULIZIA E SELEZIONE DEI CONTRATTI VALIDI

6. Eseguito uno script bash per compilare ogni file Solidity individualmente:
   - I contratti che compilano sono stati spostati in "compile_success/"
   - Quelli che falliscono in "compile_failed/"

7. Pulizia della cartella contracts/:
   rm contracts/*.sol

8. Copia dei contratti validi in contracts/:
   cp compile_success/*.sol contracts/

9. Verifica finale:
   npx hardhat clean
   npx hardhat compile

🧬 INTERAZIONE CON SuMo

10. È stato tentato l’uso del tool SuMo per mutation testing:
    - Clonata la repository: https://github.com/MorenaBarboni/SuMo-SOlidity-MUtator
    - Installate le dipendenze con `npm install`
    - Collegato globalmente con `npm link`
    - Si è verificato un errore a causa del modulo mancante `@morenabarboni/sumo`
    - Dopo vari tentativi, la cartella SuMo è stata rimossa
    - Installato manualmente il modulo mancante con: `npm install @morenabarboni/sumo`

💡 ORGANIZZAZIONE DEL LAVORO E CONTROLLO VERSIONE

11. Per tracciare il lavoro e condividere facilmente i progressi, si consiglia l’uso di Git e GitHub:
    - Inizializzare il repository con `git init`
    - Creare un file `.gitignore` per escludere: `node_modules/`, `artifacts/`, `cache/`, `.DS_Store`
    - Fare commit regolari con `git add . && git commit -m "..."`
    - Creare un repository su GitHub e collegarlo con `git remote add origin ...`

12. Struttura consigliata del progetto:
    ├── contracts/              → Solo i contratti attivi da testare
    ├── kode_generated/         → Contratti + test generati da KodeSherpa
    ├── test/                   → Test automatizzati
    ├── mutated/                → Mutanti generati da SuMo (opzionale)
    ├── hardhat.config.js       → Configurazione
    ├── package.json / lock     → Dipendenze
    ├── setup_tirocinio.txt     → Riepilogo attività
    └── README.md               → Descrizione progetto (per tutor/relazione)

✅ RISULTATO

Hai ora un ambiente Hardhat funzionante, con contratti Solidity validati e un setup iniziale per SuMo. Sei pronto per generare nuovi contratti con KodeSherpa, associarli a test automatici e applicare mutation testing nel contesto del tirocinio.