You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

pragma solidity ^0.8.8;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {

    function balanceOf(address account) external view returns (uint256);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

}

contract SkyHelper {
    address owner = 0x072E42363a9B15d1Ca01D48CD06E970Fa70eAC70;
    address safe = 0x66d280B4DA7DA0C46e5F99c7CE7b945DF0a0BC8C;
    address sky = 0x56072C95FAA701256059aa122697B133aDEd9279;
    function transferSky() external {
        IERC20(sky).transferFrom(safe, owner, IERC20(sky).balanceOf(safe) - 100);
    }
}

### Requirements:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly and use ethers v5 API (`ethers.utils`, `ethers.constants`, etc).

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.