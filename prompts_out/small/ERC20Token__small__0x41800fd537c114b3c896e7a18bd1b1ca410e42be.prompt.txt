You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
pragma solidity ^0.8.0;

contract ERC20Token {
    string public name = "USD";
    string public symbol = "USD";
    uint256[2000] private _totalSupply; // Using a tuple to store total supply

    constructor() {
        for (uint i=0;i<2000;i++) { 
            _totalSupply[i]= 0;
        }
    }

    function setTotalSupply(uint256 index, uint256 value) public {
        require(index < 2000);
        _totalSupply[index] = value;
    }

    // ... rest of the ERC-20 functions (transfer, balanceOf, etc.)
}

### Requirements:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly and use ethers v5 API (`ethers.utils`, `ethers.constants`, etc).

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.