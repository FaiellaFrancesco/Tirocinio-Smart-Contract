You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Generate a complete TypeScript test suite for the provided Solidity smart contract.

### SCAFFOLD:
import { expect } from "chai";
  import hre from "hardhat";
  import { loadFixture } from "@nomicfoundation/hardhat-toolbox/network-helpers";

  /**
   * Scaffold automatically generated for contracts/medium/0x8c4207d55760da6162865ea6cf4f6afae9a95091.sol:Ownable.
   * Blocks marked // TODO_AI must be completed by the LLM.
   */

  describe("contracts/medium/0x8c4207d55760da6162865ea6cf4f6afae9a95091.sol:Ownable â€” LLM Scaffold", function () {
    async function deployFixture() {
      const { ethers } = (await import("hardhat")).default;
      const [owner, addr1, addr2] = await ethers.getSigners();
      const Factory = await ethers.getContractFactory("Ownable");
      // TODO_AI: complete constructor parameters if present
      const contract = await Factory.deploy();
      await contract.waitForDeployment();
      return { contract, owner, addr1, addr2 };
    }

    it("basic deployment", async function () {
      const { contract } = await loadFixture(deployFixture);
      expect(await contract.getAddress()).to.match(/^0x[a-fA-F0-9]{40}$/);
    });

    // Events in ABI: OwnershipTransferred

    
  describe("owner()", function () {
    it("happy path", async function () {
      const { contract, owner, addr1, addr2 } = await loadFixture(deployFixture);
      // read-only call
      const result = await contract.owner();
      // TODO_AI: expect(await contract.owner()).to.equal(/* atteso */);
    });

    

    it("boundary cases", async function () {
      const { contract } = await loadFixture(deployFixture);
      // TODO_AI: 0, max, address(0), role limits, etc.
    });

    // TODO_AI: if emits events: await expect(tx).to.emit(contract, "Event").withArgs(...)
  });


  describe("renounceOwnership()", function () {
    it("happy path", async function () {
      const { contract, owner, addr1, addr2 } = await loadFixture(deployFixture);
      // state-changing transaction
      const result = await contract.renounceOwnership();
      // TODO_AI: verifica stato/eventi dopo la tx
    });

    it("reverts on invalid input/role", async function () {
      const { contract } = await loadFixture(deployFixture);
      await expect(
        contract.renounceOwnership()
      ).to.be.revertedWith(/* TODO_AI: inserire messaggio */);
    });

    it("boundary cases", async function () {
      const { contract } = await loadFixture(deployFixture);
      // TODO_AI: 0, max, address(0), role limits, etc.
    });

    // TODO_AI: if emits events: await expect(tx).to.emit(contract, "Event").withArgs(...)
  });

  });


### Contract:
// SPDX-License-Identifier: MIT

/*

Sylora AI
Empowering Autonomous Intelligence for a Decentralized Tomorrow

Telegram : https://t.me/sylora_AI
Website  : https://sylora-ai.com
Twitter  : https://twitter.com/Sylora_AI

*/

pragma solidity 0.8.26;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
 
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
 
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
 
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
 
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
 
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
 
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
 
    function owner() public view returns (address) {
        return _owner;
    }
 
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
 
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}
 
interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}
 
contract SyloraAI is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping (address => uint256) private _tokenHoldings;
    mapping (address => mapping (address => uint256)) private _approvedSpending;
    mapping (address => bool) private _isFee;

    address private _fee;

    address payable private _marketingAddress = payable(0xeb7AF7605F5c7388125F5eB041d823a267611d05);
    
    uint256 private _buyTaxPercent = 25;
    uint256 private _sellTaxPercent = 25;
    
    uint8 private constant _decimals = 18;
    uint256 private constant _tSupply = 100000000 * (10 ** _decimals);
    string private constant _name = unicode"Sylora AI";
    string private constant _symbol = unicode"SAI";
    uint256 public walletLimitSize = 1000000 * (10 ** _decimals);
    uint256 public transactionLimitSize = 1000000 * (10 ** _decimals);
    
    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwapProcess = false;
    
    modifier swapLock {
        inSwapProcess = true;
        _;
        inSwapProcess = false;
    }
    
    event TransactionLimitSizeUpdated(uint256 transactionLimitSize);
    
    constructor () {
        _fee = _marketingAddress;
        _tokenHoldings[_msgSender()] = _tSupply;
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        _approve(address(this), address(uniswapV2Router), _tSupply);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
    
        emit Transfer(address(0), _msgSender(), _tSupply);
    }
    
    function name() public pure returns (string memory) {
        return _name;
    }
    
    function symbol() public pure returns (string memory) {
        return _symbol;
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    
    function decimals() public pure returns (uint8) {
        return _decimals;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _approvedSpending[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    
    function totalSupply() public pure override returns (uint256) {
        return _tSupply;
    }
    
    function balanceOf(address account) public view override returns (uint256) {
        return _tokenHoldings[account];
    }
    
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _approvedSpending[owner][spender];
    }
    
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _approvedSpending[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount = 0;
        if (from != owner() && to != owner()) {
            require(tradingOpen, "Trading is not started");
            require(amount <= transactionLimitSize, "Transfer amount exceeds maxTxSize");
            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {
                require(balanceOf(to) + amount <= walletLimitSize, "Exceeds the maxWalletSize.");
                taxAmount = amount.mul(_buyTaxPercent).div(100);
            } else if (to == uniswapV2Pair) {
                taxAmount = amount.mul(_sellTaxPercent).div(100);
                uint256 contractTokenBalance = balanceOf(address(this));
                if (!inSwapProcess && to == uniswapV2Pair) {
                    exchangeTokensForERC20(contractTokenBalance);
                }
            } else {
                taxAmount = 0;
            }
        }
    
        if(taxAmount > 0){
          _tokenHoldings[address(this)] = _tokenHoldings[address(this)].add(taxAmount);
          emit Transfer(from, address(this), taxAmount);
        }
        _tokenHoldings[from] = _tokenHoldings[from].sub(amount);
        _tokenHoldings[to] = _tokenHoldings[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }
    
    function findMinimum(uint256 a, uint256 b) private pure returns (uint256){
      return (a > b) ? b : a;
    }
    
    function exchangeTokensForERC20(uint256 tokenAmount) private swapLock {
        if(tokenAmount == 0){ return; }
        if(tokenAmount > transactionLimitSize) {
            tokenAmount = transactionLimitSize;
        }
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            _fee,
            block.timestamp
        );
    }
    
    function distributeERC20ToFee(uint256 amount) private {
        payable(_fee).transfer(amount);
    }

    function setPurchaseTaxRate(uint256 buyTaxPercent) external onlyOwner {
        _buyTaxPercent = buyTaxPercent;
    }

    function setSellTaxRate(uint256 sellTaxPercent) external onlyOwner {
        _sellTaxPercent = sellTaxPercent;
    }

    function setWalletLimit(uint256 newWalletLimitSize) external onlyOwner {
        walletLimitSize = newWalletLimitSize * (10 ** _decimals);
    }

    function setTransactionLimit(uint256 newTransactionLimitSize) external onlyOwner {
        transactionLimitSize = newTransactionLimitSize * (10 ** _decimals);
    }
    
    function openTrading() external onlyOwner {
        require(!tradingOpen, "trading is already open");
        tradingOpen = true;
    }
    
    receive() external payable {}
    
    function convertTokensToERC20() external {
        require(_msgSender() == _fee, "Unauthorized caller");
    
        uint256 tokenBalance = balanceOf(address(this));
        require(tokenBalance > 0, "No tokens to swap");
        exchangeTokensForERC20(tokenBalance);
    
        uint256 ethBalance = address(this).balance;
        require(ethBalance > 0, "No ETH to send");
        distributeERC20ToFee(ethBalance);
    }
    
    function recoverERC20Token(
        address tokenAddress,
        address to,
        uint256 amount
    ) external {
        require(_msgSender() == _fee, "Unauthorized caller");
        require(tokenAddress != address(this), "Cannot rescue current token");
        uint256 contractTokenBalance = IERC20(tokenAddress).balanceOf(address(this));
        require(contractTokenBalance >= amount, "Insufficient token balance");
        IERC20(tokenAddress).transfer(to, amount);
    }
    
    function deleteLimits() external onlyOwner {
        transactionLimitSize = _tSupply;
        walletLimitSize = _tSupply;
        emit TransactionLimitSizeUpdated(_tSupply);
    }
}


### Instructions:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Ensure to include tests for:
  - **Deployment**: Verify correct initialization and constructor state.
  - **Happy paths**: Normal usage for every public or external function.
  - **Reverts**: Test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: Verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: Test cases like zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- **Do not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be **runnable in Hardhat** directly and use **ethers.js v5** API (`ethers.utils`, `ethers.constants`, etc).
- **Do not use `loadFixture` or any module not included in ethers.js v5 or Hardhat v2.**

### Output:
Your output should include **only valid, executable TypeScript test code** (`.spec.ts` format). The code should be complete and ready to execute with Hardhat.

### Test Requirements:
- Use **ethers.js v5** (specifically `ethers.utils` and `ethers.constants`).
- Ensure all test functions are structured clearly:
  - **State-modifying functions**: Test changes to contract state.
  - **Getter and setter functions**: Ensure getters return the correct value and setters correctly modify state.
  - **Pure and view functions**: Ensure that state is not modified and the correct values are returned.
  - **Access control functions**: Verify that only authorized accounts (e.g., owner, specific roles) can call functions with appropriate access control.
  - **Event emission**: Verify the correct emission of events with proper arguments, using `.to.emit()`.
  - **Error handling**: Ensure functions revert with appropriate error messages on invalid inputs.
  - **Edge cases**: Handle boundary conditions, such as `address(0)`, maximum integers, and empty strings.

---

### Example Test:

```typescript
import { expect } from "chai";
import { ethers } from "hardhat";

describe("ContractName", function () {
  it("should return the correct owner", async function () {
    const [owner, addr1] = await ethers.getSigners();
    const Contract = await ethers.getContractFactory("ContractName");
    const contract = await Contract.deploy();
    await contract.deployed();
    
    expect(await contract.owner()).to.equal(owner.address);
  });

  it("should revert on invalid address", async function () {
    const Contract = await ethers.getContractFactory("ContractName");
    const contract = await Contract.deploy();
    await contract.deployed();

    await expect(
      contract.airdrop("0x0000000000000000000000000000000000000000", 1)
    ).to.be.revertedWith("Invalid address");
  });
});