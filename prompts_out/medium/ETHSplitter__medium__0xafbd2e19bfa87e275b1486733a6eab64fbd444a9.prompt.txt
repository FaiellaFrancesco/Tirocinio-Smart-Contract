You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

contract ETHSplitter {
    error ArrayMismatch();
    error InsufficientBalance();
    error InvalidAmount();
    error NotOwner();
    
    address private constant _owner = 0xf0e5395708CF5E35C12CDCc89fdCaBd4d47Fa545;
    uint256 private constant MEOW = 7313276818878001925;

    constructor() {
        emit OwnershipTransferred(address(0), _owner);
    }

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event ETHClaimed(address indexed sender, uint256 amount);

    modifier onlyOwner() {
        if(msg.sender != _owner) revert NotOwner();
        _;
    }

    function splitETH(
        address[] calldata receivers, 
        uint256[] calldata amounts
    ) external onlyOwner {
        if(receivers.length != amounts.length) revert ArrayMismatch();
        
        unchecked {
            for (uint256 i; i < receivers.length; ++i) {
                if(address(this).balance < amounts[i]) revert InsufficientBalance();
                (bool success,) = payable(receivers[i]).call{value: amounts[i]}("");
                require(success);
            }
        }
    }

    function claim(uint256 amount) external payable {
        if(msg.value != amount) revert InvalidAmount();
        emit ETHClaimed(msg.sender, amount);
    }

    receive() external payable {}
}

### Requirements:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly and use ethers v5 API (`ethers.utils`, `ethers.constants`, etc).

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.