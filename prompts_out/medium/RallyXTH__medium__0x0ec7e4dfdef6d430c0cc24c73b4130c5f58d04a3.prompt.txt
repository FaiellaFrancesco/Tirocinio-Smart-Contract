You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract RallyXTH {
    string public name = "RallyXTH";
    string public symbol = "XTH";
    uint256 public totalSupply = 10000000 * 10**18; // 10M cap
    mapping(address => uint256) public balanceOf;
    uint256 public rallyBurnRate = 2; // 2% burn on rallies
    uint256 public pool; // Jackpot pool
    address[10] public topHolders;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 amount) public {
        require(balanceOf[msg.sender] >= amount, "Not enough XTH!");
        uint256 fee = (amount * 1) / 100; // 1% fee
        uint256 transferAmount = amount - fee;
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += transferAmount;
        pool += fee;
    }

    function rallyBoost(uint256 btcIncrease) public {
        if (btcIncrease >= 10) {
            uint256 bonus = (balanceOf[msg.sender] * 5) / 100; // 5% bonus
            balanceOf[msg.sender] += bonus;
            totalSupply += bonus;
        }
        if (btcIncrease >= 20) {
            uint256 burn = (balanceOf[msg.sender] * rallyBurnRate) / 100; // 2% burn
            balanceOf[msg.sender] -= burn;
            totalSupply -= burn;
        }
    }

    function updateTopHolders(address ethHighTrigger) public {
        // Placeholder for top 10 holders logic
        if (ethHighTrigger != address(0)) {
            uint256 payout = pool / 10;
            for (uint i = 0; i < 10; i++) {
                if (topHolders[i] != address(0)) {
                    balanceOf[topHolders[i]] += payout;
                }
            }
            pool = 0;
        }
    }
}

### Requirements:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly and use ethers v5 API (`ethers.utils`, `ethers.constants`, etc).

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.