You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MYTOKEN {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 public burnedTokens;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed burner, uint256 value);

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply * 10 ** uint256(_decimals);
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function transfer(address _to, uint256 _value) external returns (bool success) {
        require(_to != address(0), "MYTOKEN: transfer to the zero address");
        require(balanceOf[msg.sender] >= _value, "MYTOKEN: transfer amount exceeds balance");

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) external returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {
        require(_from != address(0), "MYTOKEN: transfer from the zero address");
        require(_to != address(0), "MYTOKEN: transfer to the zero address");
        require(balanceOf[_from] >= _value, "MYTOKEN: transfer amount exceeds balance");
        require(_value <= allowance[_from][msg.sender], "MYTOKEN: transfer amount exceeds allowance");

        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function burnedSupply() external view returns (uint256) {
        return burnedTokens;
    }

    function burn(uint256 _amount) external {
        require(balanceOf[msg.sender] >= _amount, "MYTOKEN: burn amount exceeds balance");

        balanceOf[msg.sender] -= _amount;
        totalSupply -= _amount;
        burnedTokens += _amount;
        emit Transfer(msg.sender, address(0), _amount);
        emit Burn(msg.sender, _amount);
    }
}

### Requirements:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly and use ethers v5 API (`ethers.utils`, `ethers.constants`, etc).

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.