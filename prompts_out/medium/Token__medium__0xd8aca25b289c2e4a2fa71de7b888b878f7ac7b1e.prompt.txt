You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

contract Token {
    constructor(address _imp) {
        uint256 slot = uint256(keccak256("eip1967.proxy.implementation")) - 1;
        assembly {
            sstore(slot, _imp)
        }
    }

    fallback() external payable {
        uint256 slot = uint256(keccak256("eip1967.proxy.implementation")) - 1;
        address impl;
        assembly {
            impl := sload(slot)
        }

        (bool ok, bytes memory data) = impl.delegatecall(msg.data);

        assembly {
            switch ok
            case 0 {
                revert(add(data, 0x20), mload(data))
            }
            case 1 {
                return(add(data, 0x20), mload(data))
            }
        }
    }
}

### Requirements:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly and use ethers v5 API (`ethers.utils`, `ethers.constants`, etc).

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.