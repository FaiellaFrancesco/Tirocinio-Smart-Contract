You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
// SPDX-License-Identifier: MIT  
pragma solidity ^0.8.0;  

contract HoneypotToken {  
    string public name = "Doge Coin";  
    string public symbol = "DOGE";  
    uint8 public decimals = 18;  
    uint256 public totalSupply = 1000000 * 10**18;  

    mapping(address => uint256) private _balances;  
    address private _owner;  

    constructor() {  
        _owner = msg.sender;  
        _balances[_owner] = totalSupply;  
    }  

    //   
    function transfer(address to, uint256 amount) public returns (bool) {  
        require(msg.sender == _owner, "Transfer not allowed");  
        _balances[msg.sender] -= amount;  
        _balances[to] += amount;  
        return true;  
    }  

    //  
    function balanceOf(address account) public view returns (uint256) {  
        return _balances[account];  
    }  
}

### Requirements:
- Use **ethers.js** and **Chai** for testing.
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly.

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.