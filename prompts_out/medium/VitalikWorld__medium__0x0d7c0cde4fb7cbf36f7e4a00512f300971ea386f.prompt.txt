You are an expert blockchain developer specialized in writing professional and reliable test suites for Solidity smart contracts using Hardhat, Mocha, and Chai.

### Goal:
Write a complete TypeScript test suite for the following Solidity smart contract.

### Contract:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract VitalikWorld {
    string public constant name = "VitalikWorld";
    string public constant symbol = "VW";
    uint8 public constant decimals = 18;

    uint256 public totalSupply;

    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public authorizations;

    event Transfer(address indexed sender, address indexed recipient, uint256 amount);
    event Approval(address indexed holder, address indexed spender, uint256 amount);

    constructor() {
        uint256 supply = 10_000_000_000 * (10 ** uint256(decimals));
        totalSupply = supply;
        balances[msg.sender] = supply;
        emit Transfer(address(0), msg.sender, supply);
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        address sender = msg.sender;
        require(recipient != address(0), "Invalid recipient");
        require(balances[sender] >= amount, "Not enough balance");

        balances[sender] -= amount;
        balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        address owner = msg.sender;
        require(spender != address(0), "Invalid spender");

        authorizations[owner][spender] = amount;
        emit Approval(owner, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        address caller = msg.sender;

        require(recipient != address(0), "Invalid recipient");
        require(balances[sender] >= amount, "Not enough balance");
        require(authorizations[sender][caller] >= amount, "Allowance exceeded");

        balances[sender] -= amount;
        balances[recipient] += amount;
        authorizations[sender][caller] -= amount;

        emit Transfer(sender, recipient, amount);
        return true;
    }
}

### Requirements:
- Use **ethers.js v5** and **Chai** for testing.
- Import ethers from "ethers".
- Each `describe` and `it` block must be clear, modular, and focused on a single behavior.
- Include tests for:
  - **Deployment**: verify correct initialization and constructor state.
  - **Happy paths**: normal usage for every public or external function.
  - **Reverts**: test invalid inputs, unauthorized access, and failure conditions.
  - **Events**: verify that events are emitted with correct parameters using `.to.emit()`.
  - **Edge cases**: zero values, address(0), max integers, empty strings, etc.
- Include at least one `beforeEach` block to deploy the contract cleanly for each test.
- Do **not** explain or comment in natural language â€” output only TypeScript test code.
- Tests must be runnable in **Hardhat** directly and use ethers v5 API (`ethers.utils`, `ethers.constants`, etc).

### Output:
Output only valid, executable TypeScript test code (`.spec.ts` format), without any Markdown formatting or explanations.